=============================================================================
List of generated methods in project: Meu1oARM

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "adConv1"   (component fsl_adc16)
   - adConv1_ADC16_DRV_GetAutoCalibrationParam -Gets the calibration parameters by auto calibration.
   - adConv1_ADC16_DRV_SetCalibrationParam -Sets the calibration parameters.
   - adConv1_ADC16_DRV_StructInitUserConfigDefault -Fills the initial user configuration by default for a one-time trigger mode.
   - adConv1_ADC16_DRV_Init -Initializes the ADC module converter.
   - adConv1_ADC16_DRV_Deinit -De-initializes the ADC module converter.
   - adConv1_ADC16_DRV_ConfigHwCompare -Configures the hardware compare feature.
   - adConv1_ADC16_DRV_ConfigHwAverage -Configures the hardware averaging feature.
   - adConv1_ADC16_DRV_SetChnMux -Switches the channel mux.
   - adConv1_ADC16_DRV_ConfigConvChn -Configure the conversion channel by software.
   - adConv1_ADC16_DRV_WaitConvDone -Waits for the latest conversion to be complete.
   - adConv1_ADC16_DRV_PauseConv -Pauses the current conversion by software.
   - adConv1_ADC16_DRV_GetConvValueRAW -Gets the latest conversion value with no format.
   - adConv1_ADC16_DRV_GetConvValueSigned -Gets the latest conversion value with signed.
   - adConv1_ADC16_DRV_GetConvFlag -Gets the event status of the ADC16 module.
   - adConv1_ADC16_DRV_GetChnFlag -Gets the event status of each channel group.

Module "adConv2"   (component fsl_adc16)
   - adConv2_ADC16_DRV_GetAutoCalibrationParam -Gets the calibration parameters by auto calibration.
   - adConv2_ADC16_DRV_SetCalibrationParam -Sets the calibration parameters.
   - adConv2_ADC16_DRV_StructInitUserConfigDefault -Fills the initial user configuration by default for a one-time trigger mode.
   - adConv2_ADC16_DRV_Init -Initializes the ADC module converter.
   - adConv2_ADC16_DRV_Deinit -De-initializes the ADC module converter.
   - adConv2_ADC16_DRV_ConfigHwCompare -Configures the hardware compare feature.
   - adConv2_ADC16_DRV_ConfigHwAverage -Configures the hardware averaging feature.
   - adConv2_ADC16_DRV_SetChnMux -Switches the channel mux.
   - adConv2_ADC16_DRV_ConfigConvChn -Configure the conversion channel by software.
   - adConv2_ADC16_DRV_WaitConvDone -Waits for the latest conversion to be complete.
   - adConv2_ADC16_DRV_PauseConv -Pauses the current conversion by software.
   - adConv2_ADC16_DRV_GetConvValueRAW -Gets the latest conversion value with no format.
   - adConv2_ADC16_DRV_GetConvValueSigned -Gets the latest conversion value with signed.
   - adConv2_ADC16_DRV_GetConvFlag -Gets the event status of the ADC16 module.
   - adConv2_ADC16_DRV_GetChnFlag -Gets the event status of each channel group.

Module "clockMan1" (component fsl_clock_manager)
   - clockMan1_CLOCK_SYS_SetOutDiv1 -Sets the clock out divider1 setting(OUTDIV1).
   - clockMan1_CLOCK_SYS_GetOutDiv1 -Gets the clock out divider1 setting(OUTDIV1).
   - clockMan1_CLOCK_SYS_SetOutDiv2 -Sets the clock out divider2 setting(OUTDIV2).
   - clockMan1_CLOCK_SYS_GetOutDiv2 -Gets the clock out divider2 setting(OUTDIV2).
   - clockMan1_CLOCK_SYS_SetOutDiv3 -Sets the clock out divider3 setting(OUTDIV3).
   - clockMan1_CLOCK_SYS_GetOutDiv3 -Gets the clock out divider3 setting(OUTDIV3).
   - clockMan1_CLOCK_SYS_SetOutDiv4 -Sets the clock out divider4 setting(OUTDIV4).
   - clockMan1_CLOCK_SYS_GetOutDiv4 -Gets the clock out divider4 setting(OUTDIV4).
   - clockMan1_CLOCK_SYS_SetOutDiv -Sets the clock out dividers setting.
   - clockMan1_CLOCK_SYS_GetOutDiv -Gets the clock out dividers setting.
   - clockMan1_CLOCK_SYS_GetFlexbusFreq -Get flexbus clock frequency.
   - clockMan1_CLOCK_SYS_GetPllFllClockFreq -Get the MCGPLLCLK/MCGFLLCLK/IRC48MCLK clock frequency.
   - clockMan1_CLOCK_SYS_SetPllfllSel -Set PLL/FLL clock selection.
   - clockMan1_CLOCK_SYS_GetPllfllSel -Get PLL/FLL clock selection.
   - clockMan1_CLOCK_SYS_GetFixedFreqClockFreq -Gets the MCGFFCLK clock frequency.
   - clockMan1_CLOCK_SYS_GetInternalRefClockFreq -Get internal reference clock frequency.
   - clockMan1_CLOCK_SYS_GetExternalRefClock32kFreq -Gets the external reference 32k clock frequency.
   - clockMan1_CLOCK_SYS_SetExternalRefClock32kSrc -Set the clock selection of ERCLK32K.
   - clockMan1_CLOCK_SYS_GetExternalRefClock32kSrc -Get the clock selection of ERCLK32K.
   - clockMan1_CLOCK_SYS_GetOsc0ExternalRefClockFreq -Gets the OSC0ERCLK frequency.
   - clockMan1_CLOCK_SYS_GetRtcFreq -Gets RTC input clock frequency.
   - clockMan1_CLOCK_SYS_GetRtcOutFreq -Gets RTC_CLKOUT frequency.
   - clockMan1_CLOCK_SYS_GetRtcOutSrc -Gets RTC_CLKOUT source.
   - clockMan1_CLOCK_SYS_SetRtcOutSrc -Gets RTC_CLKOUT source.
   - clockMan1_CLOCK_SYS_GetWdogFreq -Gets the watch dog clock frequency.
   - clockMan1_CLOCK_SYS_GetTraceSrc -Gets the debug trace clock source.
   - clockMan1_CLOCK_SYS_SetTraceSrc -Sets the debug trace clock source.
   - clockMan1_CLOCK_SYS_GetTraceFreq -Gets the debug trace clock frequency.
   - clockMan1_CLOCK_SYS_GetPortFilterFreq -Gets PORTx digital input filter clock frequency.
   - clockMan1_CLOCK_SYS_GetLptmrFreq -Gets LPTMRx pre-scaler/glitch filter clock frequency.
   - clockMan1_CLOCK_SYS_GetEnetRmiiSrc -Gets ethernet RMII clock source.
   - clockMan1_CLOCK_SYS_SetEnetRmiiSrc -Sets ethernet RMII clock source.
   - clockMan1_CLOCK_SYS_GetEnetRmiiFreq -Gets ethernet RMII clock frequency.
   - clockMan1_CLOCK_SYS_SetEnetTimeStampSrc -Set the ethernet timestamp clock source selection.
   - clockMan1_CLOCK_SYS_GetEnetTimeStampSrc -Get the ethernet timestamp clock source selection.
   - clockMan1_CLOCK_SYS_GetEnetTimeStampFreq -Gets ethernet timestamp clock frequency.
   - clockMan1_CLOCK_SYS_GetEwmFreq -Gets the clock frequency for EWM module.
   - clockMan1_CLOCK_SYS_GetFtfFreq -Gets the clock frequency for FTF module. (Flash Memory)
   - clockMan1_CLOCK_SYS_GetCrcFreq -Gets the clock frequency for CRC module.
   - clockMan1_CLOCK_SYS_GetCmpFreq -Gets the clock frequency for CMP module.
   - clockMan1_CLOCK_SYS_GetVrefFreq -Gets the clock frequency for VREF module.
   - clockMan1_CLOCK_SYS_GetPdbFreq -Gets the clock frequency for PDB module.
   - clockMan1_CLOCK_SYS_GetPitFreq -Gets the clock frequency for PIT module.
   - clockMan1_CLOCK_SYS_GetCmtFreq -Gets the clock frequency for CMT module.
   - clockMan1_CLOCK_SYS_GetUsbfsSrc -Gets the clock source for USB FS OTG module.
   - clockMan1_CLOCK_SYS_SetUsbfsSrc -Sets the clock source for USB FS OTG module.
   - clockMan1_CLOCK_SYS_GetUsbfsFreq -Gets the clock frequency for USB FS OTG module.
   - clockMan1_CLOCK_SYS_SetUsbfsDiv -Set USB FS divider setting.
   - clockMan1_CLOCK_SYS_GetUsbfsDiv -Get USB FS divider setting.
   - clockMan1_CLOCK_SYS_GetFlexcanFreq -Gets FLEXCAN clock frequency.
   - clockMan1_CLOCK_SYS_GetSdhcFreq -Gets the clock frequency for SDHC.
   - clockMan1_CLOCK_SYS_SetSdhcSrc -Set the SDHC clock source selection.
   - clockMan1_CLOCK_SYS_GetSdhcSrc -Get the SDHC clock source selection.
   - clockMan1_CLOCK_SYS_GetSaiFreq -Gets the clock frequency for SAI.
   - clockMan1_CLOCK_SYS_GetUsbdcdFreq -Gets the clock frequency for USB DCD module.
   - clockMan1_CLOCK_SYS_GetSpiFreq -Gets the clock frequency for SPI module.
   - clockMan1_CLOCK_SYS_GetI2cFreq -Gets the clock frequency for I2C module.
   - clockMan1_CLOCK_SYS_GetAdcAltFreq -Gets ADC alternate clock frequency.
   - clockMan1_CLOCK_SYS_GetFtmFixedFreq -Gets FTM fixed frequency clock frequency.
   - clockMan1_CLOCK_SYS_GetFtmSystemClockFreq -Gets FTM's system clock frequency.
   - clockMan1_CLOCK_SYS_GetFtmExternalFreq -Gets FTM external clock frequency.
   - clockMan1_CLOCK_SYS_GetFtmExternalSrc -Gets FTM external clock source.
   - clockMan1_CLOCK_SYS_SetFtmExternalSrc -Sets FTM external clock source.
   - clockMan1_CLOCK_SYS_GetUartFreq -Gets the clock frequency for UART module.
   - clockMan1_CLOCK_SYS_GetGpioFreq -Gets the clock frequency for GPIO module.
   - clockMan1_CLOCK_SYS_EnableDmaClock -Enable the clock for DMA module.
   - clockMan1_CLOCK_SYS_DisableDmaClock -Disable the clock for DMA module.
   - clockMan1_CLOCK_SYS_GetDmaGateCmd -Get the the clock gate state for DMA module.
   - clockMan1_CLOCK_SYS_EnableDmamuxClock -Enable the clock for DMAMUX module.
   - clockMan1_CLOCK_SYS_DisableDmamuxClock -Disable the clock for DMAMUX module.
   - clockMan1_CLOCK_SYS_GetDmamuxGateCmd -Get the the clock gate state for DMAMUX module.
   - clockMan1_CLOCK_SYS_EnablePortClock -Enable the clock for PORT module.
   - clockMan1_CLOCK_SYS_DisablePortClock -Disable the clock for PORT module.
   - clockMan1_CLOCK_SYS_GetPortGateCmd -Get the the clock gate state for PORT module.
   - clockMan1_CLOCK_SYS_EnableMpuClock -Enable the clock for MPU module.
   - clockMan1_CLOCK_SYS_DisableMpuClock -Disable the clock for MPU module.
   - clockMan1_CLOCK_SYS_GetMpuGateCmd -Get the the clock gate state for MPU module.
   - clockMan1_CLOCK_SYS_EnableEwmClock -Enable the clock for EWM module.
   - clockMan1_CLOCK_SYS_DisableEwmClock -Disable the clock for EWM module.
   - clockMan1_CLOCK_SYS_GetEwmGateCmd -Get the the clock gate state for EWM module.
   - clockMan1_CLOCK_SYS_EnableFlexbusClock -Enable the clock for FLEXBUS module.
   - clockMan1_CLOCK_SYS_DisableFlexbusClock -Disable the clock for FLEXBUS module.
   - clockMan1_CLOCK_SYS_GetFlexbusGateCmd -Get the the clock gate state for FLEXBUS module.
   - clockMan1_CLOCK_SYS_EnableFtfClock -Enable the clock for FTF module.
   - clockMan1_CLOCK_SYS_DisableFtfClock -Disable the clock for FTF module.
   - clockMan1_CLOCK_SYS_GetFtfGateCmd -Get the the clock gate state for FTF module.
   - clockMan1_CLOCK_SYS_EnableCrcClock -Enable the clock for CRC module.
   - clockMan1_CLOCK_SYS_DisableCrcClock -Disable the clock for CRC module.
   - clockMan1_CLOCK_SYS_GetCrcGateCmd -Get the the clock gate state for CRC module.
   - clockMan1_CLOCK_SYS_EnableRngaClock -Enable the clock for RNGA module.
   - clockMan1_CLOCK_SYS_DisableRngaClock -Disable the clock for RNGA module.
   - clockMan1_CLOCK_SYS_GetRngaGateCmd -Get the the clock gate state for RNGA module.
   - clockMan1_CLOCK_SYS_EnableAdcClock -Enable the clock for ADC module.
   - clockMan1_CLOCK_SYS_DisableAdcClock -Disable the clock for ADC module.
   - clockMan1_CLOCK_SYS_GetAdcGateCmd -Get the the clock gate state for ADC module.
   - clockMan1_CLOCK_SYS_EnableCmpClock -Enable the clock for CMP module.
   - clockMan1_CLOCK_SYS_DisableCmpClock -Disable the clock for CMP module.
   - clockMan1_CLOCK_SYS_GetCmpGateCmd -Get the the clock gate state for CMP module.
   - clockMan1_CLOCK_SYS_EnableDacClock -Enable the clock for DAC module.
   - clockMan1_CLOCK_SYS_DisableDacClock -Disable the clock for DAC module.
   - clockMan1_CLOCK_SYS_GetDacGateCmd -Get the the clock gate state for DAC module.
   - clockMan1_CLOCK_SYS_EnableVrefClock -Enable the clock for VREF module.
   - clockMan1_CLOCK_SYS_DisableVrefClock -Disable the clock for VREF module.
   - clockMan1_CLOCK_SYS_GetVrefGateCmd -Get the the clock gate state for VREF module.
   - clockMan1_CLOCK_SYS_EnableSaiClock -Enable the clock for SAI module.
   - clockMan1_CLOCK_SYS_DisableSaiClock -Disable the clock for SAI module.
   - clockMan1_CLOCK_SYS_GetSaiGateCmd -Get the the clock gate state for SAI module.
   - clockMan1_CLOCK_SYS_EnablePdbClock -Enable the clock for PDB module.
   - clockMan1_CLOCK_SYS_DisablePdbClock -Disable the clock for PDB module.
   - clockMan1_CLOCK_SYS_GetPdbGateCmd -Get the the clock gate state for PDB module.
   - clockMan1_CLOCK_SYS_EnableFtmClock -Enable the clock for FTM module.
   - clockMan1_CLOCK_SYS_DisableFtmClock -Disable the clock for FTM module.
   - clockMan1_CLOCK_SYS_GetFtmGateCmd -Get the the clock gate state for FTM module.
   - clockMan1_CLOCK_SYS_EnablePitClock -Enable the clock for PIT module.
   - clockMan1_CLOCK_SYS_DisablePitClock -Disable the clock for PIT module.
   - clockMan1_CLOCK_SYS_GetPitGateCmd -Get the the clock gate state for PIT module.
   - clockMan1_CLOCK_SYS_EnableLptmrClock -Enable the clock for LPTIMER module.
   - clockMan1_CLOCK_SYS_DisableLptmrClock -Disable the clock for LPTIMER module.
   - clockMan1_CLOCK_SYS_GetLptmrGateCmd -Get the the clock gate state for LPTIMER module.
   - clockMan1_CLOCK_SYS_EnableCmtClock -Enable the clock for CMT module.
   - clockMan1_CLOCK_SYS_DisableCmtClock -Disable the clock for CMT module.
   - clockMan1_CLOCK_SYS_GetCmtGateCmd -Get the the clock gate state for CMT module.
   - clockMan1_CLOCK_SYS_EnableRtcClock -Enable the clock for RTC module.
   - clockMan1_CLOCK_SYS_DisableRtcClock -Disable the clock for RTC module.
   - clockMan1_CLOCK_SYS_GetRtcGateCmd -Get the the clock gate state for RTC module.
   - clockMan1_CLOCK_SYS_EnableEnetClock -Enable the clock for ENET module.
   - clockMan1_CLOCK_SYS_DisableEnetClock -Disable the clock for ENET module.
   - clockMan1_CLOCK_SYS_GetEnetGateCmd -Get the the clock gate state for ENET module.
   - clockMan1_CLOCK_SYS_EnableUsbfsClock -Enable the clock for USBFS module.
   - clockMan1_CLOCK_SYS_DisableUsbfsClock -Disable the clock for USBFS module.
   - clockMan1_CLOCK_SYS_GetUsbfsGateCmd -Get the the clock gate state for USB module.
   - clockMan1_CLOCK_SYS_EnableUsbdcdClock -Enable the clock for USBDCD module.
   - clockMan1_CLOCK_SYS_DisableUsbdcdClock -Disable the clock for USBDCD module.
   - clockMan1_CLOCK_SYS_GetUsbdcdGateCmd -Get the the clock gate state for USBDCD module.
   - clockMan1_CLOCK_SYS_EnableFlexcanClock -Enable the clock for FLEXCAN module.
   - clockMan1_CLOCK_SYS_DisableFlexcanClock -Disable the clock for FLEXCAN module.
   - clockMan1_CLOCK_SYS_GetFlexcanGateCmd -Get the the clock gate state for FLEXCAN module.
   - clockMan1_CLOCK_SYS_EnableSpiClock -Enable the clock for SPI module.
   - clockMan1_CLOCK_SYS_DisableSpiClock -Disable the clock for SPI module.
   - clockMan1_CLOCK_SYS_GetSpiGateCmd -Get the the clock gate state for SPI module.
   - clockMan1_CLOCK_SYS_EnableI2cClock -Enable the clock for I2C module.
   - clockMan1_CLOCK_SYS_DisableI2cClock -Disable the clock for I2C module.
   - clockMan1_CLOCK_SYS_GetI2cGateCmd -Get the the clock gate state for I2C module.
   - clockMan1_CLOCK_SYS_EnableUartClock -Enable the clock for UART module.
   - clockMan1_CLOCK_SYS_DisableUartClock -Disable the clock for UART module.
   - clockMan1_CLOCK_SYS_GetUartGateCmd -Get the the clock gate state for UART module.
   - clockMan1_CLOCK_SYS_EnableSdhcClock -Enable the clock for SDHC module.
   - clockMan1_CLOCK_SYS_DisableSdhcClock -Disable the clock for SDHC module.
   - clockMan1_CLOCK_SYS_GetSdhcGateCmd -Get the the clock gate state for SDHC module.
   - clockMan1_CLOCK_SYS_SetEnetExternalFreq -Set the ENET external clock frequency(ENET_1588_CLKIN).
   - clockMan1_CLOCK_SYS_SetSdhcExternalFreq -Set the SDHC external clock frequency(SDHC_CLKIN).
   - clockMan1_CLOCK_SYS_SetUsbExternalFreq -Set the USB external clock frequency(USB_CLKIN).
   - clockMan1_CLOCK_SYS_SetFtmExternalFreq -Set the FTM external clock frequency(FTM_CLKx).
   - clockMan1_CLOCK_SYS_Init -Installs pre-defined clock configurations.
   - clockMan1_CLOCK_SYS_UpdateConfiguration -Sets the system clock configuration according to a pre-defined structure.
   - clockMan1_CLOCK_SYS_SetConfiguration -Sets the system clock configuration.
   - clockMan1_CLOCK_SYS_GetCurrentConfiguration -Gets the current system clock configuration.
   - clockMan1_CLOCK_SYS_GetErrorCallback -Gets the callback which returns an error in the last clock switch.
   - clockMan1_CLOCK_SYS_BootToFee -Sets MCG to FEE mode during startup.
   - clockMan1_CLOCK_SYS_BootToFei -Sets MCG to FEI mode during startup.
   - clockMan1_CLOCK_SYS_BootToBlpi -Sets MCG to BLPI mode during startup.
   - clockMan1_CLOCK_SYS_BootToBlpe -Sets MCG to BLPE mode during startup.
   - clockMan1_CLOCK_SYS_BootToPee -Sets MCG to PEE mode during startup.
   - clockMan1_CLOCK_SYS_SetMcgMode -Sets MCG to a target mode.
   - clockMan1_CLOCK_SYS_SetSimConfigration -Sets the clock configuration in SIM module.
   - clockMan1_CLOCK_SYS_OscInit -Initializes the OSC.
   - clockMan1_CLOCK_SYS_OscDeinit -Deinitializes the OSC.
   - clockMan1_CLOCK_SYS_SetOscerConfigration -Configures the OSCERCLK.
   - clockMan1_CLOCK_SYS_RtcOscInit -Initializes the RTC OSC.
   - clockMan1_CLOCK_SYS_RtcOscDeinit -Deinitializes the RTC OSC.
   - clockMan1_CLOCK_SYS_GetFreq -Gets the clock frequency for a specific clock name.
   - clockMan1_CLOCK_SYS_GetCoreClockFreq -Gets the core clock frequency.
   - clockMan1_CLOCK_SYS_GetSystemClockFreq -Gets the system clock frequency.
   - clockMan1_CLOCK_SYS_GetBusClockFreq -Gets the bus clock frequency.
   - clockMan1_CLOCK_SYS_GetFlashClockFreq -Gets the flash clock frequency.
   - clockMan1_CLOCK_SYS_GetLpoClockFreq -Gets the LPO clock frequency.
   - clockMan1_CLOCK_SYS_SetSystickSrc -Sets the Systick clock source SYST_CSR[CLKSOURCE].
   - clockMan1_CLOCK_SYS_GetSystickFreq -Gets the Systick clock frequency.

Module "eNet1"     (component fsl_enet)
   - eNet1_ENET_DRV_1588Init -Initializes the ENET PTP context structure with the basic configuration.
   - eNet1_ENET_DRV_1588Deinit -Frees all ring buffers.
   - eNet1_ENET_DRV_Start1588Timer -Initializes the ENET PTP timer with the basic configuration.
   - eNet1_ENET_DRV_Stop1588Timer -Stops the ENET PTP timer.
   - eNet1_ENET_DRV_Parse1588Packet -Parses the ENET packet.
   - eNet1_ENET_DRV_Get1588timer -Gets the current value of the ENET PTP time.
   - eNet1_ENET_DRV_Set1588timer -Sets the current value of the ENET PTP time.
   - eNet1_ENET_DRV_Adjust1588timer -Adjusts the ENET PTP time.
   - eNet1_ENET_DRV_GetTxTs -Stores the transmit timestamp.
   - eNet1_ENET_DRV_GetRxTs -Stores receive timestamp.
   - eNet1_ENET_DRV_1588l2queueInit -Initializes the buffer queue for the PTP layer2 Ethernet packets.
   - eNet1_ENET_DRV_Service_l2packet -Adds the PTP layer2 Ethernet packet to the PTP Ethernet packet queue.
   - eNet1_ENET_DRV_Send_l2packet -Sends the PTP layer2 Ethernet packet to the Net.
   - eNet1_ENET_DRV_Receive_l2packet -Receives the PTP layer2 Ethernet packet from the Net.
   - eNet1_ENET_DRV_1588Ioctl -Provides the handler for the 1588 stack for the PTP IOCTL.
   - eNet1_ENET_DRV_Is1588TsBuffFull -Checks whether the PTP ring buffer is full.
   - eNet1_ENET_DRV_Update1588TsBuff -Updates the latest ring buffers.
   - eNet1_ENET_DRV_Search1588TsBuff -Searches the element in ring buffers with the message ID and Clock ID.
   - eNet1_ENET_DRV_Incr1588TsBuffRing -Calculates the ENET PTP 1588 timestamp ring buffer index.
   - eNet1_ENET_DRV_TsIRQHandler -The ENET PTP time interrupt handler.
   - eNet1_ENET_DRV_Init -Initializes the ENET with the basic configuration.
   - eNet1_ENET_DRV_Deinit -De-initializes the ENET device.
   - eNet1_ENET_DRV_UpdateRxBuffDescrip -Updates the receive buffer descriptor.
   - eNet1_ENET_DRV_CleanupTxBuffDescrip -ENET transmit buffer descriptor cleanup.
   - eNet1_ENET_DRV_IncrRxBuffDescripIndex -Increases the receive buffer descriptor to the next one.
   - eNet1_ENET_DRV_IncrTxBuffDescripIndex -Increases the transmit buffer descriptor to the next one.
   - eNet1_ENET_DRV_RxErrorStats -Processes the ENET receive frame error statistics.
   - eNet1_ENET_DRV_TxErrorStats -Processes the ENET transmit frame statistics.
   - eNet1_ENET_DRV_ReceiveData -Receives ENET packets.
   - eNet1_ENET_DRV_ReceiveData -Receives ENET packets.
   - eNet1_ENET_DRV_InstallNetIfCall -Installs ENET TCP/IP stack net interface callback function.
   - eNet1_ENET_DRV_SendData -Transmits ENET packets.
   - eNet1_ENET_DRV_RxIRQHandler -The ENET receive interrupt handler.
   - eNet1_ENET_DRV_TxIRQHandler -The ENET transmit interrupt handler.
   - eNet1_ENET_DRV_CalculateCrc32 -Calculates the CRC hash value.
   - eNet1_ENET_DRV_AddMulticastGroup -Adds the ENET device to a multicast group.
   - eNet1_ENET_DRV_LeaveMulticastGroup -Moves the ENET device from a multicast group.
   - eNet1_enet_mac_enqueue_buffer -ENET buffer enqueue.
   - eNet1_enet_mac_dequeue_buffer -ENET buffer dequeue.

Module "osa1"      (component fsl_os_abstraction)
   - osa1_OSA_PollAllOtherTasks -Calls all task functions one time except for the current task.
   - osa1_DefaultISR -The default interrupt handler installed in vector table.
   - osa1_OSA_SemaCreate -Creates a semaphore with a given value.
   - osa1_OSA_SemaWait -Pending a semaphore with timeout.
   - osa1_OSA_SemaPost -Signals for someone waiting on the semaphore to wake up.
   - osa1_OSA_SemaDestroy -Destroys a previously created semaphore.
   - osa1_OSA_MutexCreate -Create an unlocked mutex.
   - osa1_OSA_MutexLock -Waits for a mutex and locks it.
   - osa1_OSA_MutexUnlock -Unlocks a previously locked mutex.
   - osa1_OSA_MutexDestroy -Destroys a previously created mutex.
   - osa1_OSA_EventCreate -Initializes an event object with all flags cleared.
   - osa1_OSA_EventWait -Waits for specified event flags to be set.
   - osa1_OSA_EventSet -Sets one or more event flags.
   - osa1_OSA_EventClear -Clears one or more flags.
   - osa1_OSA_EventGetFlags -Gets event flags status.
   - osa1_OSA_EventDestroy -Destroys a previously created event object.
   - osa1_OSA_TaskCreate -Creates a task.
   - osa1_OSA_TaskDestroy -Destroys a previously created task.
   - osa1_OSA_TaskYield -Puts the active task to the end of scheduler's queue.
   - osa1_OSA_TaskGetHandler -Gets the handler of active task.
   - osa1_OSA_TaskGetPriority -Gets the priority of a task.
   - osa1_OSA_TaskSetPriority -Sets the priority of a task.
   - osa1_OSA_MsgQCreate -Initializes a message queue.
   - osa1_OSA_MsgQPut -Puts a message at the end of the queue.
   - osa1_OSA_MsgQGet -Reads and remove a message at the head of the queue.
   - osa1_OSA_MsgQDestroy -Destroys a previously created queue.
   - osa1_OSA_MemAlloc -Reserves the requested amount of memory in bytes.
   - osa1_OSA_MemAllocZero -Reserves the requested amount of memory in bytes and initializes it to 0.
   - osa1_OSA_MemFree -Releases the memory previously reserved.
   - osa1_OSA_TimeDelay -Delays execution for a number of milliseconds.
   - osa1_OSA_TimeGetMsec -Gets the current time since system boot in milliseconds.
   - osa1_OSA_InstallIntHandler -Installs the interrupt handler.
   - osa1_OSA_EnterCritical -Enters the critical section to ensure some code is not preempted.
   - osa1_OSA_ExitCritical -Exits the critical section.
   - osa1_OSA_Init -Initializes the RTOS services.
   - osa1_OSA_Start -Starts the RTOS.

Module "intMan1"   (component fsl_interrupt_manager)
   - intMan1_INT_SYS_InstallHandler -Installs an interrupt handler routine for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQ -Enables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_DisableIRQ -Disables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQGlobal -Enables system interrupt.
   - intMan1_INT_SYS_DisableIRQGlobal -Disable system interrupt.

Module "gpio1"     (component fsl_gpio)
   - gpio1_GPIO_DRV_Init -Initializes all GPIO pins used by the board.
   - gpio1_GPIO_DRV_InputPinInit -Initializes one GPIO input pin used by the board.
   - gpio1_GPIO_DRV_OutputPinInit -Initializes one GPIO output pin used by the board.
   - gpio1_GPIO_DRV_GetPinDir -Gets the current direction of the individual GPIO pin.
   - gpio1_GPIO_DRV_SetPinDir -Sets the current direction of the individual GPIO pin.
   - gpio1_GPIO_DRV_WritePinOutput -Sets the output level of the individual GPIO pin to the logic 1 or 0.
   - gpio1_GPIO_DRV_SetPinOutput -Sets the output level of the individual GPIO pin to the logic 1.
   - gpio1_GPIO_DRV_ClearPinOutput -Sets the output level of the individual GPIO pin to the logic 0.
   - gpio1_GPIO_DRV_TogglePinOutput -Reverses current output logic of the individual GPIO pin.
   - gpio1_GPIO_DRV_ReadPinInput -Reads the current input value of the individual GPIO pin.
   - gpio1_GPIO_DRV_SetDigitalFilterCmd -Enables or disables the digital filter in a single port.
   - gpio1_GPIO_DRV_IsPinIntPending -Reads the individual pin-interrupt status flag.
   - gpio1_GPIO_DRV_ClearPinIntFlag -Clears the individual GPIO pin interrupt status flag.

Module "memoryCard1" (component fsl_sdcard)
   - memoryCard1_SDSPI_DRV_Init -Initializes the card on a specific SPI instance.
   - memoryCard1_SDSPI_DRV_ReadBlocks -Reads blocks from the specific card.
   - memoryCard1_SDSPI_DRV_WriteBlocks -Writes blocks of data to the specific card.
   - memoryCard1_SDSPI_DRV_CheckReadOnly -Checks whether the card is write-protected.
   - memoryCard1_SDSPI_DRV_Shutdown -Deinitializes the card.
   - memoryCard1_SDCARD_DRV_Init -Initializes the card on a specific host controller.
   - memoryCard1_SDCARD_DRV_ReadBlocks -Reads blocks from the specific card.
   - memoryCard1_SDCARD_DRV_WriteBlocks -Writes blocks of data to the specific card.
   - memoryCard1_SDCARD_DRV_EraseBlocks -Erases blocks of the specific card.
   - memoryCard1_SDCARD_DRV_CheckReadOnly -Checks whether the card is write-protected.
   - memoryCard1_SDCARD_DRV_Shutdown -Deinitializes the card.

Module "MPU"       (component Init_MPU_VAR0)
   - MPU_Init -This method initializes registers of the MPU module according to the Peripheral Initialization settings. Call 
                this method in user code to initialize the module. By default, the method is called by PE automatically; see 
                "Call Init method" property of the component for more details.

Module "pin_mux"   (component PinSettings)
   - pin_mux_hardware_init -This method configures registers according to settings of routing and electrical features. It 
                provides pin initialization for selected pins during processor start-up. Selected pins are either user selected 
                pins or pins selected in pin properties in components.  Only pins of devices  enabled for auto initialization 
                are handled within this method.
   - pin_mux_init_enet_pins -ENET method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                ENET peripheral.
   - pin_mux_deinit_enet_pins -ENET method de-configures registers according to settings of routing. This method is enabled 
                only if any pin of corresponding peripheral type is selected. Selected pins are either user selected pins or 
                pins selected in pin items in components. Call this method code to un-route desired pins into ENET peripheral.
   - pin_mux_init_gpio_pins -GPIO method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into PTA,
                PTB, PTC, PTD, PTE peripherals.
   - pin_mux_deinit_gpio_pins -GPIO method de-configures registers according to settings of routing. This method is enabled 
                only if any pin of corresponding peripheral type is selected. Selected pins are either user selected pins or 
                pins selected in pin items in components. Call this method code to un-route desired pins into PTA, PTB, PTC, 
                PTD, PTE peripherals.
   - pin_mux_init_jtag_pins -JTAG method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                JTAG peripheral.
   - pin_mux_deinit_jtag_pins -JTAG method de-configures registers according to settings of routing. This method is enabled 
                only if any pin of corresponding peripheral type is selected. Selected pins are either user selected pins or 
                pins selected in pin items in components. Call this method code to un-route desired pins into JTAG peripheral.
   - pin_mux_init_llwu_pins -LLWU method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                LLWU peripheral.
   - pin_mux_deinit_llwu_pins -LLWU method de-configures registers according to settings of routing. This method is enabled 
                only if any pin of corresponding peripheral type is selected. Selected pins are either user selected pins or 
                pins selected in pin items in components. Call this method code to un-route desired pins into LLWU peripheral.
   - pin_mux_init_osc_pins -OSC method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into OSC 
                peripheral.
   - pin_mux_deinit_osc_pins -OSC method de-configures registers according to settings of routing. This method is enabled only 
                if any pin of corresponding peripheral type is selected. Selected pins are either user selected pins or pins 
                selected in pin items in components. Call this method code to un-route desired pins into OSC peripheral.
   - pin_mux_init_sdhc_pins -SDHC method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                SDHC peripheral.
   - pin_mux_deinit_sdhc_pins -SDHC method de-configures registers according to settings of routing. This method is enabled 
                only if any pin of corresponding peripheral type is selected. Selected pins are either user selected pins or 
                pins selected in pin items in components. Call this method code to un-route desired pins into SDHC peripheral.
   - pin_mux_init_tpiu_pins -TPIU method configures registers according to settings  of routing and electrical features. This 
                method is enabled only if any pin of corresponding peripheral type is selected. Selected pins are either user 
                selected pins or pins selected in pin items in components. Call this method code to route desired pins into 
                TPIU peripheral.
   - pin_mux_deinit_tpiu_pins -TPIU method de-configures registers according to settings of routing. This method is enabled 
                only if any pin of corresponding peripheral type is selected. Selected pins are either user selected pins or 
                pins selected in pin items in components. Call this method code to un-route desired pins into TPIU peripheral.

Module "pitTimer1" (component fsl_pit)
   - pitTimer1_PIT_DRV_Init -Initializes the PIT module.
   - pitTimer1_PIT_DRV_Deinit -Disables the PIT module and gate control.
   - pitTimer1_PIT_DRV_InitChannel -Initializes the PIT channel.
   - pitTimer1_PIT_DRV_StartTimer -Starts the timer counting.
   - pitTimer1_PIT_DRV_StopTimer -Stops the timer counting.
   - pitTimer1_PIT_DRV_SetTimerPeriodByUs -Sets the timer period in microseconds.
   - pitTimer1_PIT_DRV_GetTimerPeriodByUs -Gets the timer period in microseconds for a single channel.
   - pitTimer1_PIT_DRV_ReadTimerUs -Reads the current timer value in microseconds.
   - pitTimer1_PIT_DRV_SetTimerPeriodByCount -Sets the timer period in units of count.
   - pitTimer1_PIT_DRV_GetTimerPeriodByCount -Returns the current timer period in units of count.
   - pitTimer1_PIT_DRV_ReadTimerCount -Reads the current timer counting value.
   - pitTimer1_PIT_DRV_InitUs -Initializes two PIT channels to serve as a microseconds unit.
   - pitTimer1_PIT_DRV_GetUs -Gets an absolute time stamp.
   - pitTimer1_PIT_DRV_DelayUs -Delays the specific microseconds.
   - pitTimer1_PIT_DRV_ClearIntFlag -Clears the timer interrupt flag.
   - pitTimer1_PIT_DRV_IsIntPending -Reads the current timer timeout flag.

Module "pitTimer2" (component fsl_pit)
   - pitTimer2_PIT_DRV_Init -Initializes the PIT module.
   - pitTimer2_PIT_DRV_Deinit -Disables the PIT module and gate control.
   - pitTimer2_PIT_DRV_InitChannel -Initializes the PIT channel.
   - pitTimer2_PIT_DRV_StartTimer -Starts the timer counting.
   - pitTimer2_PIT_DRV_StopTimer -Stops the timer counting.
   - pitTimer2_PIT_DRV_SetTimerPeriodByUs -Sets the timer period in microseconds.
   - pitTimer2_PIT_DRV_GetTimerPeriodByUs -Gets the timer period in microseconds for a single channel.
   - pitTimer2_PIT_DRV_ReadTimerUs -Reads the current timer value in microseconds.
   - pitTimer2_PIT_DRV_SetTimerPeriodByCount -Sets the timer period in units of count.
   - pitTimer2_PIT_DRV_GetTimerPeriodByCount -Returns the current timer period in units of count.
   - pitTimer2_PIT_DRV_ReadTimerCount -Reads the current timer counting value.
   - pitTimer2_PIT_DRV_InitUs -Initializes two PIT channels to serve as a microseconds unit.
   - pitTimer2_PIT_DRV_GetUs -Gets an absolute time stamp.
   - pitTimer2_PIT_DRV_DelayUs -Delays the specific microseconds.
   - pitTimer2_PIT_DRV_ClearIntFlag -Clears the timer interrupt flag.
   - pitTimer2_PIT_DRV_IsIntPending -Reads the current timer timeout flag.

Module "pitTimer3" (component fsl_pit)
   - pitTimer3_PIT_DRV_Init -Initializes the PIT module.
   - pitTimer3_PIT_DRV_Deinit -Disables the PIT module and gate control.
   - pitTimer3_PIT_DRV_InitChannel -Initializes the PIT channel.
   - pitTimer3_PIT_DRV_StartTimer -Starts the timer counting.
   - pitTimer3_PIT_DRV_StopTimer -Stops the timer counting.
   - pitTimer3_PIT_DRV_SetTimerPeriodByUs -Sets the timer period in microseconds.
   - pitTimer3_PIT_DRV_GetTimerPeriodByUs -Gets the timer period in microseconds for a single channel.
   - pitTimer3_PIT_DRV_ReadTimerUs -Reads the current timer value in microseconds.
   - pitTimer3_PIT_DRV_SetTimerPeriodByCount -Sets the timer period in units of count.
   - pitTimer3_PIT_DRV_GetTimerPeriodByCount -Returns the current timer period in units of count.
   - pitTimer3_PIT_DRV_ReadTimerCount -Reads the current timer counting value.
   - pitTimer3_PIT_DRV_InitUs -Initializes two PIT channels to serve as a microseconds unit.
   - pitTimer3_PIT_DRV_GetUs -Gets an absolute time stamp.
   - pitTimer3_PIT_DRV_DelayUs -Delays the specific microseconds.
   - pitTimer3_PIT_DRV_ClearIntFlag -Clears the timer interrupt flag.
   - pitTimer3_PIT_DRV_IsIntPending -Reads the current timer timeout flag.

Module "pitTimer4" (component fsl_pit)
   - pitTimer4_PIT_DRV_Init -Initializes the PIT module.
   - pitTimer4_PIT_DRV_Deinit -Disables the PIT module and gate control.
   - pitTimer4_PIT_DRV_InitChannel -Initializes the PIT channel.
   - pitTimer4_PIT_DRV_StartTimer -Starts the timer counting.
   - pitTimer4_PIT_DRV_StopTimer -Stops the timer counting.
   - pitTimer4_PIT_DRV_SetTimerPeriodByUs -Sets the timer period in microseconds.
   - pitTimer4_PIT_DRV_GetTimerPeriodByUs -Gets the timer period in microseconds for a single channel.
   - pitTimer4_PIT_DRV_ReadTimerUs -Reads the current timer value in microseconds.
   - pitTimer4_PIT_DRV_SetTimerPeriodByCount -Sets the timer period in units of count.
   - pitTimer4_PIT_DRV_GetTimerPeriodByCount -Returns the current timer period in units of count.
   - pitTimer4_PIT_DRV_ReadTimerCount -Reads the current timer counting value.
   - pitTimer4_PIT_DRV_InitUs -Initializes two PIT channels to serve as a microseconds unit.
   - pitTimer4_PIT_DRV_GetUs -Gets an absolute time stamp.
   - pitTimer4_PIT_DRV_DelayUs -Delays the specific microseconds.
   - pitTimer4_PIT_DRV_ClearIntFlag -Clears the timer interrupt flag.
   - pitTimer4_PIT_DRV_IsIntPending -Reads the current timer timeout flag.

Module "PORTE"     (component Init_PORT_VAR0)
   - PORTE_Init -This method initializes registers of the PORT module according to the Peripheral Initialization settings. Call 
                this method in user code to initialize the module. By default, the method is called by PE automatically; see 
                "Call Init method" property of the component for more details.

Module "KSDK1"     (component KinetisSDK)

Module "rtcTimer1" (component fsl_rtc_hal)
   - rtcTimer1_RTC_HAL_Init -Clears all interrupts.
   - rtcTimer1_RTC_HAL_ConvertSecsToDatetime -Converts seconds to date time format data structure.
   - rtcTimer1_RTC_HAL_IsDatetimeCorrectFormat -Checks whether the date time structure elements have the information that is 
                within the range.
   - rtcTimer1_RTC_HAL_ConvertDatetimeToSecs -Converts the date time format data structure to seconds.
   - rtcTimer1_RTC_HAL_SetDatetime -Sets the RTC date and time according to a given time structure.
   - rtcTimer1_RTC_HAL_SetDatetimeInsecs -Sets the RTC date and time according to the given time provided in seconds.
   - rtcTimer1_RTC_HAL_GetDatetime -Gets the RTC time and stores it in the given time structure.
   - rtcTimer1_RTC_HAL_GetDatetimeInSecs -Gets the RTC time and returns it in seconds.
   - rtcTimer1_RTC_HAL_GetAlarm -Reads the value of the time alarm.
   - rtcTimer1_RTC_HAL_SetAlarm -Sets the RTC alarm time and enables the alarm interrupt.
   - rtcTimer1_RTC_HAL_GetSecsReg -Reads the value of the time seconds counter.
   - rtcTimer1_RTC_HAL_SetSecsReg -Writes to the time seconds counter.
   - rtcTimer1_RTC_HAL_SetAlarmReg -Sets the time alarm and clears the time alarm flag.
   - rtcTimer1_RTC_HAL_GetAlarmReg -Gets the time alarm register contents.
   - rtcTimer1_RTC_HAL_GetPrescaler -Reads the value of the time prescaler.
   - rtcTimer1_RTC_HAL_SetPrescaler -Sets the time prescaler.
   - rtcTimer1_RTC_HAL_GetCompensationReg -Reads the time compensation register contents.
   - rtcTimer1_RTC_HAL_SetCompensationReg -Writes the value to the RTC TCR register.
   - rtcTimer1_RTC_HAL_GetCompensationIntervalCounter -Reads the current value of the compensation interval counter, which is 
                the field CIC in the RTC TCR register.
   - rtcTimer1_RTC_HAL_GetTimeCompensationValue -Reads the current value used by the compensation logic for the present second 
                interval.
   - rtcTimer1_RTC_HAL_GetCompensationIntervalRegister -Reads the compensation interval register.
   - rtcTimer1_RTC_HAL_SetCompensationIntervalRegister -Writes the compensation interval.
   - rtcTimer1_RTC_HAL_GetTimeCompensationRegister -Reads the time compensation value which is the configured number of 32.768 
                kHz clock cycles in each second.
   - rtcTimer1_RTC_HAL_SetTimeCompensationRegister -Writes to the field Time Compensation Register (TCR) of the RTC Time 
                Compensation Register (RTC_TCR).
   - rtcTimer1_RTC_HAL_SetOsc2pfLoadCmd -Enables/disables the oscillator configuration for the 2pF load.
   - rtcTimer1_RTC_HAL_GetOsc2pfLoad -Reads the oscillator 2pF load configure bit.
   - rtcTimer1_RTC_HAL_SetOsc4pfLoadCmd -Enables/disables the oscillator configuration for the 4pF load.
   - rtcTimer1_RTC_HAL_GetOsc4pfLoad -Reads the oscillator 4pF load configuration bit.
   - rtcTimer1_RTC_HAL_SetOsc8pfLoadCmd -Enables/disables the oscillator configuration for the 8pF load.
   - rtcTimer1_RTC_HAL_GetOsc8pfLoad -Reads the oscillator 8pF load configuration bit.
   - rtcTimer1_RTC_HAL_SetOsc16pfLoadCmd -Enables/disables the oscillator configuration for the 16pF load.
   - rtcTimer1_RTC_HAL_GetOsc16pfLoad -Reads the oscillator 16pF load configuration bit.
   - rtcTimer1_RTC_HAL_SetClockOutCmd -Enables/disables the 32 kHz clock output to other peripherals.
   - rtcTimer1_RTC_HAL_GetClockOutCmd -Reads the RTC_CR CLKO bit.
   - rtcTimer1_RTC_HAL_SetOscillatorCmd -Enables/disables the oscillator.
   - rtcTimer1_RTC_HAL_IsOscillatorEnabled -Reads the RTC_CR OSCE bit.
   - rtcTimer1_RTC_HAL_SoftwareReset -Performs a software reset on the RTC module.
   - rtcTimer1_RTC_HAL_SoftwareResetFlagClear -Clears the software reset flag.
   - rtcTimer1_RTC_HAL_ReadSoftwareResetStatus -Reads the RTC_CR SWR bit.
   - rtcTimer1_RTC_HAL_IsCounterEnabled -Reads the time counter status (enabled/disabled).
   - rtcTimer1_RTC_HAL_EnableCounter -Changes the time counter status.
   - rtcTimer1_RTC_HAL_HasAlarmOccured -Checks whether the configured time alarm has occurred.
   - rtcTimer1_RTC_HAL_IsTimeInvalid -Checks whether the time has been marked as invalid.
   - rtcTimer1_RTC_HAL_IsSecsIntEnabled -Checks whether the Time Seconds Interrupt is enabled/disabled.
   - rtcTimer1_RTC_HAL_SetSecsIntCmd -Enables/disables the Time Seconds Interrupt.
   - rtcTimer1_RTC_HAL_ReadAlarmInt -Checks whether the Time Alarm Interrupt is enabled/disabled.
   - rtcTimer1_RTC_HAL_SetAlarmIntCmd -Enables/disables the Time Alarm Interrupt.
   - rtcTimer1_RTC_HAL_SetTimeOverflowIntCmd -Enables/disables the Time Overflow Interrupt.
   - rtcTimer1_RTC_HAL_SetTimeInvalidIntCmd -Enables/disables the Time Invalid Interrupt.

Module "WDOG"      (component Init_WDOG_VAR0)
   - WDOG_Init -This method initializes registers of the WDOG module according to the Peripheral Initialization settings. Call 
                this method in user code to initialize the module. By default, the method is called by PE automatically; see 
                "Call Init method" property of the component for more details.

Module "Cpu"       (component MK64FN1M0LL12_4SDK)
   - Cpu_SystemInit -This method configures the oscillator (PLL) that is part of the microcontroller device. SystemInit is 
                called from startup_device file.
   - Cpu_SystemCoreClockUpdate -SystemCoreClockUpdate evaluates the clock register settings and calculates the current core 
                clock.

===================================================================================
