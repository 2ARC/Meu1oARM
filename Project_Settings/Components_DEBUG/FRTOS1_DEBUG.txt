
{{DEVELOPMENT}} --------(((DEBUGINFO)))--------{{DEVELOPMENT}} 

 DRIVER SYMBOLS (alphabet order)
-------------------------------
Abstract=Common\FreeRTOSAbstract.Inc
DriverAuthor=Author
DriverDate=27.08.2009
DriverVersion=01.00
EndOfInterface=
PareAction=
ParpcName=
ParpcQueueName=
ParpcTaskName=
ParpcTimerName=
ParpulNotificationValue=
ParpulPreviousNotifyValue=
Parpv=
ParpvBuffer=
ParpvCreatedTask=
ParpvItemToQueue=
ParpvParameter1=
ParpvParameters=
ParpvTaskCode=
ParpvTimerID=
ParpvValue=
ParpxCallbackFunction=
ParpxHigherPriorityTaskWoken=
ParpxPreviousWakeTime=
ParpxQueueToDelete=
ParpxTask=
ParpxTaskToResume=
ParpxTaskToSuspend=
ParulBitsToClearOnEntry=
ParulBitsToClearOnExit=
ParulParameter2=
ParulValue=
ParusStackDepth=
ParuxAutoReload=
ParuxBitsToSet=
ParuxBitsToWaitFor=
ParuxInitialCount=
ParuxItemSize=
ParuxMaxCount=
ParuxNewPriority=
ParuxPriority=
ParuxQueueLength=
ParxBlockTime=
ParxClearCountOnExit=
ParxClearOnExit=
ParxEventGroup=
ParxFunctionToPend=
ParxIndex=
ParxMutex=
ParxNewPeriod=
ParxQueue=
ParxSemaphore=
ParxTask=
ParxTaskToNotify=
ParxTaskToQuery=
ParxTaskToSet=
ParxTicksToDelay=
ParxTicksToWait=
ParxTimeIncrement=
ParxTimer=
ParxTimerPeriod=
ParxWaitForAllBits=
ParxWantedSize=
RTOSConfigDirFolder=
RetVal=
Settings=Common\FreeRTOSSettings.Inc
ivINT_ADC0=defaultInt
ivINT_ADC0_No=55
ivINT_ADC0_UserCount=1
ivINT_ADC1=defaultInt
ivINT_ADC1_No=89
ivINT_ADC1_UserCount=1
ivINT_Bus_Fault=defaultInt
ivINT_Bus_Fault_No=5
ivINT_Bus_Fault_UserCount=0
ivINT_CAN0_Bus_Off=defaultInt
ivINT_CAN0_Bus_Off_No=92
ivINT_CAN0_Bus_Off_UserCount=0
ivINT_CAN0_Error=defaultInt
ivINT_CAN0_Error_No=93
ivINT_CAN0_Error_UserCount=0
ivINT_CAN0_ORed_Message_buffer=defaultInt
ivINT_CAN0_ORed_Message_buffer_No=91
ivINT_CAN0_ORed_Message_buffer_UserCount=0
ivINT_CAN0_Rx_Warning=defaultInt
ivINT_CAN0_Rx_Warning_No=95
ivINT_CAN0_Rx_Warning_UserCount=0
ivINT_CAN0_Tx_Warning=defaultInt
ivINT_CAN0_Tx_Warning_No=94
ivINT_CAN0_Tx_Warning_UserCount=0
ivINT_CAN0_Wake_Up=defaultInt
ivINT_CAN0_Wake_Up_No=96
ivINT_CAN0_Wake_Up_UserCount=0
ivINT_CMP0=defaultInt
ivINT_CMP0_No=56
ivINT_CMP0_UserCount=0
ivINT_CMP1=defaultInt
ivINT_CMP1_No=57
ivINT_CMP1_UserCount=0
ivINT_CMP2=defaultInt
ivINT_CMP2_No=86
ivINT_CMP2_UserCount=0
ivINT_CMT=defaultInt
ivINT_CMT_No=61
ivINT_CMT_UserCount=0
ivINT_DAC0=defaultInt
ivINT_DAC0_No=72
ivINT_DAC0_UserCount=0
ivINT_DMA0=defaultInt
ivINT_DMA0_No=16
ivINT_DMA0_UserCount=0
ivINT_DMA1=defaultInt
ivINT_DMA10=defaultInt
ivINT_DMA10_No=26
ivINT_DMA10_UserCount=0
ivINT_DMA11=defaultInt
ivINT_DMA11_No=27
ivINT_DMA11_UserCount=0
ivINT_DMA12=defaultInt
ivINT_DMA12_No=28
ivINT_DMA12_UserCount=0
ivINT_DMA13=defaultInt
ivINT_DMA13_No=29
ivINT_DMA13_UserCount=0
ivINT_DMA14=defaultInt
ivINT_DMA14_No=30
ivINT_DMA14_UserCount=0
ivINT_DMA15=defaultInt
ivINT_DMA15_No=31
ivINT_DMA15_UserCount=0
ivINT_DMA1_No=17
ivINT_DMA1_UserCount=0
ivINT_DMA2=defaultInt
ivINT_DMA2_No=18
ivINT_DMA2_UserCount=0
ivINT_DMA3=defaultInt
ivINT_DMA3_No=19
ivINT_DMA3_UserCount=0
ivINT_DMA4=defaultInt
ivINT_DMA4_No=20
ivINT_DMA4_UserCount=0
ivINT_DMA5=defaultInt
ivINT_DMA5_No=21
ivINT_DMA5_UserCount=0
ivINT_DMA6=defaultInt
ivINT_DMA6_No=22
ivINT_DMA6_UserCount=0
ivINT_DMA7=defaultInt
ivINT_DMA7_No=23
ivINT_DMA7_UserCount=0
ivINT_DMA8=defaultInt
ivINT_DMA8_No=24
ivINT_DMA8_UserCount=0
ivINT_DMA9=defaultInt
ivINT_DMA9_No=25
ivINT_DMA9_UserCount=0
ivINT_DMA_Error=defaultInt
ivINT_DMA_Error_No=32
ivINT_DMA_Error_UserCount=0
ivINT_DebugMonitor=defaultInt
ivINT_DebugMonitor_No=12
ivINT_DebugMonitor_UserCount=0
ivINT_ENET_1588_Timer=defaultInt
ivINT_ENET_1588_Timer_No=98
ivINT_ENET_1588_Timer_UserCount=0
ivINT_ENET_Error=defaultInt
ivINT_ENET_Error_No=101
ivINT_ENET_Error_UserCount=0
ivINT_ENET_Receive=defaultInt
ivINT_ENET_Receive_No=100
ivINT_ENET_Receive_UserCount=0
ivINT_ENET_Transmit=defaultInt
ivINT_ENET_Transmit_No=99
ivINT_ENET_Transmit_UserCount=0
ivINT_FTFE=defaultInt
ivINT_FTFE_No=34
ivINT_FTFE_UserCount=0
ivINT_FTM0=defaultInt
ivINT_FTM0_No=58
ivINT_FTM0_UserCount=0
ivINT_FTM1=defaultInt
ivINT_FTM1_No=59
ivINT_FTM1_UserCount=0
ivINT_FTM2=defaultInt
ivINT_FTM2_No=60
ivINT_FTM2_UserCount=0
ivINT_FTM3=defaultInt
ivINT_FTM3_No=87
ivINT_FTM3_UserCount=0
ivINT_Hard_Fault=defaultInt
ivINT_Hard_Fault_No=3
ivINT_Hard_Fault_UserCount=0
ivINT_I2C0=defaultInt
ivINT_I2C0_No=40
ivINT_I2C0_UserCount=0
ivINT_I2C1=defaultInt
ivINT_I2C1_No=41
ivINT_I2C1_UserCount=0
ivINT_I2C2=defaultInt
ivINT_I2C2_No=90
ivINT_I2C2_UserCount=0
ivINT_I2S0_Rx=defaultInt
ivINT_I2S0_Rx_No=45
ivINT_I2S0_Rx_UserCount=0
ivINT_I2S0_Tx=defaultInt
ivINT_I2S0_Tx_No=44
ivINT_I2S0_Tx_UserCount=0
ivINT_Initial_Program_Counter=defaultInt
ivINT_Initial_Program_Counter_No=1
ivINT_Initial_Program_Counter_RESET=
ivINT_Initial_Program_Counter_UserCount=0
ivINT_Initial_Stack_Pointer=defaultInt
ivINT_Initial_Stack_Pointer_No=0
ivINT_Initial_Stack_Pointer_RESET=
ivINT_Initial_Stack_Pointer_UserCount=0
ivINT_LLWU=defaultInt
ivINT_LLWU_No=37
ivINT_LLWU_UserCount=0
ivINT_LPTMR0=defaultInt
ivINT_LPTMR0_No=74
ivINT_LPTMR0_UserCount=0
ivINT_LVD_LVW=defaultInt
ivINT_LVD_LVW_No=36
ivINT_LVD_LVW_UserCount=0
ivINT_MCG=defaultInt
ivINT_MCG_No=73
ivINT_MCG_UserCount=0
ivINT_MCM=defaultInt
ivINT_MCM_No=33
ivINT_MCM_UserCount=0
ivINT_Mem_Manage_Fault=defaultInt
ivINT_Mem_Manage_Fault_No=4
ivINT_Mem_Manage_Fault_UserCount=0
ivINT_NMI=defaultInt
ivINT_NMI_No=2
ivINT_NMI_UserCount=0
ivINT_PDB0=defaultInt
ivINT_PDB0_No=68
ivINT_PDB0_UserCount=0
ivINT_PIT0=defaultInt
ivINT_PIT0_No=64
ivINT_PIT0_UserCount=1
ivINT_PIT1=defaultInt
ivINT_PIT1_No=65
ivINT_PIT1_UserCount=1
ivINT_PIT2=defaultInt
ivINT_PIT2_No=66
ivINT_PIT2_UserCount=1
ivINT_PIT3=defaultInt
ivINT_PIT3_No=67
ivINT_PIT3_UserCount=1
ivINT_PORTA=defaultInt
ivINT_PORTA_No=75
ivINT_PORTA_UserCount=0
ivINT_PORTB=defaultInt
ivINT_PORTB_No=76
ivINT_PORTB_UserCount=1
ivINT_PORTC=defaultInt
ivINT_PORTC_No=77
ivINT_PORTC_UserCount=0
ivINT_PORTD=defaultInt
ivINT_PORTD_No=78
ivINT_PORTD_UserCount=1
ivINT_PORTE=defaultInt
ivINT_PORTE_No=79
ivINT_PORTE_UserCount=2
ivINT_PendableSrvReq=defaultInt
ivINT_PendableSrvReq_No=14
ivINT_PendableSrvReq_UserCount=0
ivINT_RNG=defaultInt
ivINT_RNG_No=39
ivINT_RNG_UserCount=0
ivINT_RTC=defaultInt
ivINT_RTC_No=62
ivINT_RTC_Seconds=defaultInt
ivINT_RTC_Seconds_No=63
ivINT_RTC_Seconds_UserCount=0
ivINT_RTC_UserCount=0
ivINT_Read_Collision=defaultInt
ivINT_Read_Collision_No=35
ivINT_Read_Collision_UserCount=0
ivINT_Reserved10=defaultInt
ivINT_Reserved10_No=10
ivINT_Reserved10_UserCount=0
ivINT_Reserved13=defaultInt
ivINT_Reserved13_No=13
ivINT_Reserved13_UserCount=0
ivINT_Reserved7=defaultInt
ivINT_Reserved71=defaultInt
ivINT_Reserved71_No=71
ivINT_Reserved71_UserCount=0
ivINT_Reserved7_No=7
ivINT_Reserved7_UserCount=0
ivINT_Reserved8=defaultInt
ivINT_Reserved88=defaultInt
ivINT_Reserved88_No=88
ivINT_Reserved88_UserCount=0
ivINT_Reserved8_No=8
ivINT_Reserved8_UserCount=0
ivINT_Reserved9=defaultInt
ivINT_Reserved9_No=9
ivINT_Reserved9_UserCount=0
ivINT_SDHC=defaultInt
ivINT_SDHC_No=97
ivINT_SDHC_UserCount=1
ivINT_SPI0=defaultInt
ivINT_SPI0_No=42
ivINT_SPI0_UserCount=0
ivINT_SPI1=defaultInt
ivINT_SPI1_No=43
ivINT_SPI1_UserCount=0
ivINT_SPI2=defaultInt
ivINT_SPI2_No=81
ivINT_SPI2_UserCount=0
ivINT_SVCall=defaultInt
ivINT_SVCall_No=11
ivINT_SVCall_UserCount=0
ivINT_SWI=defaultInt
ivINT_SWI_No=80
ivINT_SWI_SWint=
ivINT_SWI_UserCount=0
ivINT_SysTick=defaultInt
ivINT_SysTick_No=15
ivINT_SysTick_UserCount=1
ivINT_UART0_ERR=defaultInt
ivINT_UART0_ERR_No=48
ivINT_UART0_ERR_UserCount=0
ivINT_UART0_LON=defaultInt
ivINT_UART0_LON_No=46
ivINT_UART0_LON_UserCount=0
ivINT_UART0_RX_TX=defaultInt
ivINT_UART0_RX_TX_No=47
ivINT_UART0_RX_TX_UserCount=0
ivINT_UART1_ERR=defaultInt
ivINT_UART1_ERR_No=50
ivINT_UART1_ERR_UserCount=0
ivINT_UART1_RX_TX=defaultInt
ivINT_UART1_RX_TX_No=49
ivINT_UART1_RX_TX_UserCount=0
ivINT_UART2_ERR=defaultInt
ivINT_UART2_ERR_No=52
ivINT_UART2_ERR_UserCount=0
ivINT_UART2_RX_TX=defaultInt
ivINT_UART2_RX_TX_No=51
ivINT_UART2_RX_TX_UserCount=0
ivINT_UART3_ERR=defaultInt
ivINT_UART3_ERR_No=54
ivINT_UART3_ERR_UserCount=0
ivINT_UART3_RX_TX=defaultInt
ivINT_UART3_RX_TX_No=53
ivINT_UART3_RX_TX_UserCount=0
ivINT_UART4_ERR=defaultInt
ivINT_UART4_ERR_No=83
ivINT_UART4_ERR_UserCount=0
ivINT_UART4_RX_TX=defaultInt
ivINT_UART4_RX_TX_No=82
ivINT_UART4_RX_TX_UserCount=0
ivINT_UART5_ERR=defaultInt
ivINT_UART5_ERR_No=85
ivINT_UART5_ERR_UserCount=0
ivINT_UART5_RX_TX=defaultInt
ivINT_UART5_RX_TX_No=84
ivINT_UART5_RX_TX_UserCount=0
ivINT_USB0=defaultInt
ivINT_USB0_No=69
ivINT_USB0_UserCount=0
ivINT_USBDCD=defaultInt
ivINT_USBDCD_No=70
ivINT_USBDCD_UserCount=0
ivINT_Usage_Fault=defaultInt
ivINT_Usage_Fault_No=6
ivINT_Usage_Fault_UserCount=0
ivINT_WDOG_EWM=defaultInt
ivINT_WDOG_EWM_No=38
ivINT_WDOG_EWM_UserCount=1
tmp=102
InterruptVectorAddrs=[0|4|8|12|16|20|24|28|32|36|40|44|48|52|56|60|64|68|72|76|80|84|88|92|96|100|104|108|112|116|120|124|128|132|136|140|144|148|152|156|160|164|168|172|176|180|184|188|192|196|200|204|208|212|216|220|224|228|232|236|240|244|248|252|256|260|264|268|272|276|280|284|288|292|296|300|304|308|312|316|320|324|328|332|336|340|344|348|352|356|360|364|368|372|376|380|384|388|392|396|400|404]
InterruptVectors=[ivINT_Initial_Stack_Pointer|ivINT_Initial_Program_Counter|ivINT_NMI|ivINT_Hard_Fault|ivINT_Mem_Manage_Fault|ivINT_Bus_Fault|ivINT_Usage_Fault|ivINT_Reserved7|ivINT_Reserved8|ivINT_Reserved9|ivINT_Reserved10|ivINT_SVCall|ivINT_DebugMonitor|ivINT_Reserved13|ivINT_PendableSrvReq|ivINT_SysTick|ivINT_DMA0|ivINT_DMA1|ivINT_DMA2|ivINT_DMA3|ivINT_DMA4|ivINT_DMA5|ivINT_DMA6|ivINT_DMA7|ivINT_DMA8|ivINT_DMA9|ivINT_DMA10|ivINT_DMA11|ivINT_DMA12|ivINT_DMA13|ivINT_DMA14|ivINT_DMA15|ivINT_DMA_Error|ivINT_MCM|ivINT_FTFE|ivINT_Read_Collision|ivINT_LVD_LVW|ivINT_LLWU|ivINT_WDOG_EWM|ivINT_RNG|ivINT_I2C0|ivINT_I2C1|ivINT_SPI0|ivINT_SPI1|ivINT_I2S0_Tx|ivINT_I2S0_Rx|ivINT_UART0_LON|ivINT_UART0_RX_TX|ivINT_UART0_ERR|ivINT_UART1_RX_TX|ivINT_UART1_ERR|ivINT_UART2_RX_TX|ivINT_UART2_ERR|ivINT_UART3_RX_TX|ivINT_UART3_ERR|ivINT_ADC0|ivINT_CMP0|ivINT_CMP1|ivINT_FTM0|ivINT_FTM1|ivINT_FTM2|ivINT_CMT|ivINT_RTC|ivINT_RTC_Seconds|ivINT_PIT0|ivINT_PIT1|ivINT_PIT2|ivINT_PIT3|ivINT_PDB0|ivINT_USB0|ivINT_USBDCD|ivINT_Reserved71|ivINT_DAC0|ivINT_MCG|ivINT_LPTMR0|ivINT_PORTA|ivINT_PORTB|ivINT_PORTC|ivINT_PORTD|ivINT_PORTE|ivINT_SWI|ivINT_SPI2|ivINT_UART4_RX_TX|ivINT_UART4_ERR|ivINT_UART5_RX_TX|ivINT_UART5_ERR|ivINT_CMP2|ivINT_FTM3|ivINT_Reserved88|ivINT_ADC1|ivINT_I2C2|ivINT_CAN0_ORed_Message_buffer|ivINT_CAN0_Bus_Off|ivINT_CAN0_Error|ivINT_CAN0_Tx_Warning|ivINT_CAN0_Rx_Warning|ivINT_CAN0_Wake_Up|ivINT_SDHC|ivINT_ENET_1588_Timer|ivINT_ENET_Transmit|ivINT_ENET_Receive|ivINT_ENET_Error]

 LOCAL SYMBOLS (alphabet order)
-------------------------------
ARMFamilyType=M4F
ARMLowestInterrutpPriority=15
ApplicationAllocatedHeap=no
BeanVersion=01.438
CHG_BeanIsEnabled=yes
CleanupResources=yes
ColdFireV1CPUSpecific=no
ColdFireV2CPUSpecific=no
CollectRuntimeStatisticsGroup=no
CompilerOptimizationLevel=0
ComponentRepositoryName=MyComponents
ComponentRepositoryPath=C:\Users\89247469\MyComponents
Custom_portBASE_TYPE=no
DeviceName=FRTOS1
DeviceType=FreeRTOS
DisabledInterruptsInStartup=yes
EnableGDBDebugHelper=no
EventModule=Events
FreeRTOSVersion=V8.2.2
GenerateOSAFunctions=no
GenerateRTOSPExMacros=no
IdleShouldYield=yes
Init=Init
Init_Hint=void FRTOS1_Init(void);
Init_HintHint=Low level initialization routine called from startup code. This method...
Init_HintHintLong=Low level initialization routine called from startup code. This method ensures that the tick timer is  not enabled.
IsClassicCW=no
KinetisCPUSpecific=yes
KinetisLibraryLowestInterruptPriority=15
KinetisLibraryMaxInterruptPriority=5
KinetisSDK=KSDK1
KinetisSDKGroup=yes
KinetisSDK_ComponentRepositoryName=MyComponents
KinetisSDK_ComponentUUID=KinetisSDK
KinetisSDK_Template=
LDDTickGroup=no
M4FFloatingPointSupport=yes
MaxCoroutinePriorities=2
MaxPriority=6
MemoryScheme=Scheme3
MinimalStackSize=200
ModuleName=FRTOS1
NonLDDSWIGroup=no
NonLDDTickGroup=no
NumThreadLocalStoragePointers=0
QueueRegistrySize=0
ShellEnabled=no
StackOverflowCheckingMethodNumber=1
StaticSourcesEnabled=no
TaskExitErrorHandler=no
TaskNameLength=12
TickRateHz=100
TicklessIdleModeEnabled=no
TimerTaskPriority=2
TimerTaskQueueLength=10
TimerTaskStackDepth=200
TimersEnabled=yes
TotalHeapSize=8192
Use16bitTicks=no
UseApplicationTaskTags=no
UseCoroutines=no
UseMutexes=yes
UsePreemption=yes
UseRecursiveMutexes=yes
UseTraceFacility=no
UseTraceHooksGroup=no
UserHeapSectionEnabled=no
Utility=UTIL1
Utility_ComponentRepositoryName=MyComponents
Utility_ComponentUUID=Utility
Utility_Template=
configASSERTdefined=yes
configCOMPILER=automatic
hasUserDeallocFun=no
hasUserEnterCriticalFun=no
hasUserExitCriticalFun=no
hasUserMallocFun=no
pcTimerGetTimerName=pcTimerGetTimerName
pcTimerGetTimerName_Hint=char* FRTOS1_pcTimerGetTimerName(TimerHandle_t xTimer);
pcTimerGetTimerName_HintHint=
pcTimerGetTimerName_HintHintLong=
pvPortMalloc=pvPortMalloc
pvPortMalloc_Hint=pVoid FRTOS1_pvPortMalloc(size_t xWantedSize);
pvPortMalloc_HintHint=Allocates a memory block using the port pvPortMalloc() function
pvPortMalloc_HintHintLong=Allocates a memory block using the port pvPortMalloc() function
pvTaskGetThreadLocalStoragePointer=pvTaskGetThreadLocalStoragePointer
pvTaskGetThreadLocalStoragePointer_Hint=void* FRTOS1_pvTaskGetThreadLocalStoragePointer(TaskHandle_t xTaskToQuery,...
pvTaskGetThreadLocalStoragePointer_HintHint=Sets the thread local storage. Only enabled if...
pvTaskGetThreadLocalStoragePointer_HintHintLong=Sets the thread local storage. Only enabled if configNUM_THREAD_LOCAL_STORAGE_POINTERS is >0
pvTimerGetTimerID=pvTimerGetTimerID
pvTimerGetTimerID_Hint=void* FRTOS1_pvTimerGetTimerID(TimerHandle_t xTimer);
pvTimerGetTimerID_HintHint=Returns the ID assigned to the timer.      IDs are assigned to timers using...
pvTimerGetTimerID_HintHintLong=Returns the ID assigned to the timer.      IDs are assigned to timers using the pvTimerID parameter of the call to xTimerCreate() that was used to create the timer.      If the same callback function is assigned to multiple timers then the timer ID can be used within the callback function to identify which timer actually expired.
runSpeedModeNum=1
taskDISABLE_INTERRUPTS=taskDISABLE_INTERRUPTS
taskDISABLE_INTERRUPTS_Hint=void FRTOS1_taskDISABLE_INTERRUPTS(void);
taskDISABLE_INTERRUPTS_HintHint=Macro to disable all maskable interrupts.
taskDISABLE_INTERRUPTS_HintHintLong=Macro to disable all maskable interrupts.
taskENABLE_INTERRUPTS=taskENABLE_INTERRUPTS
taskENABLE_INTERRUPTS_Hint=void FRTOS1_taskENABLE_INTERRUPTS(void);
taskENABLE_INTERRUPTS_HintHint=Macro to enable microcontroller interrupts.
taskENABLE_INTERRUPTS_HintHintLong=Macro to enable microcontroller interrupts.
taskENTER_CRITICAL=taskENTER_CRITICAL
taskENTER_CRITICAL_Hint=void FRTOS1_taskENTER_CRITICAL(void);
taskENTER_CRITICAL_HintHint=Macro to mark the start of a critical code region. Preemptive context...
taskENTER_CRITICAL_HintHintLong=Macro to mark the start of a critical code region. Preemptive context switches cannot occur when in a critical region.      NOTE: This may alter the stack (depending on the portable implementation) so must be used with care!
taskEXIT_CRITICAL=taskEXIT_CRITICAL
taskEXIT_CRITICAL_Hint=void FRTOS1_taskEXIT_CRITICAL(void);
taskEXIT_CRITICAL_HintHint=Macro to mark the end of a critical code region. Preemptive context switches...
taskEXIT_CRITICAL_HintHintLong=Macro to mark the end of a critical code region. Preemptive context switches cannot occur when in a critical region.      NOTE: This may alter the stack (depending on the portable implementation) so must be used with care!
taskYIELD=taskYIELD
taskYIELD_Hint=void FRTOS1_taskYIELD(void);
taskYIELD_HintHint=Macro for forcing a context switch.
taskYIELD_HintHintLong=Macro for forcing a context switch.
ulTaskNotifyTake=ulTaskNotifyTake
ulTaskNotifyTake_Hint=uint32_t FRTOS1_ulTaskNotifyTake(BaseType_t xClearCountOnExit, TickType_t...
ulTaskNotifyTake_HintHint=Each RTOS task has a 32-bit notification value which is initialised to zero...
ulTaskNotifyTake_HintHintLong=Each RTOS task has a 32-bit notification value which is initialised to zero when the RTOS task is created. An RTOS task notification is an event sent directly to a task that can unblock the receiving task, and optionally update the receiving task's notification value.      ulTaskNotifyTake() is intended for use when a task notification is used as a faster and lighter weight binary or counting semaphore alternative. FreeRTOS semaphores are taken using the xSemaphoreTake() API function, ulTaskNotifyTake() is the equivalent that instead uses a task notification.      When a task is using its notification value as a binary or counting semaphore other tasks and interrupts should send notifications to it using either the xTaskNotifyGive() macro, or the xTaskNotify() function with the function's eAction parameter set to eIncrement (the two are equivalent).      ulTaskNotifyTake() can either clear the task's notification value to zero on exit, in which case the notification value acts like a binary semaphore, or decrement the task's notification value on exit, in which case the notification value acts more like a counting semaphore.      An RTOS task can use ulTaskNotifyTake() to [optionally] block to wait for a the task's notification value to be non-zero. The task does not consume any CPU time while it is in the Blocked state.      Where as xTaskNotifyWait() will return when a notification is pending, ulTaskNotifyTake() will return when the task's notification value is not zero, decrementing the task's notification value before it returns.
useARMLowPowerTimer=no
useARMSysTickTimer=yes
useARMSysTickUseCoreClock=yes
useQueueSets=no
uxQueueMessagesWaiting=uxQueueMessagesWaiting
uxQueueMessagesWaiting_Hint=unsigned_portBASE_TYPE FRTOS1_uxQueueMessagesWaiting(xQueueHandle xQueue);
uxQueueMessagesWaiting_HintHint=Queries the number of items that are currently held within a queue.
uxQueueMessagesWaiting_HintHintLong=Queries the number of items that are currently held within a queue.
uxQueueMessagesWaitingfromISR=uxQueueMessagesWaitingfromISR
uxQueueMessagesWaitingfromISR_Hint=unsigned_portBASE_TYPE FRTOS1_uxQueueMessagesWaitingfromISR(xQueueHandle...
uxQueueMessagesWaitingfromISR_HintHint=A version of uxQueueMessagesWaiting() that can be used from inside an...
uxQueueMessagesWaitingfromISR_HintHintLong=A version of uxQueueMessagesWaiting() that can be used from inside an interrupt service routine.
uxTaskGetNumberOfTasks=uxTaskGetNumberOfTasks
uxTaskGetNumberOfTasks_Hint=unsigned_portBASE_TYPE FRTOS1_uxTaskGetNumberOfTasks(void);
uxTaskGetNumberOfTasks_HintHint=Returns the number of tasks
uxTaskGetNumberOfTasks_HintHintLong=Returns the number of tasks
uxTaskGetStackHighWaterMark=uxTaskGetStackHighWaterMark
uxTaskGetStackHighWaterMark_Hint=unsigned_portBASE_TYPE FRTOS1_uxTaskGetStackHighWaterMark(xTaskHandle xTask);
uxTaskGetStackHighWaterMark_HintHint=The stack used by a task will grow and shrink as the task executes and...
uxTaskGetStackHighWaterMark_HintHintLong=The stack used by a task will grow and shrink as the task executes and interrupts are processed. uxTaskGetStackHighWaterMark() returns the minimum amount of remaining stack space that was available to the task since the task started executing - that is the amount of stack that remained unused when the task stack was at its greatest (deepest) value. This is what is referred to as the stack 'high water mark'.
uxTaskPriorityGet=uxTaskPriorityGet
uxTaskPriorityGet_Hint=unsigned_portBASE_TYPE FRTOS1_uxTaskPriorityGet(xTaskHandle pxTask);
uxTaskPriorityGet_HintHint=Obtain the priority of any task.
uxTaskPriorityGet_HintHintLong=Obtain the priority of any task.
vApplicationIdleHook=FRTOS1_vApplicationIdleHook
vApplicationIdleHookModule=Events
vApplicationIdleHook_Hint=void FRTOS1_vApplicationIdleHook(void);
vApplicationMallocFailedHook=FRTOS1_vApplicationMallocFailedHook
vApplicationMallocFailedHookModule=Events
vApplicationMallocFailedHook_Hint=void FRTOS1_vApplicationMallocFailedHook(void);
vApplicationStackOverflowHook=FRTOS1_vApplicationStackOverflowHook
vApplicationStackOverflowHookModule=Events
vApplicationStackOverflowHook_Hint=void FRTOS1_vApplicationStackOverflowHook(xTaskHandle pxTask, char *pcTaskName);
vApplicationTickHook=FRTOS1_vApplicationTickHook
vApplicationTickHookModule=Events
vApplicationTickHook_Hint=void FRTOS1_vApplicationTickHook(void);
vPortFree=vPortFree
vPortFree_Hint=void FRTOS1_vPortFree(void *pv);
vPortFree_HintHint=Frees a memory block previously allocated with pvPortMalloc()
vPortFree_HintHintLong=Frees a memory block previously allocated with pvPortMalloc()
vQueueAddToRegistry=vQueueAddToRegistry
vQueueAddToRegistry_Hint=void FRTOS1_vQueueAddToRegistry(xQueueHandle xQueue, char *pcQueueName);
vQueueAddToRegistry_HintHint=Assigns a name to a queue and adds the queue to the registry.
vQueueAddToRegistry_HintHintLong=Assigns a name to a queue and adds the queue to the registry.
vQueueDelete=vQueueDelete
vQueueDelete_Hint=void FRTOS1_vQueueDelete(xQueueHandle pxQueueToDelete);
vQueueDelete_HintHint=Deletes a queue that was previously created using a call to xQueueCreate()....
vQueueDelete_HintHintLong=Deletes a queue that was previously created using a call to xQueueCreate(). vQueueDelete() can also be used to delete a semaphore.
vQueueUnregisterQueue=vQueueUnregisterQueue
vQueueUnregisterQueue_Hint=void FRTOS1_vQueueUnregisterQueue(xQueueHandle xQueue);
vQueueUnregisterQueue_HintHint=Removes a queue from the queue registry.
vQueueUnregisterQueue_HintHintLong=Removes a queue from the queue registry.
vSemaphoreCreateBinary=vSemaphoreCreateBinary
vSemaphoreCreateBinary_Hint=void FRTOS1_vSemaphoreCreateBinary(xSemaphoreHandle xSemaphore);
vSemaphoreCreateBinary_HintHint=Macro that creates a semaphore by using the existing queue mechanism. The...
vSemaphoreCreateBinary_HintHintLong=Macro that creates a semaphore by using the existing queue mechanism. The queue length is 1 as this is a binary semaphore. The data size is 0 as we don't want to actually store any data - we just want to know if the queue is empty or full.      Binary semaphores and mutexes are very similar but have some subtle differences: Mutexes include a priority inheritance mechanism, binary semaphores do not. This makes binary semaphores the better choice for implementing synchronisation (between tasks or between tasks and an interrupt), and mutexes the better choice for implementing simple mutual exclusion.      This old vSemaphoreCreateBinary() macro is now deprecated in favour of the xSemaphoreCreateBinary() function.  Note that binary semaphores created using the vSemaphoreCreateBinary() macro are created in a state such that the first call to 'take' the semaphore would pass, whereas binary semaphores created using xSemaphoreCreateBinary() are created in a state such that the the semaphore must first be 'given' before it can be 'taken'.      A binary semaphore need not be given back once obtained, so task synchronisation can be implemented by one task/interrupt continuously 'giving' the semaphore while another continuously 'takes' the semaphore. This is demonstrated by the sample code on the xSemaphoreGiveFromISR() documentation page.      The priority of a task that 'takes' a mutex can potentially be raised if another task of higher priority attempts to obtain the same mutex. The task that owns the mutex 'inherits' the priority of the task attempting to 'take' the same mutex. This means the mutex must always be 'given' back - otherwise the higher priority task will never be able to obtain the mutex, and the lower priority task will never 'disinherit' the priority. An example of a mutex being used to implement mutual exclusion is provided on the xSemaphoreTake() documentation page.      Both mutex and binary semaphores are assigned to variables of type xSemaphoreHandle and can be used in any API function that takes a parameter of this type.
vSemaphoreDelete=vSemaphoreDelete
vSemaphoreDelete_Hint=void FRTOS1_vSemaphoreDelete(xSemaphoreHandle xSemaphore);
vSemaphoreDelete_HintHint=Delete a semaphore.  This function must be used with care.  For example, do...
vSemaphoreDelete_HintHintLong=Delete a semaphore.  This function must be used with care.  For example, do not delete a mutex type semaphore if the mutex is held by a task.
vTaskDelay=vTaskDelay
vTaskDelayUntil=vTaskDelayUntil
vTaskDelayUntil_Hint=void FRTOS1_vTaskDelayUntil(portTickType *pxPreviousWakeTime, portTickType...
vTaskDelayUntil_HintHint=Delay a task until a specified time. This function can be used by cyclical...
vTaskDelayUntil_HintHintLong=Delay a task until a specified time. This function can be used by cyclical tasks to ensure a constant execution frequency.      This function differs from vTaskDelay() in one important aspect: vTaskDelay() specifies a time at which the task wishes to unblock relative to the time at which vTaskDelay() is called, whereas vTaskDelayUntil() specifies an absolute time at which the task wishes to unblock.      vTaskDelay() will cause a task to block for the specified number of ticks from the time vTaskDelay() is called. It is therefore difficult to use vTaskDelay() by itself to generate a fixed execution frequency as the time between a task unblocking following a call to vTaskDelay() and that task next calling vTaskDelay() may not be fixed [the task may take a different path though the code between calls, or may get interrupted or preempted a different number of times each time it executes].      Whereas vTaskDelay() specifies a wake time relative to the time at which the function is called, vTaskDelayUntil() specifies the absolute (exact) time at which it wishes to unblock.      It should be noted that vTaskDelayUntil() will return immediately (without blocking) if it is used to specify a wake time that is already in the past. Therefore a task using vTaskDelayUntil() to execute periodically will have to re-calculate its required wake time if the periodic execution is halted for any reason (for example, the task is temporarily placed into the Suspended state) causing the task to miss one or more periodic executions. This can be detected by checking the variable passed by reference as the pxPreviousWakeTime parameter against the current tick count. This is however not necessary under most usage scenarios.      The constant portTICK_RATE_MS can be used to calculate real time from the tick rate - with the resolution of one tick period.      This function must not be called while the scheduler has been suspended by a call to vTaskSuspendAll().
vTaskDelay_Hint=void FRTOS1_vTaskDelay(portTickType xTicksToDelay);
vTaskDelay_HintHint=Delay a task for a given number of ticks. The actual time that the task...
vTaskDelay_HintHintLong=Delay a task for a given number of ticks. The actual time that the task remains blocked depends on the tick rate. The constant portTICK_RATE_MS can be used to calculate real time from the tick rate - with the resolution of one tick period.      vTaskDelay() specifies a time at which the task wishes to unblock relative to the time at which vTaskDelay() is called. For example, specifying a block period of 100 ticks will cause the task to unblock 100 ticks after vTaskDelay() is called. vTaskDelay() does not therefore provide a good method of controlling the frequency of a cyclical task as the path taken through the code, as well as other task and interrupt activity, will effect the frequency at which vTaskDelay() gets called and therefore the time at which the task next executes. See vTaskDelayUntil() for an alternative API function designed to facilitate fixed frequency execution. It does this by specifying an absolute time (rather than a relative time) at which the calling task should unblock.
vTaskNotifyGiveFromISR=vTaskNotifyGiveFromISR
vTaskNotifyGiveFromISR_Hint=void FRTOS1_vTaskNotifyGiveFromISR(TaskHandle_t xTaskToNotify, BaseType_t...
vTaskNotifyGiveFromISR_HintHint=A version of xTaskNotifyGive() that can be called from an interrupt service...
vTaskNotifyGiveFromISR_HintHintLong=A version of xTaskNotifyGive() that can be called from an interrupt service routine (ISR).      Each RTOS task has a 32-bit notification value which is initialised to zero when the RTOS task is created. An RTOS task notification is an event sent directly to a task that can unblock the receiving task, and optionally update the receiving task's notification value.      vTaskNotifyGiveFromISR() is a function intended for use when an RTOS task notification value is being used as a light weight and faster binary or counting semaphore alternative. FreeRTOS semaphores are given from an interrupt using the xSemaphoreGiveFromISR() API function, vTaskNotifyGiveFromISR() is the equivalent that instead uses the receiving RTOS task's notification value.      When a task notification value is being used as a binary or counting semaphore equivalent then the task being notified should wait for the notification using the ulTaskNotifyTake() API function rather than the xTaskNotifyWait() API function.
vTaskPrioritySet=vTaskPrioritySet
vTaskPrioritySet_Hint=void FRTOS1_vTaskPrioritySet(xTaskHandle pxTask, unsigned_portBASE_TYPE...
vTaskPrioritySet_HintHint=Set the priority of any task.
vTaskPrioritySet_HintHintLong=Set the priority of any task.
vTaskResume=vTaskResume
vTaskResume_Hint=void FRTOS1_vTaskResume(xTaskHandle pxTaskToResume);
vTaskResume_HintHint=Resumes a suspended task. A task that has been suspended by one of more calls...
vTaskResume_HintHintLong=Resumes a suspended task. A task that has been suspended by one of more calls to vTaskSuspend() will be made available for running again by a single call to vTaskResume().
vTaskSetThreadLocalStoragePointer=vTaskSetThreadLocalStoragePointer
vTaskSetThreadLocalStoragePointer_Hint=void FRTOS1_vTaskSetThreadLocalStoragePointer(TaskHandle_t xTaskToSet,...
vTaskSetThreadLocalStoragePointer_HintHint=Only enabled if configNUM_THREAD_LOCAL_STORAGE_POINTERS is >0.
vTaskSetThreadLocalStoragePointer_HintHintLong=Only enabled if configNUM_THREAD_LOCAL_STORAGE_POINTERS is >0.
vTaskStartScheduler=vTaskStartScheduler
vTaskStartScheduler_Hint=void FRTOS1_vTaskStartScheduler(void);
vTaskStartScheduler_HintHint=Starts the real time kernel tick processing. After calling the kernel has...
vTaskStartScheduler_HintHintLong=Starts the real time kernel tick processing. After calling the kernel has control over which tasks are executed and when.   The idle task is created automatically when vTaskStartScheduler() is called.   If vTaskStartScheduler() is successful the function will not return until an executing task calls vTaskEndScheduler(). The function might fail and return immediately if there is insufficient RAM available for the idle task to be created.
vTaskSuspend=vTaskSuspend
vTaskSuspendAll=vTaskSuspendAll
vTaskSuspendAll_Hint=void FRTOS1_vTaskSuspendAll(void);
vTaskSuspendAll_HintHint=Suspends all real time kernel activity while keeping interrupts (including...
vTaskSuspendAll_HintHintLong=Suspends all real time kernel activity while keeping interrupts (including the kernel tick) enabled.   After calling vTaskSuspendAll () the calling task will continue to execute without risk of being swapped out until a call to xTaskResumeAll () has been made.   API functions that have the potential to cause a context switch (for example, vTaskDelayUntil(), xQueueSend(), etc.) must not be called while the scheduler is suspended.
vTaskSuspend_Hint=void FRTOS1_vTaskSuspend(xTaskHandle pxTaskToSuspend);
vTaskSuspend_HintHint=Suspend any task. When suspended a task will never get any microcontroller...
vTaskSuspend_HintHintLong=Suspend any task. When suspended a task will never get any microcontroller processing time, no matter what its priority. Calls to vTaskSuspend are not accumulative - i.e. calling vTaskSuspend() twice on the same task still only requires one call to vTaskResume() to ready the suspended task.
xEventGroupClearBits=xEventGroupClearBits
xEventGroupClearBitsFromISR=xEventGroupClearBitsFromISR
xEventGroupClearBitsFromISR_Hint=EventBits_t FRTOS1_xEventGroupClearBitsFromISR(EventGroupHandle_t...
xEventGroupClearBitsFromISR_HintHint=A version of xEventGroupClearBits() that can be called from an interrupt.
xEventGroupClearBitsFromISR_HintHintLong=A version of xEventGroupClearBits() that can be called from an interrupt.
xEventGroupClearBits_Hint=EventBits_t FRTOS1_xEventGroupClearBits(EventGroupHandle_t xEventGroup, const...
xEventGroupClearBits_HintHint=Clear bits (flags) within an RTOS event group. This function cannot be called...
xEventGroupClearBits_HintHintLong=Clear bits (flags) within an RTOS event group. This function cannot be called from an interrupt. See xEventGroupClearBitsFromISR() for a version that can be called from an interrupt.
xEventGroupCreate=xEventGroupCreate
xEventGroupCreate_Hint=EventGroupHandle_t FRTOS1_xEventGroupCreate(void);
xEventGroupCreate_HintHint=Create a new RTOS event group. This function cannot be called from an...
xEventGroupCreate_HintHintLong=Create a new RTOS event group. This function cannot be called from an interrupt.      Event groups are stored in variables of type EventGroupHandle_t. The number of bits (or flags) implemented within an event group is 8 if configUSE_16_BIT_TICKS is set to 1, or 24 if configUSE_16_BIT_TICKS is set to 0. The dependency on configUSE_16_BIT_TICKS results from the data type used for thread local storage in the internal implementation of RTOS tasks.
xEventGroupGetBits=xEventGroupGetBits
xEventGroupGetBitsFromISR=xEventGroupGetBitsFromISR
xEventGroupGetBitsFromISR_Hint=EventBits_t FRTOS1_xEventGroupGetBitsFromISR(EventGroupHandle_t xEventGroup);
xEventGroupGetBitsFromISR_HintHint=A version of xEventGroupGetBits() that can be called from an interrupt.
xEventGroupGetBitsFromISR_HintHintLong=A version of xEventGroupGetBits() that can be called from an interrupt.
xEventGroupGetBits_Hint=EventBits_t FRTOS1_xEventGroupGetBits(EventGroupHandle_t xEventGroup);
xEventGroupGetBits_HintHint=Returns the current value of the event bits (event flags) in an RTOS event...
xEventGroupGetBits_HintHintLong=Returns the current value of the event bits (event flags) in an RTOS event group. This function cannot be used from an interrupt. See xEventGroupsGetBitsFromISR() for a version that can be used in an interrupt.
xEventGroupSetBits=xEventGroupSetBits
xEventGroupSetBitsFromISR=xEventGroupSetBitsFromISR
xEventGroupSetBitsFromISR_Hint=EventBits_t FRTOS1_xEventGroupSetBitsFromISR(EventGroupHandle_t xEventGroup,...
xEventGroupSetBitsFromISR_HintHint=Set bits (flags) within an RTOS event group. A version of...
xEventGroupSetBitsFromISR_HintHintLong=Set bits (flags) within an RTOS event group. A version of xEventGroupSetBits() that can be called from an interrupt service routine (ISR).      Setting bits in an event group will automatically unblock tasks that are blocked waiting for the bits.      Setting bits in an event group is not a deterministic operation because there are an unknown number of tasks that may be waiting for the bit or bits being set. FreeRTOS does not allow non-deterministic operations to be performed in interrupts or from critical sections. Therefore xEventGroupSetBitFromISR() sends a message to the RTOS daemon task to have the set operation performed in the context of the daemon task - where a scheduler lock is used in place of a critical section.      INCLUDE_xEventGroupSetBitFromISR, configUSE_TIMERS and INCLUDE_xTimerPendFunctionCall must all be set to 1 in FreeRTOSConfig.h for the xEventGroupSetBitsFromISR() function to be available.
xEventGroupSetBits_Hint=EventBits_t FRTOS1_xEventGroupSetBits(EventGroupHandle_t xEventGroup, const...
xEventGroupSetBits_HintHint=Set bits (flags) within an RTOS event group. This function cannot be called...
xEventGroupSetBits_HintHintLong=Set bits (flags) within an RTOS event group. This function cannot be called from an interrupt. xEventGroupSetBitsFromISR() is a version that can be called from an interrupt.      Setting bits in an event group will automatically unblock tasks that are blocked waiting for the bits.
xEventGroupSync=xEventGroupSync
xEventGroupSync_Hint=EventBits_t FRTOS1_xEventGroupSync(EventGroupHandle_t xEventGroup, const...
xEventGroupSync_HintHint=Atomically set bits (flags) within an RTOS event group, then wait for a...
xEventGroupSync_HintHintLong=Atomically set bits (flags) within an RTOS event group, then wait for a combination of bits to be set within the same event group. This functionality is typically used to synchronise multiple tasks (often called a task rendezvous), where each task has to wait for the other tasks to reach a synchronisation point before proceeding.      This function cannot be used from an interrupt.      The function will return before its block time expires if the bits specified by the uxBitsToWait parameter are set, or become set within that time. In this case all the bits specified by uxBitsToWait will be automatically cleared before the function returns.
xEventGroupWaitBits=xEventGroupWaitBits
xEventGroupWaitBits_Hint=byte FRTOS1_xEventGroupWaitBits(const EventGroupHandle_t xEventGroup, const...
xEventGroupWaitBits_HintHint=Read bits within an RTOS event group, optionally entering the Blocked state...
xEventGroupWaitBits_HintHintLong=Read bits within an RTOS event group, optionally entering the Blocked state (with a timeout) to wait for a bit or group of bits to become set. This function cannot be called from an interrupt.
xPortGetFreeHeapSize=xPortGetFreeHeapSize
xPortGetFreeHeapSize_Hint=Tsize_t FRTOS1_xPortGetFreeHeapSize(void);
xPortGetFreeHeapSize_HintHint=Returns the actual free size of the heap
xPortGetFreeHeapSize_HintHintLong=Returns the actual free size of the heap
xQueueCreate=xQueueCreate
xQueueCreate_Hint=xQueueHandle FRTOS1_xQueueCreate(unsigned_portBASE_TYPE uxQueueLength,...
xQueueCreate_HintHint=Creates a queue.
xQueueCreate_HintHintLong=Creates a queue.
xQueueIsQueueEmptyFromISR=xQueueIsQueueEmptyFromISR
xQueueIsQueueEmptyFromISR_Hint=portBASE_TYPE FRTOS1_xQueueIsQueueEmptyFromISR(xQueueHandle xQueue);
xQueueIsQueueEmptyFromISR_HintHint=Queries a queue to determine if the queue is empty. This function should only...
xQueueIsQueueEmptyFromISR_HintHintLong=Queries a queue to determine if the queue is empty. This function should only be used in an ISR.
xQueueIsQueueFullFromISR=xQueueIsQueueFullFromISR
xQueueIsQueueFullFromISR_Hint=portBASE_TYPE FRTOS1_xQueueIsQueueFullFromISR(xQueueHandle xQueue);
xQueueIsQueueFullFromISR_HintHint=Queries a queue to determine if the queue is full. This function should only...
xQueueIsQueueFullFromISR_HintHintLong=Queries a queue to determine if the queue is full. This function should only be used in an ISR.
xQueueOverwrite=xQueueOverwrite
xQueueOverwriteFromISR=xQueueOverwriteFromISR
xQueueOverwriteFromISR_Hint=portBASE_TYPE FRTOS1_xQueueOverwriteFromISR(xQueueHandle xQueue, const void...
xQueueOverwriteFromISR_HintHint=This is a macro that calls the xQueueGenericSendFromISR() function. A version...
xQueueOverwriteFromISR_HintHintLong=This is a macro that calls the xQueueGenericSendFromISR() function. A version of xQueueOverwrite() that can be used in an ISR. xQueueOverwriteFromISR() is similar to xQueueSendToBackFromISR(), but will write to the queue even if the queue is full, overwriting data that is already held in the queue. xQueueOverwriteFromISR() is intended for use with queues that have a length of one, meaning the queue is either empty or full.
xQueueOverwrite_Hint=portBASE_TYPE FRTOS1_xQueueOverwrite(xQueueHandle xQueue, const void...
xQueueOverwrite_HintHint=This is a macro that calls the xQueueGenericSend() function. A version of...
xQueueOverwrite_HintHintLong=This is a macro that calls the xQueueGenericSend() function. A version of xQueueSendToBack() that will write to the queue even if the queue is full, overwriting data that is already held in the queue. xQueueOverwrite() is intended for use with queues that have a length of one, meaning the queue is either empty or full. This function must not be called from an interrupt service routine (ISR). See xQueueOverwriteFromISR() for an alternative which may be used in an ISR.
xQueuePeek=xQueuePeek
xQueuePeekFromISR=xQueuePeekFromISR
xQueuePeekFromISR_Hint=portBASE_TYPE FRTOS1_xQueuePeekFromISR(xQueueHandle xQueue, void *pvBuffer,...
xQueuePeekFromISR_HintHint=A version of xQueuePeek() that can be used from an interrupt service routine...
xQueuePeekFromISR_HintHintLong=A version of xQueuePeek() that can be used from an interrupt service routine (ISR). Reads an item from a queue, but does not remove the item from the queue. Therefore the same item would be returned the next time xQueueReceive() or xQueuePeek() was called on the same queue.
xQueuePeek_Hint=portBASE_TYPE FRTOS1_xQueuePeek(xQueueHandle xQueue, void *pvBuffer,...
xQueuePeek_HintHint=Reads an item from a queue, but does not remove the item from the queue....
xQueuePeek_HintHintLong=Reads an item from a queue, but does not remove the item from the queue. Therefore the same item would be returned the next time xQueueReceive() or xQueuePeek() was called on the same queue.
xQueueReceive=xQueueReceive
xQueueReceiveFromISR=xQueueReceiveFromISR
xQueueReceiveFromISR_Hint=portBASE_TYPE FRTOS1_xQueueReceiveFromISR(xQueueHandle xQueue, void...
xQueueReceiveFromISR_HintHint=A version of xQueueReceive() that can be called from an ISR. Unlike...
xQueueReceiveFromISR_HintHintLong=A version of xQueueReceive() that can be called from an ISR. Unlike xQueueReceive(), xQueueReceiveFromISR() does not permit a block time to be specified.
xQueueReceive_Hint=portBASE_TYPE FRTOS1_xQueueReceive(xQueueHandle xQueue, void *pvBuffer,...
xQueueReceive_HintHint=Receives an item from a queue.
xQueueReceive_HintHintLong=Receives an item from a queue.
xQueueReset=xQueueReset
xQueueReset_Hint=portBASE_TYPE FRTOS1_xQueueReset(xQueueHandle xQueue);
xQueueReset_HintHint=Reset a queue back to its original empty state.  pdPASS is returned if the...
xQueueReset_HintHintLong=Reset a queue back to its original empty state.  pdPASS is returned if the queue is successfully reset.  pdFAIL is returned if the queue could not be reset because there are tasks blocked on the queue waiting to either receive from the queue or send to the queue.
xQueueSendToBack=xQueueSendToBack
xQueueSendToBackFromISR=xQueueSendToBackFromISR
xQueueSendToBackFromISR_Hint=portBASE_TYPE FRTOS1_xQueueSendToBackFromISR(xQueueHandle xQueue, const void...
xQueueSendToBackFromISR_HintHint=Versions of xQueueSendToBack() API functions that can be called from an ISR....
xQueueSendToBackFromISR_HintHintLong=Versions of xQueueSendToBack() API functions that can be called from an ISR. Unlike xQueueSendToBack() these functions do not permit a block time to be specified.
xQueueSendToBack_Hint=portBASE_TYPE FRTOS1_xQueueSendToBack(xQueueHandle xQueue, const void...
xQueueSendToBack_HintHint=Sends an item to the back of a queue.
xQueueSendToBack_HintHintLong=Sends an item to the back of a queue.
xQueueSendToFront=xQueueSendToFront
xQueueSendToFrontFromISR=xQueueSendToFrontFromISR
xQueueSendToFrontFromISR_Hint=portBASE_TYPE FRTOS1_xQueueSendToFrontFromISR(xQueueHandle xQueue, const void...
xQueueSendToFrontFromISR_HintHint=Versions of xQueueSendToFront() API functions that can be called from an ISR....
xQueueSendToFrontFromISR_HintHintLong=Versions of xQueueSendToFront() API functions that can be called from an ISR. Unlike xQueueSendToFront() these functions do not permit a block time to be specified.
xQueueSendToFront_Hint=portBASE_TYPE FRTOS1_xQueueSendToFront(xQueueHandle xQueue, const void...
xQueueSendToFront_HintHint=Sends an item to the front of a queue.
xQueueSendToFront_HintHintLong=Sends an item to the front of a queue.
xSemaphoreCreateBinary=xSemaphoreCreateBinary
xSemaphoreCreateBinary_Hint=SemaphoreHandle_t FRTOS1_xSemaphoreCreateBinary(void);
xSemaphoreCreateBinary_HintHint=The old vSemaphoreCreateBinary() macro is now deprecated in favour of this...
xSemaphoreCreateBinary_HintHintLong=The old vSemaphoreCreateBinary() macro is now deprecated in favour of this xSemaphoreCreateBinary() function.  Note that binary semaphores created using the vSemaphoreCreateBinary() macro are created in a state such that the first call to 'take' the semaphore would pass, whereas binary semaphores created using xSemaphoreCreateBinary() are created in a state such that the the semaphore must first be 'given' before it can be 'taken'.      Function that creates a semaphore by using the existing queue mechanism. The queue length is 1 as this is a binary semaphore.  The data size is 0 as nothing is actually stored - all that is important is whether the queue is empty or full (the binary semaphore is available or not).      This type of semaphore can be used for pure synchronisation between tasks or between an interrupt and a task.  The semaphore need not be given back once obtained, so one task/interrupt can continuously 'give' the semaphore while another continuously 'takes' the semaphore.  For this reason this type of semaphore does not use a priority inheritance mechanism.  For an alternative that does use priority inheritance see xSemaphoreCreateMutex().
xSemaphoreCreateCounting=xSemaphoreCreateCounting
xSemaphoreCreateCounting_Hint=xSemaphoreHandle FRTOS1_xSemaphoreCreateCounting(unsigned_portBASE_TYPE...
xSemaphoreCreateCounting_HintHint=Macro that creates a counting semaphore by using the existing queue...
xSemaphoreCreateCounting_HintHintLong=Macro that creates a counting semaphore by using the existing queue mechanism.      Counting semaphores are typically used for two things:      1. Counting events.   In this usage scenario an event handler will 'give' a semaphore each time an event occurs (incrementing the semaphore count value), and a handler task will 'take' a semaphore each time it processes an event (decrementing the semaphore count value). The count value is therefore the difference between the number of events that have occurred and the number that have been processed. In this case it is desirable for the initial count value to be zero.      2. Resource management.   In this usage scenario the count value indicates the number of resources available. To obtain control of a resource a task must first obtain a semaphore - decrementing the semaphore count value. When the count value reaches zero there are no free resources. When a task finishes with the resource it 'gives' the semaphore back - incrementing the semaphore count value. In this case it is desirable for the initial count value to be equal to the maximum count value, indicating that all resources are free.
xSemaphoreCreateMutex=xSemaphoreCreateMutex
xSemaphoreCreateMutex_Hint=xSemaphoreHandle FRTOS1_xSemaphoreCreateMutex(void);
xSemaphoreCreateMutex_HintHint=Macro that creates a mutex semaphore by using the existing queue mechanism.  ...
xSemaphoreCreateMutex_HintHintLong=Macro that creates a mutex semaphore by using the existing queue mechanism.      Mutexes created using this macro can be accessed using the xSemaphoreTake() and xSemaphoreGive() macros. The xSemaphoreTakeRecursive() and xSemaphoreGiveRecursive() macros should not be used.      Mutexes and binary semaphores are very similar but have some subtle differences: Mutexes include a priority inheritance mechanism, binary semaphores do not. This makes binary semaphores the better choice for implementing synchronisation (between tasks or between tasks and an interrupt), and mutexes the better choice for implementing simple mutual exclusion.      The priority of a task that 'takes' a mutex can potentially be raised if another task of higher priority attempts to obtain the same mutex. The task that owns the mutex 'inherits' the priority of the task attempting to 'take' the same mutex. This means the mutex must always be 'given' back - otherwise the higher priority task will never be able to obtain the mutex, and the lower priority task will never 'disinherit' the priority. An example of a mutex being used to implement mutual exclusion is provided on the xSemaphoreTake() documentation page.      A binary semaphore need not be given back once obtained, so task synchronisation can be implemented by one task/interrupt continuously 'giving' the semaphore while another continuously 'takes' the semaphore. This is demonstrated by the sample code on the xSemaphoreGiveFromISR() documentation page.      Both mutex and binary semaphores are assigned to variables of type xSemaphoreHandle and can be used in any API function that takes a parameter of this type.
xSemaphoreCreateRecursiveMutex=xSemaphoreCreateRecursiveMutex
xSemaphoreCreateRecursiveMutex_Hint=xSemaphoreHandle FRTOS1_xSemaphoreCreateRecursiveMutex(void);
xSemaphoreCreateRecursiveMutex_HintHint=Macro that implements a recursive mutex by using the existing queue...
xSemaphoreCreateRecursiveMutex_HintHintLong=Macro that implements a recursive mutex by using the existing queue mechanism.   Mutexes created using this macro can be accessed using the xSemaphoreTakeRecursive() and xSemaphoreGiveRecursive() macros.  The  xSemaphoreTake() and xSemaphoreGive() macros should not be used.   A mutex used recursively can be 'taken' repeatedly by the owner. The mutex doesn't become available again until the owner has called xSemaphoreGiveRecursive() for each successful 'take' request.  For example, if a task successfully 'takes' the same mutex 5 times then the mutex will not be available to any other task until it has also  'given' the mutex back exactly five times.   This type of semaphore uses a priority inheritance mechanism so a task 'taking' a semaphore MUST ALWAYS 'give' the semaphore back once the semaphore it is no longer required. Mutex type semaphores cannot be used from within interrupt service routines.   See vSemaphoreCreateBinary() for an alternative implementation that can be used for pure synchronisation (where one task or interrupt always 'gives' the semaphore and another always 'takes' the semaphore) and from within interrupt service routines.
xSemaphoreGetMutexHolder=xSemaphoreGetMutexHolder
xSemaphoreGetMutexHolder_Hint=void* FRTOS1_xSemaphoreGetMutexHolder(xSemaphoreHandle xSemaphore);
xSemaphoreGetMutexHolder_HintHint=Returns the holder of a mutex or semaphore. If xMutex is indeed a mutex type...
xSemaphoreGetMutexHolder_HintHintLong=Returns the holder of a mutex or semaphore. If xMutex is indeed a mutex type semaphore, return the current mutex holder. If xMutex is not a mutex type semaphore, or the mutex is available (not held by a task), return NULL. Note: This Is is a good way of determining if the calling task is the mutex holder, but not a good way of determining the identity of the mutex holder as the holder may change between the function exiting and the returned value being tested.
xSemaphoreGive=xSemaphoreGive
xSemaphoreGiveFromISR=xSemaphoreGiveFromISR
xSemaphoreGiveFromISR_Hint=bool FRTOS1_xSemaphoreGiveFromISR(xSemaphoreHandle xSemaphore,...
xSemaphoreGiveFromISR_HintHint=Macro to release a semaphore. The semaphore must have previously been created...
xSemaphoreGiveFromISR_HintHintLong=Macro to release a semaphore. The semaphore must have previously been created with a call to vSemaphoreCreateBinary() or xSemaphoreCreateCounting().      Mutex type semaphores (those created using a call to xSemaphoreCreateMutex()) must not be used with this macro.      This macro can be used from an ISR.
xSemaphoreGiveRecursive=xSemaphoreGiveRecursive
xSemaphoreGiveRecursive_Hint=bool FRTOS1_xSemaphoreGiveRecursive(xSemaphoreHandle xMutex);
xSemaphoreGiveRecursive_HintHint=Macro to recursively release, or 'give', a mutex type semaphore. The mutex...
xSemaphoreGiveRecursive_HintHintLong=Macro to recursively release, or 'give', a mutex type semaphore. The mutex must have previously been created using a call to xSemaphoreCreateRecursiveMutex();   This macro must not be used on mutexes created using xSemaphoreCreateMutex(). A mutex used recursively can be 'taken' repeatedly by the owner. The mutex doesn't become available again until the owner has called xSemaphoreGiveRecursive() for each successful 'take' request.  For example, if a task successfully 'takes' the same mutex 5 times then the mutex will not be available to any other task until it has also  'given' the mutex back exactly five times.
xSemaphoreGive_Hint=bool FRTOS1_xSemaphoreGive(xSemaphoreHandle xMutex);
xSemaphoreGive_HintHint=Macro to release a semaphore. The semaphore must have previously been created...
xSemaphoreGive_HintHintLong=Macro to release a semaphore. The semaphore must have previously been created with a call to vSemaphoreCreateBinary(), xSemaphoreCreateMutex() or xSemaphoreCreateCounting(), and obtained using sSemaphoreTake().      This must not be used from an ISR. See xSemaphoreGiveFromISR() for an alternative which can be used from an ISR.      This macro must also not be used on semaphores created using xSemaphoreCreateRecursiveMutex().      xSemaphoreGive() is part of the fully featured intertask communications API. xSemaphoreAltGive() is the alternative API equivalent. Both versions require the same parameters and return the same values.
xSemaphoreTake=xSemaphoreTake
xSemaphoreTakeFromISR=xSemaphoreTakeFromISR
xSemaphoreTakeFromISR_Hint=bool FRTOS1_xSemaphoreTakeFromISR(xSemaphoreHandle xSemaphore,...
xSemaphoreTakeFromISR_HintHint=Macro to take a semaphore from an ISR. The semaphore must have previously...
xSemaphoreTakeFromISR_HintHintLong=Macro to take a semaphore from an ISR. The semaphore must have previously been created with a call to vSemaphoreCreateBinary() or xSemaphoreCreateCounting().      Mutex type semaphores (those created using a call to xSemaphoreCreateMutex()) must not be used with this macro.      This macro can be used from an ISR, however taking a semaphore from an ISR is not a common operation.  It is likely to only be useful when taking a counting semaphore when an interrupt is obtaining an object from a resource pool (when the semaphore count indicates the number of resources available).
xSemaphoreTakeRecursive=xSemaphoreTakeRecursive
xSemaphoreTakeRecursive_Hint=bool FRTOS1_xSemaphoreTakeRecursive(xSemaphoreHandle xMutex, portTickType...
xSemaphoreTakeRecursive_HintHint=Macro to recursively obtain, or 'take', a mutex type semaphore. The mutex...
xSemaphoreTakeRecursive_HintHintLong=Macro to recursively obtain, or 'take', a mutex type semaphore. The mutex must have previously been created using a call to xSemaphoreCreateRecursiveMutex();   This macro must not be used on mutexes created using xSemaphoreCreateMutex(). A mutex used recursively can be 'taken' repeatedly by the owner. The mutex doesn't become available again until the owner has called xSemaphoreGiveRecursive() for each successful 'take' request.  For example, if a task successfully 'takes' the same mutex 5 times then the mutex will not be available to any other task until it has also  'given' the mutex back exactly five times.
xSemaphoreTake_Hint=bool FRTOS1_xSemaphoreTake(xSemaphoreHandle xMutex, portTickType xBlockTime);
xSemaphoreTake_HintHint=Macro to obtain a semaphore. The semaphore must have previously been created...
xSemaphoreTake_HintHintLong=Macro to obtain a semaphore. The semaphore must have previously been created with a call to vSemaphoreCreateBinary(), xSemaphoreCreateMutex() or xSemaphoreCreateCounting().      This macro must not be called from an ISR. xQueueReceiveFromISR() can be used to take a semaphore from within an interrupt if required, although this would not be a normal operation. Semaphores use queues as their underlying mechanism, so functions are to some extent interoperable.      xSemaphoreTake() is part of the fully featured intertask communications API. xSemaphoreAltTake() is the alternative API equivalent. Both versions require the same parameters and return the same values.
xTaskCreate=xTaskCreate
xTaskCreate_Hint=portBASE_TYPE FRTOS1_xTaskCreate(pdTASK_CODE pvTaskCode, const portCHAR *...
xTaskCreate_HintHint=Create a new task and add it to the list of tasks that are ready to run.
xTaskCreate_HintHintLong=Create a new task and add it to the list of tasks that are ready to run.
xTaskGetSchedulerState=xTaskGetSchedulerState
xTaskGetSchedulerState_Hint=portBASE_TYPE FRTOS1_xTaskGetSchedulerState(void);
xTaskGetSchedulerState_HintHint=Returns the state of the scheduler
xTaskGetSchedulerState_HintHintLong=Returns the state of the scheduler
xTaskGetTickCount=xTaskGetTickCount
xTaskGetTickCountFromISR=xTaskGetTickCountFromISR
xTaskGetTickCountFromISR_Hint=portTickType FRTOS1_xTaskGetTickCountFromISR(void);
xTaskGetTickCountFromISR_HintHint=A version of xTaskGetTickCount() that can be called from an ISR.
xTaskGetTickCountFromISR_HintHintLong=A version of xTaskGetTickCount() that can be called from an ISR.
xTaskGetTickCount_Hint=portTickType FRTOS1_xTaskGetTickCount(void);
xTaskGetTickCount_HintHint=Return the count of ticks since vTaskStartScheduler was called.
xTaskGetTickCount_HintHintLong=Return the count of ticks since vTaskStartScheduler was called.
xTaskNotify=xTaskNotify
xTaskNotifyAndQuery=xTaskNotifyAndQuery
xTaskNotifyAndQueryFromISR=xTaskNotifyAndQueryFromISR
xTaskNotifyAndQueryFromISR_Hint=BaseType_t FRTOS1_xTaskNotifyAndQueryFromISR(TaskHandle_t xTaskToNotify,...
xTaskNotifyAndQueryFromISR_HintHint=[If you are using RTOS task notifications to implement binary or counting...
xTaskNotifyAndQueryFromISR_HintHintLong=[If you are using RTOS task notifications to implement binary or counting semaphore type behaviour then use the simpler xTaskNotifyGive() API function instead of xTaskNotify()]      Each RTOS task has a 32-bit notification value which is initialised to zero when the RTOS task is created. xTaskNotify() is used to send an event directly to and potentially unblock an RTOS task, and optionally update the receiving task's notification value in one of the following ways:          - Write a 32-bit number to the notification value       - Add one (increment) the notification value       - Set one or more bits in the notification value       - Leave the notification value unchanged      This function must not be called from an interrupt service routine (ISR). Use xTaskNotifyFromISR() instead.
xTaskNotifyAndQuery_Hint=BaseType_t FRTOS1_xTaskNotifyAndQuery(TaskHandle_t xTaskToNotify, uint32_t...
xTaskNotifyAndQuery_HintHint=[If you are using RTOS task notifications to implement binary or counting...
xTaskNotifyAndQuery_HintHintLong=[If you are using RTOS task notifications to implement binary or counting semaphore type behaviour then use the simpler xTaskNotifyGive() API function instead of xTaskNotify()]      Each RTOS task has a 32-bit notification value which is initialised to zero when the RTOS task is created. xTaskNotify() is used to send an event directly to and potentially unblock an RTOS task, and optionally update the receiving task's notification value in one of the following ways:          - Write a 32-bit number to the notification value       - Add one (increment) the notification value       - Set one or more bits in the notification value       - Leave the notification value unchanged      This function must not be called from an interrupt service routine (ISR). Use xTaskNotifyFromISR() instead.
xTaskNotifyFromISR=xTaskNotifyFromISR
xTaskNotifyFromISR_Hint=BaseType_t FRTOS1_xTaskNotifyFromISR(TaskHandle_t xTaskToNotify, uint32_t...
xTaskNotifyFromISR_HintHint=[If you are using RTOS task notifications to implement binary or counting...
xTaskNotifyFromISR_HintHintLong=[If you are using RTOS task notifications to implement binary or counting semaphore type behaviour then use the simpler xTaskNotifyGive() API function instead of xTaskNotify()]      A version of xTaskNotify() that can be called from an ISR.       Each RTOS task has a 32-bit notification value which is initialised to zero when the RTOS task is created. xTaskNotify() is used to send an event directly to and potentially unblock an RTOS task, and optionally update the receiving task's notification value in one of the following ways:          - Write a 32-bit number to the notification value       - Add one (increment) the notification value       - Set one or more bits in the notification value       - Leave the notification value unchanged      This function must not be called from an interrupt service routine (ISR). Use xTaskNotifyFromISR() instead.
xTaskNotifyGive=xTaskNotifyGive
xTaskNotifyGive_Hint=BaseType_t FRTOS1_xTaskNotifyGive(TaskHandle_t xTaskToNotify);
xTaskNotifyGive_HintHint=Each RTOS task has a 32-bit notification value which is initialised to zero...
xTaskNotifyGive_HintHintLong=Each RTOS task has a 32-bit notification value which is initialised to zero when the RTOS task is created. An RTOS task notification is an event sent directly to a task that can unblock the receiving task, and optionally update the receiving task's notification value.      xTaskNotifyGive() is a macro intended for use when an RTOS task notification value is being used as a light weight and faster binary or counting semaphore alternative. FreeRTOS semaphores are given using the xSemaphoreGive() API function, xTaskNotifyGive() is the equivalent that instead uses the receiving RTOS task's notification value.      When a task notification value is being used as a binary or counting semaphore equivalent then the task being notified should wait for the notification using the ulTaskNotifyTake() API function rather than the xTaskNotifyWait() API function.      xTaskNotifyGive() must not be called from an interrupt service routine. Use vTaskNotifyGiveFromISR() instead.
xTaskNotifyWait=xTaskNotifyWait
xTaskNotifyWait_Hint=BaseType_t FRTOS1_xTaskNotifyWait(uint32_t ulBitsToClearOnEntry, uint32_t...
xTaskNotifyWait_HintHint=[If you are using RTOS task notifications to implement binary or counting...
xTaskNotifyWait_HintHintLong=[If you are using RTOS task notifications to implement binary or counting semaphore type behaviour then use the simpler ulTaskNotifyTake() API function instead of xTaskNotifyWait()]      Each RTOS task has a 32-bit notification value which is initialised to zero when the RTOS task is created. An RTOS task notification is an event sent directly to a task that can unblock the receiving task, and optionally update the receiving task's notification value in a number of different ways. For example, a notification may overwrite the receiving task's notification value, or just set one or more bits in the receiving task's notification value. See the RTOS task notifications use case documentation for examples.      xTaskNotifyWait() waits, with an optional timeout, for the calling task to receive a notification.      If the receiving RTOS task was already Blocked waiting for a notification when one arrives the receiving RTOS task will be removed from the Blocked state and the notification cleared.
xTaskNotify_Hint=BaseType_t FRTOS1_xTaskNotify(TaskHandle_t xTaskToNotify, uint32_t ulValue,...
xTaskNotify_HintHint=[If you are using RTOS task notifications to implement binary or counting...
xTaskNotify_HintHintLong=[If you are using RTOS task notifications to implement binary or counting semaphore type behaviour then use the simpler xTaskNotifyGive() API function instead of xTaskNotify()]      Each RTOS task has a 32-bit notification value which is initialised to zero when the RTOS task is created. xTaskNotify() is used to send an event directly to and potentially unblock an RTOS task, and optionally update the receiving task's notification value in one of the following ways:          - Write a 32-bit number to the notification value       - Add one (increment) the notification value       - Set one or more bits in the notification value       - Leave the notification value unchanged      This function must not be called from an interrupt service routine (ISR). Use xTaskNotifyFromISR() instead.
xTaskResumeAll=xTaskResumeAll
xTaskResumeAll_Hint=portBASE_TYPE FRTOS1_xTaskResumeAll(void);
xTaskResumeAll_HintHint=Resumes real time kernel activity following a call to vTaskSuspendAll ()....
xTaskResumeAll_HintHintLong=Resumes real time kernel activity following a call to vTaskSuspendAll (). After a call to xTaskSuspendAll () the kernel will take control of which task is executing at any time.
xTaskResumeFromISR=xTaskResumeFromISR
xTaskResumeFromISR_Hint=portBASE_TYPE FRTOS1_xTaskResumeFromISR(xTaskHandle pxTaskToResume);
xTaskResumeFromISR_HintHint=An implementation of vTaskResume() that can be called from within an ISR. A...
xTaskResumeFromISR_HintHintLong=An implementation of vTaskResume() that can be called from within an ISR. A task that has been suspended by one of more calls to vTaskSuspend() will be made available for running again by a single call to xTaskResumeFromISR().
xTimerChangePeriod=xTimerChangePeriod
xTimerChangePeriodFromISR=xTimerChangePeriodFromISR
xTimerChangePeriodFromISR_Hint=BaseType_t FRTOS1_xTimerChangePeriodFromISR(TimerHandle_t xTimer, TickType_t...
xTimerChangePeriodFromISR_HintHint=A version of xTimerChangePeriod() that can be called from an interrupt...
xTimerChangePeriodFromISR_HintHintLong=A version of xTimerChangePeriod() that can be called from an interrupt service routine.
xTimerChangePeriod_Hint=BaseType_t FRTOS1_xTimerChangePeriod(TimerHandle_t xTimer, TickType_t...
xTimerChangePeriod_HintHint=Timer functionality is provided by a timer service/daemon task. Many of the...
xTimerChangePeriod_HintHintLong=Timer functionality is provided by a timer service/daemon task. Many of the public FreeRTOS timer API functions send commands to the timer service task through a queue called the timer command queue. The timer command queue is private to the RTOS kernel itself and is not directly accessible to application code. The length of the timer command queue is set by the configTIMER_QUEUE_LENGTH configuration constant.      xTimerChangePeriod() changes the period of a timer that was previously created using the xTimerCreate() API function.      xTimerChangePeriod() can be called to change the period of an active or dormant state timer.      The configUSE_TIMERS configuration constant must be set to 1 for xTimerChangePeriod() to be available.
xTimerCreate=xTimerCreate
xTimerCreate_Hint=TimerHandle_t FRTOS1_xTimerCreate(const char * const pcTimerName, const...
xTimerCreate_HintHint=Creates a new software timer instance. This allocates the storage required by...
xTimerCreate_HintHintLong=Creates a new software timer instance. This allocates the storage required by the new timer, initialises the new timers internal state, and returns a handle by which the new timer can be referenced.
xTimerDelete=xTimerDelete
xTimerDelete_Hint=BaseType_t FRTOS1_xTimerDelete(TickType_t xTimer, TickType_t xBlockTime);
xTimerDelete_HintHint=Timer functionality is provided by a timer service/daemon task. Many of the...
xTimerDelete_HintHintLong=Timer functionality is provided by a timer service/daemon task. Many of the public FreeRTOS timer API functions send commands to the timer service task through a queue called the timer command queue. The timer command queue is private to the RTOS kernel itself and is not directly accessible to application code. The length of the timer command queue is set by the configTIMER_QUEUE_LENGTH configuration constant.      xTimerDelete() deletes a timer that was previously created using the xTimerCreate() API function.      The configUSE_TIMERS configuration constant must be set to 1 for xTimerDelete() to be available.
xTimerGetTimerDaemonTaskHandle=xTimerGetTimerDaemonTaskHandle
xTimerGetTimerDaemonTaskHandle_Hint=TaskHandle_t FRTOS1_xTimerGetTimerDaemonTaskHandle(void);
xTimerGetTimerDaemonTaskHandle_HintHint=INCLUDE_xTimerGetTimerDaemonTaskHandle and configUSE_TIMERS must both be set...
xTimerGetTimerDaemonTaskHandle_HintHintLong=INCLUDE_xTimerGetTimerDaemonTaskHandle and configUSE_TIMERS must both be set to 1 in FreeRTOSConfig.h for xTimerGetTimerDaemonTaskHandle() to be available.
xTimerIsTimerActive=xTimerIsTimerActive
xTimerIsTimerActive_Hint=BaseType_t FRTOS1_xTimerIsTimerActive(TimerHandle_t xTimer);
xTimerIsTimerActive_HintHint=Queries a timer to see if it is active or dormant.    A timer will be dormant...
xTimerIsTimerActive_HintHintLong=Queries a timer to see if it is active or dormant.    A timer will be dormant if:          It has been created but not started, or       It is an expired one-shot timer that has not been restarted.      Timers are created in the dormant state. The xTimerStart(), xTimerReset(), xTimerStartFromISR(), xTimerResetFromISR(), xTimerChangePeriod() and xTimerChangePeriodFromISR() API functions can all be used to transition a timer into the active state.
xTimerPendFunctionCall=xTimerPendFunctionCall
xTimerPendFunctionCallFromISR=xTimerPendFunctionCallFromISR
xTimerPendFunctionCallFromISR_Hint=BaseType_t FRTOS1_xTimerPendFunctionCallFromISR(PendedFunction_t...
xTimerPendFunctionCallFromISR_HintHint=Used from application interrupt service routines to defer the execution of a...
xTimerPendFunctionCallFromISR_HintHintLong=Used from application interrupt service routines to defer the execution of a function to the RTOS daemon task (the timer service task, hence this function is implemented in timers.c and is prefixed with 'Timer').      Ideally an interrupt service routine (ISR) is kept as short as possible, but sometimes an ISR either has a lot of processing to do, or needs to perform processing that is not deterministic. In these cases xTimerPendFunctionCallFromISR() can be used to defer processing of a function to the RTOS daemon task.      A mechanism is provided that allows the interrupt to return directly to the task that will subsequently execute the pended function. This allows the callback function to execute contiguously in time with the interrupt - just as if the callback had executed in the interrupt itself.      Functions that can be deferred to the RTOS daemon task must have the following prototype:      void vPendableFunction( void * pvParameter1, uint32_t ulParameter2 );      The pvParameter1 and ulParameter2 are provided for use by the application code.      INCLUDE_xTimerPendFunctionCall() and configUSE_TIMERS must both be set to 1 for xTimerPendFunctionCallFromISR() to be available.
xTimerPendFunctionCall_Hint=BaseType_t FRTOS1_xTimerPendFunctionCall(PendedFunction_t xFunctionToPend,...
xTimerPendFunctionCall_HintHint=Used to pend the execution of a function to the RTOS daemon task (the timer...
xTimerPendFunctionCall_HintHintLong=Used to pend the execution of a function to the RTOS daemon task (the timer service task, hence this function is pre-fixed with 'Timer').      Functions that can be deferred to the RTOS daemon task must have the following prototype:      void vPendableFunction( void * pvParameter1, uint32_t ulParameter2 );      The pvParameter1 and ulParameter2 are provided for use by the application code.      INCLUDE_xTimerPendFunctionCall() and configUSE_TIMERS must both be set to 1 for xTimerPendFunctionCall() to be available.
xTimerReset=xTimerReset
xTimerResetFromISR=xTimerResetFromISR
xTimerResetFromISR_Hint=BaseType_t FRTOS1_xTimerResetFromISR(TimerHandle_t xTimer, BaseType_t...
xTimerResetFromISR_HintHint=A version of xTimerReset() that can be called from an interrupt service routine.
xTimerResetFromISR_HintHintLong=A version of xTimerReset() that can be called from an interrupt service routine.
xTimerReset_Hint=BaseType_t FRTOS1_xTimerReset(TimerHandle_t xTimer, TickType_t xBlockTime);
xTimerReset_HintHint=Timer functionality is provided by a timer service/daemon task. Many of the...
xTimerReset_HintHintLong=Timer functionality is provided by a timer service/daemon task. Many of the public FreeRTOS timer API functions send commands to the timer service task through a queue called the timer command queue. The timer command queue is private to the RTOS kernel itself and is not directly accessible to application code. The length of the timer command queue is set by the configTIMER_QUEUE_LENGTH configuration constant.      xTimerReset() re-starts a timer that was previously created using the xTimerCreate() API function. If the timer had already been started and was already in the active state, then xTimerReset() will cause the timer to re-evaluate its expiry time so that it is relative to when xTimerReset() was called. If the timer was in the dormant state then xTimerReset() has equivalent functionality to the xTimerStart() API function.      Resetting a timer ensures the timer is in the active state. If the timer is not stopped, deleted, or reset in the mean time, the callback function associated with the timer will get called 'n' ticks after xTimerReset() was called, where 'n' is the timers defined period.      It is valid to call xTimerReset() before the RTOS scheduler has been started, but when this is done the timer will not actually start until the RTOS scheduler is started, and the timers expiry time will be relative to when the RTOS scheduler is started, not relative to when xTimerReset() was called.      The configUSE_TIMERS configuration constant must be set to 1 for xTimerReset() to be available.
xTimerStart=xTimerStart
xTimerStartFromISR=xTimerStartFromISR
xTimerStartFromISR_Hint=BaseType_t FRTOS1_xTimerStartFromISR(TimerHandle_t xTimer, BaseType_t...
xTimerStartFromISR_HintHint=A version of xTimerStart() that can be called from an interrupt service routine.
xTimerStartFromISR_HintHintLong=A version of xTimerStart() that can be called from an interrupt service routine.
xTimerStart_Hint=BaseType_t FRTOS1_xTimerStart(TimerHandle_t xTimer, TickType_t xBlockTime);
xTimerStart_HintHint=Timer functionality is provided by a timer service/daemon task. Many of the...
xTimerStart_HintHintLong=Timer functionality is provided by a timer service/daemon task. Many of the public FreeRTOS timer API functions send commands to the timer service task through a queue called the timer command queue. The timer command queue is private to the RTOS kernel itself and is not directly accessible to application code. The length of the timer command queue is set by the configTIMER_QUEUE_LENGTH configuration constant.      xTimerStart() starts a timer that was previously created using the xTimerCreate() API function. If the timer had already been started and was already in the active state, then xTimerStart() has equivalent functionality to the xTimerReset() API function.      Starting a timer ensures the timer is in the active state. If the timer is not stopped, deleted, or reset in the mean time, the callback function associated with the timer will get called 'n 'ticks after xTimerStart() was called, where 'n' is the timers defined period.      It is valid to call xTimerStart() before the RTOS scheduler has been started, but when this is done the timer will not actually start until the RTOS scheduler is started, and the timers expiry time will be relative to when the RTOS scheduler is started, not relative to when xTimerStart() was called.      The configUSE_TIMERS configuration constant must be set to 1 for xTimerStart() to be available.
xTimerStop=xTimerStop
xTimerStopFromISR=xTimerStopFromISR
xTimerStopFromISR_Hint=BaseType_t FRTOS1_xTimerStopFromISR(TimerHandle_t xTimer, BaseType_t...
xTimerStopFromISR_HintHint=A version of xTimerStop() that can be called from an interrupt service routine.
xTimerStopFromISR_HintHintLong=A version of xTimerStop() that can be called from an interrupt service routine.
xTimerStop_Hint=BaseType_t FRTOS1_xTimerStop(TimerHandle_t xTimer, TickType_t xBlockTime);
xTimerStop_HintHint=Timer functionality is provided by a timer service/daemon task. Many of the...
xTimerStop_HintHintLong=Timer functionality is provided by a timer service/daemon task. Many of the public FreeRTOS timer API functions send commands to the timer service task through a queue called the timer command queue. The timer command queue is private to the RTOS kernel itself and is not directly accessible to application code. The length of the timer command queue is set by the configTIMER_QUEUE_LENGTH configuration constant.      xTimerStop() stops a timer that was previously started using either of the xTimerStart(), xTimerReset(), xTimerStartFromISR(), xTimerResetFromISR(), xTimerChangePeriod() and xTimerChangePeriodFromISR() API functions.      Stopping a timer ensures the timer is not in the active state.      The configUSE_TIMERS configuration constant must be set to 1 for xTimerStop() to be available.
BeanUserCopyright=[License : Open Source (LGPL)|FreeRTOS (c) Copyright 2003-2015 Richard Barry, http: www.FreeRTOS.org|FreeRTOS Processor Expert Component: (c) Copyright Erich Styger, 2013-2015|Processor Expert and CodeWarrior (c) Copyright Freescale Semiconductor, 2013-2015, all rights reserved|This is a free software and is opened for education, research and commercial developments under license policy of following terms:|* This is a free software and there is NO WARRANTY.|* No restriction on use. You can use, modify and redistribute it for personal, non-profit or commercial product UNDER YOUR RESPONSIBILITY.|* Redistributions of source code must retain the above copyright notice.]
EventList=[FRTOS1_vApplicationStackOverflowHook|FRTOS1_vApplicationTickHook|FRTOS1_vApplicationIdleHook|FRTOS1_vApplicationMallocFailedHook]
EventModules=[Events]
InhrSymbolList=[KinetisSDK|Utility]
MethodHintList=[portBASE_TYPE FRTOS1_xTaskCreate(pdTASK_CODE pvTaskCode, const portCHAR * const pcName, unsigned portSHORT usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pvCreatedTask);|void FRTOS1_vTaskStartScheduler(void);|void FRTOS1_vTaskSuspend(xTaskHandle pxTaskToSuspend);|void FRTOS1_vTaskSuspendAll(void);|void FRTOS1_vTaskResume(xTaskHandle pxTaskToResume);|portBASE_TYPE FRTOS1_xTaskResumeAll(void);|portBASE_TYPE FRTOS1_xTaskResumeFromISR(xTaskHandle pxTaskToResume);|void FRTOS1_taskYIELD(void);|void FRTOS1_taskENTER_CRITICAL(void);|void FRTOS1_taskEXIT_CRITICAL(void);|void FRTOS1_taskDISABLE_INTERRUPTS(void);|void FRTOS1_taskENABLE_INTERRUPTS(void);|void FRTOS1_vTaskDelay(portTickType xTicksToDelay);|void FRTOS1_vTaskDelayUntil(portTickType *pxPreviousWakeTime, portTickType xTimeIncrement);|unsigned_portBASE_TYPE FRTOS1_uxTaskPriorityGet(xTaskHandle pxTask);|void FRTOS1_vTaskPrioritySet(xTaskHandle pxTask, unsigned_portBASE_TYPE uxNewPriority);|portTickType FRTOS1_xTaskGetTickCount(void);|portTickType FRTOS1_xTaskGetTickCountFromISR(void);|xSemaphoreHandle FRTOS1_xSemaphoreCreateRecursiveMutex(void);|bool FRTOS1_xSemaphoreTakeRecursive(xSemaphoreHandle xMutex, portTickType xBlockTime);|bool FRTOS1_xSemaphoreGiveRecursive(xSemaphoreHandle xMutex);|xSemaphoreHandle FRTOS1_xSemaphoreCreateMutex(void);|bool FRTOS1_xSemaphoreTake(xSemaphoreHandle xMutex, portTickType xBlockTime);|bool FRTOS1_xSemaphoreGive(xSemaphoreHandle xMutex);|void FRTOS1_vSemaphoreCreateBinary(xSemaphoreHandle xSemaphore);|SemaphoreHandle_t FRTOS1_xSemaphoreCreateBinary(void);|xSemaphoreHandle FRTOS1_xSemaphoreCreateCounting(unsigned_portBASE_TYPE uxMaxCount, unsigned_portBASE_TYPE uxInitialCount);|bool FRTOS1_xSemaphoreGiveFromISR(xSemaphoreHandle xSemaphore, signed_portBASE_TYPE *pxHigherPriorityTaskWoken);|bool FRTOS1_xSemaphoreTakeFromISR(xSemaphoreHandle xSemaphore, signed_portBASE_TYPE *pxHigherPriorityTaskWoken);|void FRTOS1_vSemaphoreDelete(xSemaphoreHandle xSemaphore);|void* FRTOS1_xSemaphoreGetMutexHolder(xSemaphoreHandle xSemaphore);|pVoid FRTOS1_pvPortMalloc(size_t xWantedSize);|void FRTOS1_vPortFree(void *pv);|Tsize_t FRTOS1_xPortGetFreeHeapSize(void);|portBASE_TYPE FRTOS1_xTaskGetSchedulerState(void);|unsigned_portBASE_TYPE FRTOS1_uxTaskGetStackHighWaterMark(xTaskHandle xTask);|unsigned_portBASE_TYPE FRTOS1_uxTaskGetNumberOfTasks(void);|unsigned_portBASE_TYPE FRTOS1_uxQueueMessagesWaiting(xQueueHandle xQueue);|unsigned_portBASE_TYPE FRTOS1_uxQueueMessagesWaitingfromISR(xQueueHandle xQueue);|xQueueHandle FRTOS1_xQueueCreate(unsigned_portBASE_TYPE uxQueueLength, unsigned_portBASE_TYPE uxItemSize);|void FRTOS1_vQueueDelete(xQueueHandle pxQueueToDelete);|portBASE_TYPE FRTOS1_xQueueReset(xQueueHandle xQueue);|portBASE_TYPE FRTOS1_xQueueSendToBack(xQueueHandle xQueue, const void *pvItemToQueue, portTickType xTicksToWait);|portBASE_TYPE FRTOS1_xQueueSendToFront(xQueueHandle xQueue, const void *pvItemToQueue, portTickType xTicksToWait);|portBASE_TYPE FRTOS1_xQueueReceive(xQueueHandle xQueue, void *pvBuffer, portTickType xTicksToWait);|portBASE_TYPE FRTOS1_xQueueOverwrite(xQueueHandle xQueue, const void *pvItemToQueue);|portBASE_TYPE FRTOS1_xQueueOverwriteFromISR(xQueueHandle xQueue, const void *pvItemToQueue, portBASE_TYPE *pxHigherPriorityTaskWoken);|portBASE_TYPE FRTOS1_xQueuePeek(xQueueHandle xQueue, void *pvBuffer, portTickType xTicksToWait);|portBASE_TYPE FRTOS1_xQueuePeekFromISR(xQueueHandle xQueue, void *pvBuffer, portTickType xTicksToWait);|portBASE_TYPE FRTOS1_xQueueSendToBackFromISR(xQueueHandle xQueue, const void *pvItemToQueue, portBASE_TYPE *pxHigherPriorityTaskWoken);|portBASE_TYPE FRTOS1_xQueueSendToFrontFromISR(xQueueHandle xQueue, const void *pvItemToQueue, portBASE_TYPE *pxHigherPriorityTaskWoken);|portBASE_TYPE FRTOS1_xQueueReceiveFromISR(xQueueHandle xQueue, void *pvBuffer, portBASE_TYPE *pxHigherPriorityTaskWoken);|void FRTOS1_vQueueAddToRegistry(xQueueHandle xQueue, char *pcQueueName);|void FRTOS1_vQueueUnregisterQueue(xQueueHandle xQueue);|portBASE_TYPE FRTOS1_xQueueIsQueueFullFromISR(xQueueHandle xQueue);|portBASE_TYPE FRTOS1_xQueueIsQueueEmptyFromISR(xQueueHandle xQueue);|EventGroupHandle_t FRTOS1_xEventGroupCreate(void);|byte FRTOS1_xEventGroupWaitBits(const EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait);|EventBits_t FRTOS1_xEventGroupSetBits(EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet );|EventBits_t FRTOS1_xEventGroupSetBitsFromISR(EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet , BaseType_t *pxHigherPriorityTaskWoken);|EventBits_t FRTOS1_xEventGroupClearBits(EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet );|EventBits_t FRTOS1_xEventGroupClearBitsFromISR(EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet );|EventBits_t FRTOS1_xEventGroupGetBits(EventGroupHandle_t xEventGroup);|EventBits_t FRTOS1_xEventGroupGetBitsFromISR(EventGroupHandle_t xEventGroup);|EventBits_t FRTOS1_xEventGroupSync(EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait);|TimerHandle_t FRTOS1_xTimerCreate(const char * const pcTimerName, const TickType_t xTimerPeriod, const UBaseType_t uxAutoReload, void *const pvTimerID, TimerCallbackFunction_t pxCallbackFunction);|BaseType_t FRTOS1_xTimerIsTimerActive(TimerHandle_t xTimer);|BaseType_t FRTOS1_xTimerStart(TimerHandle_t xTimer, TickType_t xBlockTime);|BaseType_t FRTOS1_xTimerStop(TimerHandle_t xTimer, TickType_t xBlockTime);|BaseType_t FRTOS1_xTimerChangePeriod(TimerHandle_t xTimer, TickType_t xNewPeriod, TickType_t xBlockTime);|BaseType_t FRTOS1_xTimerDelete(TickType_t xTimer, TickType_t xBlockTime);|BaseType_t FRTOS1_xTimerReset(TimerHandle_t xTimer, TickType_t xBlockTime);|BaseType_t FRTOS1_xTimerStartFromISR(TimerHandle_t xTimer, BaseType_t *pxHigherPriorityTaskWoken);|BaseType_t FRTOS1_xTimerStopFromISR(TimerHandle_t xTimer, BaseType_t *pxHigherPriorityTaskWoken);|BaseType_t FRTOS1_xTimerChangePeriodFromISR(TimerHandle_t xTimer, TickType_t xNewPeriod, BaseType_t *pxHigherPriorityTaskWoken);|BaseType_t FRTOS1_xTimerResetFromISR(TimerHandle_t xTimer, BaseType_t *pxHigherPriorityTaskWoken);|void* FRTOS1_pvTimerGetTimerID(TimerHandle_t xTimer);|TaskHandle_t FRTOS1_xTimerGetTimerDaemonTaskHandle(void);|char* FRTOS1_pcTimerGetTimerName(TimerHandle_t xTimer);|BaseType_t FRTOS1_xTimerPendFunctionCall(PendedFunction_t xFunctionToPend, void* pvParameter1, uint32_t ulParameter2, TickType_t xTicksToWait);|BaseType_t FRTOS1_xTimerPendFunctionCallFromISR(PendedFunction_t xFunctionToPend, void* pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken);|BaseType_t FRTOS1_xTaskNotifyGive(TaskHandle_t xTaskToNotify);|void FRTOS1_vTaskNotifyGiveFromISR(TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken);|uint32_t FRTOS1_ulTaskNotifyTake(BaseType_t xClearCountOnExit, TickType_t xTicksToWait);|BaseType_t FRTOS1_xTaskNotify(TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction);|BaseType_t FRTOS1_xTaskNotifyFromISR(TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, BaseType_t *pxHigherPriorityTaskWoken);|BaseType_t FRTOS1_xTaskNotifyAndQuery(TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotifyValue);|BaseType_t FRTOS1_xTaskNotifyAndQueryFromISR(TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotifyValue, BaseType_t *pxHigherPriorityTaskWoken);|BaseType_t FRTOS1_xTaskNotifyWait(uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait);|void FRTOS1_vTaskSetThreadLocalStoragePointer(TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue);|void* FRTOS1_pvTaskGetThreadLocalStoragePointer(TaskHandle_t xTaskToQuery, BaseType_t xIndex);|void FRTOS1_Init(void);]
MethodList=[xTaskCreate|vTaskStartScheduler|vTaskSuspend|vTaskSuspendAll|vTaskResume|xTaskResumeAll|xTaskResumeFromISR|taskYIELD|taskENTER_CRITICAL|taskEXIT_CRITICAL|taskDISABLE_INTERRUPTS|taskENABLE_INTERRUPTS|vTaskDelay|vTaskDelayUntil|uxTaskPriorityGet|vTaskPrioritySet|xTaskGetTickCount|xTaskGetTickCountFromISR|xSemaphoreCreateRecursiveMutex|xSemaphoreTakeRecursive|xSemaphoreGiveRecursive|xSemaphoreCreateMutex|xSemaphoreTake|xSemaphoreGive|vSemaphoreCreateBinary|xSemaphoreCreateBinary|xSemaphoreCreateCounting|xSemaphoreGiveFromISR|xSemaphoreTakeFromISR|vSemaphoreDelete|xSemaphoreGetMutexHolder|pvPortMalloc|vPortFree|xPortGetFreeHeapSize|xTaskGetSchedulerState|uxTaskGetStackHighWaterMark|uxTaskGetNumberOfTasks|uxQueueMessagesWaiting|uxQueueMessagesWaitingfromISR|xQueueCreate|vQueueDelete|xQueueReset|xQueueSendToBack|xQueueSendToFront|xQueueReceive|xQueueOverwrite|xQueueOverwriteFromISR|xQueuePeek|xQueuePeekFromISR|xQueueSendToBackFromISR|xQueueSendToFrontFromISR|xQueueReceiveFromISR|vQueueAddToRegistry|vQueueUnregisterQueue|xQueueIsQueueFullFromISR|xQueueIsQueueEmptyFromISR|xEventGroupCreate|xEventGroupWaitBits|xEventGroupSetBits|xEventGroupSetBitsFromISR|xEventGroupClearBits|xEventGroupClearBitsFromISR|xEventGroupGetBits|xEventGroupGetBitsFromISR|xEventGroupSync|xTimerCreate|xTimerIsTimerActive|xTimerStart|xTimerStop|xTimerChangePeriod|xTimerDelete|xTimerReset|xTimerStartFromISR|xTimerStopFromISR|xTimerChangePeriodFromISR|xTimerResetFromISR|pvTimerGetTimerID|xTimerGetTimerDaemonTaskHandle|pcTimerGetTimerName|xTimerPendFunctionCall|xTimerPendFunctionCallFromISR|xTaskNotifyGive|vTaskNotifyGiveFromISR|ulTaskNotifyTake|xTaskNotify|xTaskNotifyFromISR|xTaskNotifyAndQuery|xTaskNotifyAndQueryFromISR|xTaskNotifyWait|vTaskSetThreadLocalStoragePointer|pvTaskGetThreadLocalStoragePointer|Init]
runSpeedMode=[Yes]

GLOBAL SYMBOLS (alphabet order)
-------------------------------
ADC0AsynchroClockAddr=1073983496
ADC0AsynchroClockReg=ADC0_CFG1
ADC0BusClockAddr=1073983496
ADC0BusClockReg=ADC0_CFG1
ADC0ClkSelAddr=1073983496
ADC0ClkSelReg=ADC0_CFG1
ADC1AsynchroClockAddr=1074507784
ADC1AsynchroClockReg=ADC1_CFG1
ADC1BusClockAddr=1074507784
ADC1BusClockReg=ADC1_CFG1
ADC1ClkSelAddr=1074507784
ADC1ClkSelReg=ADC1_CFG1
ActiveConfigIdentifier=PEcfg_FLASH
ActiveConfiguration=FLASH
CPUDB_BUS_FREQ_HZ_MAX=60000000
CPUDB_CPU_MASTER=MK64F12
CPUDB_CW_MCU_ID=28695
CPUDB_CW_MCU_NAME=MK64FX512xxx12_4SDK
CPUDB_DataFlashBlockCount=1
CPUDB_DataFlashEraseUnitSize=4096
CPUDB_DataFlashSize=131072
CPUDB_DataFlashStartAddress=268435456
CPUDB_DataFlashWriteUnitSize=8
CPUDB_FLASH_CFG_AREA_ADDRESS=1024
CPUDB_FLASH_CFG_AREA_SIZE=16
CPUDB_FREQ_FLEXBUS_RUN_HZ_MAX=50000000
CPUDB_FREQ_FLEXBUS_VLPR_HZ_MAX=4000000
CPUDB_FTFx=-1
CPUDB_FlashType=FTFx
CPUDB_FlexRamSize=4096
CPUDB_FlexRamStartAddress=335544320
CPUDB_InitComponentSplit=-1
CPUDB_InitComponentSplitLegacy=-1
CPUDB_InitComponentSplitLegacy_Init_SCB_VAR0=Init_SCB_VAR0_M0P
CPUDB_Init_SCB_VAR0_M0P=-1
CPUDB_K60_1M=-1
CPUDB_LQFP100=-1
CPUDB_MK64F12=-1
CPUDB_MK64FX512xxx12_4SDK=-1
CPUDB_MQX_SdkMcuName=mk64f120m
CPUDB_NpiNameId=K60_1M
CPUDB_PACKAGE=LQFP100
CPUDB_PLL_INPUT_DIV_MAX=25
CPUDB_PLL_INPUT_DIV_MIN=1
CPUDB_PLL_INPUT_FREQ_HZ_MAX=4000000
CPUDB_PLL_INPUT_FREQ_HZ_MIN=2000000
CPUDB_PLL_INPUT_MULT_MAX=55
CPUDB_PLL_INPUT_MULT_MIN=24
CPUDB_PLL_OUTPUT_FREQ_HZ_MAX=120000000
CPUDB_PLL_OUTPUT_FREQ_HZ_MIN=48000000
CPUDB_ProgramFlashBlockCount=1
CPUDB_ProgramFlashEraseUnitSize=4096
CPUDB_ProgramFlashSize=524288
CPUDB_ProgramFlashStartAddress=0
CPUDB_ProgramFlashWriteUnitSize=8
CPUDB_SRAML_64KB=65536
CPUDB_SRAMU_128KB=131072
CPUDB_SYSTEM_FREQ_HZ_MAX=120000000
CPUDB_mk64f120m=-1
CPU_DB_version=3.00.000
CPUendian=little
CPUfamily=Kinetis
CPUproducer=Freescale
CPUrunSpeedModeNum=1
CPUsubFamily=MK64F
CPUtype=MK64FN1M0LL12_4SDK
CPUvariant=MK64FX512VLL12
ClientDir_Binary=C:\Users\89247469\workspace.kds\Meu1oARM\Sources\
ClientDir_Code=C:\Users\89247469\workspace.kds\Meu1oARM\Generated_Code\
ClientDir_PE=C:\Freescale\KDS_v3\eclipse\ProcessorExpert\
ClientDir_Project=C:\Users\89247469\workspace.kds\Meu1oARM\
CommentBrackets=/**/
Compiler=GNUC
CompilerID=GNU C Compiler
DirRel_Binary=Sources\
DirRel_BinaryToEvents=
DirRel_Code=Generated_Code\
DirRel_Docs=Documentation\
DirRel_EventToBinary=
DirRel_Events=Sources\
DirRel_ProjectSettings=Project_Settings\
DirRel_StaticCode=Static_Code\
EclipseProjectName=Meu1oARM
InterruptTableType=ROM
Language=ANSIC
Not_for_MPC512x=
Not_for_MPC5500_MCF=
O_PIB_full_Init=no
OnChipEEPROM=4096
OnChipFLASH=524288
OnChipRAM=196608
OperatingSystemId=FreeRTOS
PEG_G_SDK_HalIncMask=*
PEG_G_SDK_PlatformIncMask=*
PEG_G_SDK_StartupIncMask=*
PE_CFG_PEX_DRV=5_3
PE_DEVELOPMENT=
PE_ECLIPSE=
PE_GENERATING=
PE_G_4PEx_ToolChain_Linker_EntryPoint=Reset_Handler
PE_G_AUTOFILL_W1C_W0C_BITS=
PE_G_CPUCFG_AutoIncludeIO_Map=yes
PE_G_CPUCFG_EntryPointFunctionName=__init_hardware
PE_G_CPUCFG_EntryPointFunctionReturn=
PE_G_CPUCFG_EntryPointFunctionReturnType=void
PE_G_CPUCFG_GenerateLinkerFile=yes
PE_G_CPUCFG_GenerateMainModule=yes
PE_G_CPUCFG_InitIntVectorTableSym=yes
PE_G_CPUCFG_ManageInterruptVectorTable=yes
PE_G_CPU_Doxygen_RegInitValue_And_Mask_MCG_C1=197
PE_G_CPU_Doxygen_RegInitValue_And_Mask_MCG_C2=223
PE_G_CPU_Doxygen_RegInitValue_And_Mask_MCG_C4=255
PE_G_CPU_Doxygen_RegInitValue_And_Mask_MCG_C5=108
PE_G_CPU_Doxygen_RegInitValue_And_Mask_MCG_C6=167
PE_G_CPU_Doxygen_RegInitValue_And_Mask_MCG_C7=3
PE_G_CPU_Doxygen_RegInitValue_And_Mask_MCG_SC=255
PE_G_CPU_Doxygen_RegInitValue_And_Mask_MPU_CESR= 1
PE_G_CPU_Doxygen_RegInitValue_And_Mask_OSC_CR=47
PE_G_CPU_Doxygen_RegInitValue_And_Mask_PORTE_PCR0=4278188988
PE_G_CPU_Doxygen_RegInitValue_And_Mask_PORTE_PCR1=4278188988
PE_G_CPU_Doxygen_RegInitValue_And_Mask_PORTE_PCR2=4278188988
PE_G_CPU_Doxygen_RegInitValue_And_Mask_PORTE_PCR3=4278188988
PE_G_CPU_Doxygen_RegInitValue_And_Mask_PORTE_PCR4=4278188988
PE_G_CPU_Doxygen_RegInitValue_And_Mask_PORTE_PCR5=4278188988
PE_G_CPU_Doxygen_RegInitValue_And_Mask_RTC_CR=1055
PE_G_CPU_Doxygen_RegInitValue_And_Mask_SIM_CLKDIV1=4275765248
PE_G_CPU_Doxygen_RegInitValue_And_Mask_SIM_CLKDIV2=6
PE_G_CPU_Doxygen_RegInitValue_And_Mask_SIM_SOPT1=3758419968
PE_G_CPU_Doxygen_RegInitValue_And_Mask_SIM_SOPT2=809376752
PE_G_CPU_Doxygen_RegInitValue_And_Mask_SMC_PMCTRL=239
PE_G_CPU_Doxygen_RegInitValue_And_Mask_SMC_PMPROT=42
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_MCG_C1=58
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_MCG_C2=32
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_MCG_C4=0
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_MCG_C5=19
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_MCG_C6=88
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_MCG_C7=0
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_MCG_SC=0
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_MPU_CESR= 0
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_OSC_CR=128
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_PORTE_PCR0=16778307
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_PORTE_PCR1=16778307
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_PORTE_PCR2=16778307
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_PORTE_PCR3=16778307
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_PORTE_PCR4=16778307
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_PORTE_PCR5=16778307
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_RTC_CR=15104
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_SIM_CLKDIV1=19136512
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_SIM_CLKDIV2=9
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_SIM_SOPT1=524288
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_SIM_SOPT2=65536
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_SMC_PMCTRL=0
PE_G_CPU_Doxygen_RegInitValue_Or_Mask_SMC_PMPROT=0
PE_G_CPUpinVariantMaster=MK64F12
PE_G_CRI_PinSettings_MergedWrite_ENET_set0_PORTA_PCR12=768
PE_G_CRI_PinSettings_MergedWrite_ENET_set0_PORTA_PCR13=768
PE_G_CRI_PinSettings_MergedWrite_ENET_set0_PORTA_PCR14=768
PE_G_CRI_PinSettings_MergedWrite_ENET_set0_PORTA_PCR15=768
PE_G_CRI_PinSettings_MergedWrite_ENET_set0_PORTA_PCR16=768
PE_G_CRI_PinSettings_MergedWrite_ENET_set0_PORTA_PCR17=768
PE_G_CRI_PinSettings_MergedWrite_ENET_set0_PORTA_PCR18=1792
PE_G_CRI_PinSettings_MergedWrite_ENET_set0_PORTA_PCR5=768
PE_G_CRI_PinSettings_MergedWrite_ENET_set0_PORTB_PCR0=768
PE_G_CRI_PinSettings_MergedWrite_ENET_set0_PORTB_PCR1=768
PE_G_CRI_PinSettings_MergedWrite_ENET_set0_PORTC_PCR16=768
PE_G_CRI_PinSettings_MergedWrite_ENET_set0_PORTC_PCR17=768
PE_G_CRI_PinSettings_MergedWrite_ENET_set0_PORTC_PCR18=768
PE_G_CRI_PinSettings_MergedWrite_ENET_set1_PORTA_PCR12=1024
PE_G_CRI_PinSettings_MergedWrite_ENET_set1_PORTA_PCR13=1024
PE_G_CRI_PinSettings_MergedWrite_ENET_set1_PORTA_PCR14=1024
PE_G_CRI_PinSettings_MergedWrite_ENET_set1_PORTA_PCR15=1024
PE_G_CRI_PinSettings_MergedWrite_ENET_set1_PORTA_PCR16=1024
PE_G_CRI_PinSettings_MergedWrite_ENET_set1_PORTA_PCR17=1024
PE_G_CRI_PinSettings_MergedWrite_ENET_set1_PORTA_PCR18=0
PE_G_CRI_PinSettings_MergedWrite_ENET_set1_PORTA_PCR5=1024
PE_G_CRI_PinSettings_MergedWrite_ENET_set1_PORTB_PCR0=1059
PE_G_CRI_PinSettings_MergedWrite_ENET_set1_PORTB_PCR1=1024
PE_G_CRI_PinSettings_MergedWrite_ENET_set1_PORTC_PCR16=1024
PE_G_CRI_PinSettings_MergedWrite_ENET_set1_PORTC_PCR17=1024
PE_G_CRI_PinSettings_MergedWrite_ENET_set1_PORTC_PCR18=1024
PE_G_CRI_PinSettings_MergedWrite_JTAG_set0_PORTA_PCR0=0
PE_G_CRI_PinSettings_MergedWrite_JTAG_set0_PORTA_PCR1=0
PE_G_CRI_PinSettings_MergedWrite_JTAG_set0_PORTA_PCR2=0
PE_G_CRI_PinSettings_MergedWrite_JTAG_set0_PORTA_PCR3=0
PE_G_CRI_PinSettings_MergedWrite_JTAG_set1_PORTA_PCR0=1792
PE_G_CRI_PinSettings_MergedWrite_JTAG_set1_PORTA_PCR1=1792
PE_G_CRI_PinSettings_MergedWrite_JTAG_set1_PORTA_PCR2=1792
PE_G_CRI_PinSettings_MergedWrite_JTAG_set1_PORTA_PCR3=1792
PE_G_CRI_PinSettings_MergedWrite_LLWU_set0_PORTD_PCR0=1552
PE_G_CRI_PinSettings_MergedWrite_LLWU_set0_PORTD_PCR2=1552
PE_G_CRI_PinSettings_MergedWrite_LLWU_set0_PORTD_PCR4=1632
PE_G_CRI_PinSettings_MergedWrite_LLWU_set1_PORTD_PCR0=259
PE_G_CRI_PinSettings_MergedWrite_LLWU_set1_PORTD_PCR2=259
PE_G_CRI_PinSettings_MergedWrite_LLWU_set1_PORTD_PCR4=260
PE_G_CRI_PinSettings_MergedWrite_OSC_set0_PORTA_PCR18=1792
PE_G_CRI_PinSettings_MergedWrite_OSC_set1_PORTA_PCR18=0
PE_G_CRI_PinSettings_MergedWrite_PTB_set0_PORTB_PCR10=1552
PE_G_CRI_PinSettings_MergedWrite_PTB_set0_PORTB_PCR18=1632
PE_G_CRI_PinSettings_MergedWrite_PTB_set0_PORTB_PCR19=1632
PE_G_CRI_PinSettings_MergedWrite_PTB_set0_PORTB_PCR2=1552
PE_G_CRI_PinSettings_MergedWrite_PTB_set0_PORTB_PCR23=1632
PE_G_CRI_PinSettings_MergedWrite_PTB_set0_PORTB_PCR3=1632
PE_G_CRI_PinSettings_MergedWrite_PTB_set1_PORTB_PCR10=259
PE_G_CRI_PinSettings_MergedWrite_PTB_set1_PORTB_PCR18=260
PE_G_CRI_PinSettings_MergedWrite_PTB_set1_PORTB_PCR19=260
PE_G_CRI_PinSettings_MergedWrite_PTB_set1_PORTB_PCR2=259
PE_G_CRI_PinSettings_MergedWrite_PTB_set1_PORTB_PCR23=260
PE_G_CRI_PinSettings_MergedWrite_PTB_set1_PORTB_PCR3=260
PE_G_CRI_PinSettings_MergedWrite_PTC_set0_PORTC_PCR8=1632
PE_G_CRI_PinSettings_MergedWrite_PTC_set1_PORTC_PCR8=260
PE_G_CRI_PinSettings_MergedWrite_PTD_set0_PORTD_PCR0=1552
PE_G_CRI_PinSettings_MergedWrite_PTD_set0_PORTD_PCR2=1552
PE_G_CRI_PinSettings_MergedWrite_PTD_set0_PORTD_PCR4=1632
PE_G_CRI_PinSettings_MergedWrite_PTD_set0_PORTD_PCR5=1632
PE_G_CRI_PinSettings_MergedWrite_PTD_set1_PORTD_PCR0=259
PE_G_CRI_PinSettings_MergedWrite_PTD_set1_PORTD_PCR2=259
PE_G_CRI_PinSettings_MergedWrite_PTD_set1_PORTD_PCR4=260
PE_G_CRI_PinSettings_MergedWrite_PTD_set1_PORTD_PCR5=260
PE_G_CRI_PinSettings_MergedWrite_PTE_set0_PORTE_PCR24=1632
PE_G_CRI_PinSettings_MergedWrite_PTE_set0_PORTE_PCR25=1632
PE_G_CRI_PinSettings_MergedWrite_PTE_set0_PORTE_PCR26=1632
PE_G_CRI_PinSettings_MergedWrite_PTE_set0_PORTE_PCR6=1552
PE_G_CRI_PinSettings_MergedWrite_PTE_set1_PORTE_PCR24=260
PE_G_CRI_PinSettings_MergedWrite_PTE_set1_PORTE_PCR25=260
PE_G_CRI_PinSettings_MergedWrite_PTE_set1_PORTE_PCR26=260
PE_G_CRI_PinSettings_MergedWrite_PTE_set1_PORTE_PCR6=259
PE_G_CRI_PinSettings_MergedWrite_SDHC_set0_PORTE_PCR0=772
PE_G_CRI_PinSettings_MergedWrite_SDHC_set0_PORTE_PCR1=772
PE_G_CRI_PinSettings_MergedWrite_SDHC_set0_PORTE_PCR2=772
PE_G_CRI_PinSettings_MergedWrite_SDHC_set0_PORTE_PCR3=772
PE_G_CRI_PinSettings_MergedWrite_SDHC_set0_PORTE_PCR4=772
PE_G_CRI_PinSettings_MergedWrite_SDHC_set0_PORTE_PCR5=772
PE_G_CRI_PinSettings_MergedWrite_SDHC_set1_PORTE_PCR0=1091
PE_G_CRI_PinSettings_MergedWrite_SDHC_set1_PORTE_PCR1=1091
PE_G_CRI_PinSettings_MergedWrite_SDHC_set1_PORTE_PCR2=1091
PE_G_CRI_PinSettings_MergedWrite_SDHC_set1_PORTE_PCR3=1091
PE_G_CRI_PinSettings_MergedWrite_SDHC_set1_PORTE_PCR4=1091
PE_G_CRI_PinSettings_MergedWrite_SDHC_set1_PORTE_PCR5=1091
PE_G_CRI_PinSettings_MergedWrite_TPIU_set0_PORTA_PCR2=0
PE_G_CRI_PinSettings_MergedWrite_TPIU_set1_PORTA_PCR2=1792
PE_G_Doxygen_Support=
PE_G_FSL_OS_ABSTRACTION=BareMetal
PE_G_FSL_PIT_INT_LIST_pitTimer1=INT_PIT0
PE_G_FSL_PIT_INT_LIST_pitTimer2=INT_PIT1
PE_G_FSL_PIT_INT_LIST_pitTimer3=INT_PIT2
PE_G_FSL_PIT_INT_LIST_pitTimer4=INT_PIT3
PE_G_GenBitMask=
PE_G_HDR_FILE_MPU=MPU_Init.h
PE_G_HDR_FILE_PORTE=PORTE_Init.h
PE_G_IMPL_FILE_MPU=MPU_Init.c
PE_G_IMPL_FILE_PORTE=PORTE_Init.c
PE_G_INT_PIT0_Used=fsl_pit
PE_G_INT_PIT1_Used=fsl_pit
PE_G_INT_PIT2_Used=fsl_pit
PE_G_INT_PIT3_Used=fsl_pit
PE_G_MisraCnfBackParams_0=
PE_G_MisraCnfParams_0=
PE_G_MisraRuleList_0=
PE_G_MisraStackIdx=-1
PE_G_NO_SETREGMACROS=
PE_G_PE_IOMap=
PE_G_PinSettings_DeviceName=pin_mux
PE_G_RTOSAdap_P_RTOSFun_Dealloc=vPortFree
PE_G_RTOSAdap_P_RTOSFun_EnterCritical=taskENTER_CRITICAL
PE_G_RTOSAdap_P_RTOSFun_ExitCritical=taskEXIT_CRITICAL
PE_G_RTOSAdap_P_RTOSFun_Malloc=pvPortMalloc
PE_G_USE_UINTXX_T=
PE_G_XLKR_C_COMPILER_LANGUAGE_STANDARD=ilg.gnuarmeclipse.managedbuild.cross.option.c.compiler.std.c99
PE_G_XLKR_ToolChain_Linker_OtherC=-specs=nosys.specs -specs=nano.specs -Xlinker -z -Xlinker muldefs
PE_G_XLKR_ToolChain_Linker_OtherCpp=-specs=nosys.specs -specs=nano.specs -Xlinker -z -Xlinker muldefs
PE_ProductVersion=10.5
PEversion=05.21
PEversionDecimal=1313
ProcessorModule=Cpu
ProcessorName=Cpu
ProjectMainModule=main
ProjectName=Meu1oARM
ProjectStaticFilesGenerationMode=STANDALONE
SdkBuildVersionValue=1.3.0
SdkCdtProjectVariable=C:\Freescale\KSDK_1.3.0
SdkRepositoryId=KSDK130
SdkRepositoryName=KSDK 1.3.0
SdkSourceFilesDirectory=C:\Freescale\KSDK_1.3.0
SdkVersionValue=1.3.0
SdkVersionValue_os_FreeRTOS=8.2.0
SdkVersionValue_os_mqx=1.2.0
SdkVersionValue_os_uCOSII=1.0.0
SdkVersionValue_os_uCOSIII=1.0.0
ServerDir_PE=C:\Freescale\KDS_v3\eclipse\ProcessorExpert\
SetHighSpeedMode=
SupportedCPUfamily=
TimeStamp=2022-02-21, 12:52, # CodeGen: 138
Xtal_kHz=4000
Xtal_kHz_real=4000
ivINT_PendableSrvReq=vPortPendSVHandler
ivINT_SVCall=vPortSVCHandler
ivINT_SysTick=vPortTickHandler
virtual_ADC0_TotalConversionPrescalerAddr=1073983496
virtual_ADC0_TotalConversionPrescalerReg=ADC0_CFG1
virtual_ADC1_TotalConversionPrescalerAddr=1074507784
virtual_ADC1_TotalConversionPrescalerReg=ADC1_CFG1

 DEPRECATED GLOBAL SYMBOLS (alphabet order)
-------------------------------------------
CPU=MK64FX512VLL12
CPU_Expert=05.21
DirRel_DriverToEvents=
DirRel_Drivers=Generated_Code\
DirRel_EventToDrivers=..\Generated_Code\
DirRel_GeneratedCode=Generated_Code
DirRel_Sources=Sources
Dir_Binary=C:\Users\89247469\workspace.kds\Meu1oARM\Sources\
Dir_Drivers=C:\Users\89247469\workspace.kds\Meu1oARM\Generated_Code\
Dir_Events=C:\Users\89247469\workspace.kds\Meu1oARM\Sources\
Dir_PE=C:\Freescale\KDS_v3\eclipse\ProcessorExpert\
Dir_Project=C:\Users\89247469\workspace.kds\Meu1oARM\
ProjectModule=main

 GLOBAL LISTS (alphabet order)
-------------------------------------------
ADC0AsynchroClock=[1]
ADC0AsynchroClock_Setting=[ADC0Async_FullPower_HighSpeed]
ADC0BusClock=[1]
ADC0BusClock_Setting=[1]
ADC0ClkSel=[1]
ADC0ClkSel_Setting=[ADC0BusClock]
ADC1AsynchroClock=[1]
ADC1AsynchroClock_Setting=[ADC1Async_FullPower_HighSpeed]
ADC1BusClock=[1]
ADC1BusClock_Setting=[1]
ADC1ClkSel=[1]
ADC1ClkSel_Setting=[ADC1BusClock]
CAN0ClkSel=[1]
CAN0ClkSel_Setting=[CAN0BusClk]
CMTPresc=[1]
CMTPresc_Setting=[1]
CMTPrimaryPresc=[1]
CMTPrimaryPresc_Setting=[1]
ERCLK32KSel=[1]
ERCLK32KSel_Setting=[RTC_OSC]
EWMClkSel=[1]
EWMClkSel_Setting=[LPO_1kHzSrc]
EventModuleList=[Events]
FTM0ClkSource=[1]
FTM0ClkSource_Setting=[OUTDIV2Presc]
FTM1ClkSource=[1]
FTM1ClkSource_Setting=[OUTDIV2Presc]
FTM2ClkSource=[1]
FTM2ClkSource_Setting=[OUTDIV2Presc]
FTM3ClkSource=[1]
FTM3ClkSource_Setting=[OUTDIV2Presc]
I2C0_LoTimeoutClkSel=[1]
I2C0_LoTimeoutClkSel_Setting=[I2C0_LoTimeout_BusClkDiv64]
I2C0_MULT=[1]
I2C0_MULT_Setting=[1]
I2C1_LoTimeoutClkSel=[1]
I2C1_LoTimeoutClkSel_Setting=[I2C1_LoTimeout_BusClkDiv64]
I2C1_MULT=[1]
I2C1_MULT_Setting=[1]
I2C2_LoTimeoutClkSel=[1]
I2C2_LoTimeoutClkSel_Setting=[I2C2_LoTimeout_BusClkDiv64]
I2C2_MULT=[1]
I2C2_MULT_Setting=[1]
I2S0_ClkSel=[1]
I2S0_ClkSel_Setting=[OUTDIV1Presc]
I2S0_MclkClkSel=[1]
I2S0_MclkClkSel_Setting=[I2S0_MclkFrac]
I2S0_MclkDiv=[250]
I2S0_MclkDiv_Setting=[250]
I2S0_MclkFrac=[1]
I2S0_MclkFrac_Setting=[1]
I2S0_MclkPinSource_Setting=[I2S0_MclkFrac]
I2S0_RxClkSource=[1]
I2S0_RxClkSource_Setting=[OUTDIV2Presc]
I2S0_TxClkSource=[1]
I2S0_TxClkSource_Setting=[OUTDIV2Presc]
IRCLKSel=[1]
IRCLKSel_Setting=[IRC_32kHz]
IncludeSharedModules=[fsl_device_registers]
InstructionClock=[undef]
IntEnableList=[IntInstall]
LPTMR0_ClockSelect=[1]
LPTMR0_ClockSelect_Setting=[ERCLK32K]
MCGOUTSel=[1]
MCGOUTSel_Setting=[MCGPLLCLK]
MCG_ERCLKSel=[1]
MCG_ERCLKSel_Setting=[SYSTEM_OSC]
MCG_FLL_MFactor=[640]
MCG_FLL_MFactor_Setting=[640]
MCG_FLL_RCLKSel=[1]
MCG_FLL_RCLKSel_Setting=[MCG_FRDIV]
MCG_FRDIV=[1536]
MCG_FRDIV_Setting=[1536]
MCG_PRDIV=[20]
MCG_PRDIV_Setting=[20]
MCG_VDIV=[48]
MCG_VDIV_Setting=[48]
ModuleList=[adConv1|adConv2|clockMan1|eNet1|osa1|gpio1|memoryCard1|fsl_sdhc1|pin_mux|pitTimer1|pitTimer2|pitTimer3|pitTimer4|FRTOS1|UTIL1|KSDK1]
OUTDIV1Presc=[1]
OUTDIV1Presc_Setting=[1]
OUTDIV2Presc=[2]
OUTDIV2Presc_Setting=[2]
OUTDIV3Presc=[3]
OUTDIV3Presc_Setting=[3]
OUTDIV4Presc=[5]
OUTDIV4Presc_Setting=[5]
PEG_IncludeSharedModules=[#include "fsl_mcg_hal.h"|#include "fsl_sim_hal.h"|#include "fsl_osc_hal.h"|#include "fsl_rtc_hal.h"|#include "fsl_clock_manager.h"|#include "fsl_interrupt_manager.h"|#include "fsl_adc16_hal.h"|#include "fsl_adc16_driver.h"|#include "fsl_enet_hal.h"|#include "fsl_enet_driver.h"|#include "fsl_os_abstraction.h"|#include "osa1.h"|#include "fsl_gpio_hal.h"|#include "fsl_port_hal.h"|#include "fsl_gpio_driver.h"|#include "fsl_sdhc_hal.h"|#include "fsl_sdhc_driver.h"|#include "fsl_sdhc_card.h"|#include "fsl_pit_hal.h"|#include "fsl_pit_driver.h"]
PE_G_4PEx_ToolChain_Asm_Defines=["FSL_OSA_BM_TIMER_CONFIG=2"]
PE_G_4PEx_ToolChain_CompilerCpp_Defines=["FSL_OSA_BM_TIMER_CONFIG=2"]
PE_G_4PEx_ToolChain_CompilerCpp_SearchUserPaths=["${ProjDirPath}/SDK/platform/hal/inc"|"${ProjDirPath}/SDK/platform/hal/inc"|"${ProjDirPath}/SDK/platform/hal/src/sim/MK64F12"|"${ProjDirPath}/SDK/platform/hal/inc"|"${ProjDirPath}/SDK/platform/hal/inc"|"${ProjDirPath}/SDK/platform/system/src/clock/MK64F12"|"${ProjDirPath}/SDK/platform/system/inc"|"${ProjDirPath}/SDK/platform/system/src/clock/MK64F12"|"${ProjDirPath}/SDK/platform/system/inc"|"${ProjDirPath}/SDK/platform/system/inc"|"${ProjDirPath}/SDK/platform/hal/inc"|"${ProjDirPath}/SDK/platform/drivers/inc"|"${ProjDirPath}/SDK/platform/hal/inc"|"${ProjDirPath}/SDK/platform/drivers/inc"|"${ProjDirPath}/SDK/platform/hal/inc"|"${ProjDirPath}/SDK/platform/drivers/inc"|"${ProjDirPath}/SDK/platform/osa/inc"|"${ProjDirPath}/SDK/platform/osa/inc"|"${ProjDirPath}/SDK/platform/hal/inc"|"${ProjDirPath}/SDK/platform/hal/inc"|"${ProjDirPath}/SDK/platform/drivers/inc"|"${ProjDirPath}/SDK/platform/hal/inc"|"${ProjDirPath}/SDK/platform/drivers/inc"|"${ProjDirPath}/SDK/platform/composite/inc"|"${ProjDirPath}/SDK/platform/composite/inc"|"${ProjDirPath}/SDK/platform/hal/inc"|"${ProjDirPath}/SDK/platform/hal/inc"|"${ProjDirPath}/SDK/platform/hal/src/sim/MK64F12"|"${ProjDirPath}/SDK/platform/hal/inc"|"${ProjDirPath}/SDK/platform/hal/inc"|"${ProjDirPath}/SDK/platform/drivers/inc"|"${ProjDirPath}/SDK/platform/hal/inc"|"${ProjDirPath}/SDK/platform/drivers/inc"|"${ProjDirPath}/SDK/platform/hal/inc"|"${ProjDirPath}/SDK/platform/drivers/inc"|"${ProjDirPath}/SDK/platform/hal/inc"|"${ProjDirPath}/SDK/platform/drivers/inc"]
PE_G_4PEx_ToolChain_Compiler_Defines=["FSL_OSA_BM_TIMER_CONFIG=2"]
PE_G_4PEx_ToolChain_Compiler_SearchUserPaths=["${ProjDirPath}/SDK/platform/hal/inc"|"${ProjDirPath}/SDK/platform/hal/inc"|"${ProjDirPath}/SDK/platform/hal/src/sim/MK64F12"|"${ProjDirPath}/SDK/platform/hal/inc"|"${ProjDirPath}/SDK/platform/hal/inc"|"${ProjDirPath}/SDK/platform/system/src/clock/MK64F12"|"${ProjDirPath}/SDK/platform/system/inc"|"${ProjDirPath}/SDK/platform/system/src/clock/MK64F12"|"${ProjDirPath}/SDK/platform/system/inc"|"${ProjDirPath}/SDK/platform/system/inc"|"${ProjDirPath}/SDK/platform/hal/inc"|"${ProjDirPath}/SDK/platform/drivers/inc"|"${ProjDirPath}/SDK/platform/hal/inc"|"${ProjDirPath}/SDK/platform/drivers/inc"|"${ProjDirPath}/SDK/platform/hal/inc"|"${ProjDirPath}/SDK/platform/drivers/inc"|"${ProjDirPath}/SDK/platform/osa/inc"|"${ProjDirPath}/SDK/platform/osa/inc"|"${ProjDirPath}/SDK/platform/hal/inc"|"${ProjDirPath}/SDK/platform/hal/inc"|"${ProjDirPath}/SDK/platform/drivers/inc"|"${ProjDirPath}/SDK/platform/hal/inc"|"${ProjDirPath}/SDK/platform/drivers/inc"|"${ProjDirPath}/SDK/platform/composite/inc"|"${ProjDirPath}/SDK/platform/composite/inc"|"${ProjDirPath}/SDK/platform/hal/inc"|"${ProjDirPath}/SDK/platform/hal/inc"|"${ProjDirPath}/SDK/platform/hal/src/sim/MK64F12"|"${ProjDirPath}/SDK/platform/hal/inc"|"${ProjDirPath}/SDK/platform/hal/inc"|"${ProjDirPath}/SDK/platform/drivers/inc"|"${ProjDirPath}/SDK/platform/hal/inc"|"${ProjDirPath}/SDK/platform/drivers/inc"|"${ProjDirPath}/SDK/platform/hal/inc"|"${ProjDirPath}/SDK/platform/drivers/inc"|"${ProjDirPath}/SDK/platform/hal/inc"|"${ProjDirPath}/SDK/platform/drivers/inc"]
PE_G_CPU_DoxyGenModules=[MPU|PORTE]
PE_G_CPU_Doxygen_RegsTouchedByPeriph_MCG=[RTC_CR|SMC_PMPROT|MCG_C1|MCG_C2|MCG_C4|MCG_SC|MCG_C5|MCG_C6|MCG_C7|OSC_CR|SMC_PMCTRL|SIM_CLKDIV1|SIM_CLKDIV2|SIM_SOPT1|SIM_SOPT2]
PE_G_CPU_Doxygen_RegsTouchedByPeriph_MPU=[MPU_CESR]
PE_G_CPU_Doxygen_RegsTouchedByPeriph_PORTE=[PORTE_PCR0|PORTE_PCR1|PORTE_PCR2|PORTE_PCR3|PORTE_PCR4|PORTE_PCR5]
PE_G_CRI_PinSettings_MergedWrite_ENET_RegList32=[PORTC_PCR16|PORTC_PCR17|PORTC_PCR18|PORTB_PCR1|PORTB_PCR0|PORTA_PCR13|PORTA_PCR12|PORTA_PCR14|PORTA_PCR5|PORTA_PCR16|PORTA_PCR17|PORTA_PCR15|PORTA_PCR18]
PE_G_CRI_PinSettings_MergedWrite_ENET_inited=[PORTC_PCR16|PORTC_PCR17|PORTC_PCR18|PORTB_PCR1|PORTB_PCR0|PORTA_PCR13|PORTA_PCR12|PORTA_PCR14|PORTA_PCR5|PORTA_PCR16|PORTA_PCR17|PORTA_PCR15|PORTA_PCR18]
PE_G_CRI_PinSettings_MergedWrite_JTAG_RegList32=[PORTA_PCR0|PORTA_PCR1|PORTA_PCR2|PORTA_PCR3]
PE_G_CRI_PinSettings_MergedWrite_JTAG_inited=[PORTA_PCR0|PORTA_PCR1|PORTA_PCR2|PORTA_PCR3]
PE_G_CRI_PinSettings_MergedWrite_LLWU_RegList32=[PORTD_PCR0|PORTD_PCR2|PORTD_PCR4]
PE_G_CRI_PinSettings_MergedWrite_LLWU_inited=[PORTD_PCR0|PORTD_PCR2|PORTD_PCR4]
PE_G_CRI_PinSettings_MergedWrite_OSC_RegList32=[PORTA_PCR18]
PE_G_CRI_PinSettings_MergedWrite_OSC_inited=[PORTA_PCR18]
PE_G_CRI_PinSettings_MergedWrite_PTB_RegList32=[PORTB_PCR2|PORTB_PCR3|PORTB_PCR10|PORTB_PCR18|PORTB_PCR19|PORTB_PCR23]
PE_G_CRI_PinSettings_MergedWrite_PTB_inited=[PORTB_PCR2|PORTB_PCR3|PORTB_PCR10|PORTB_PCR18|PORTB_PCR19|PORTB_PCR23]
PE_G_CRI_PinSettings_MergedWrite_PTC_RegList32=[PORTC_PCR8]
PE_G_CRI_PinSettings_MergedWrite_PTC_inited=[PORTC_PCR8]
PE_G_CRI_PinSettings_MergedWrite_PTD_RegList32=[PORTD_PCR0|PORTD_PCR2|PORTD_PCR4|PORTD_PCR5]
PE_G_CRI_PinSettings_MergedWrite_PTD_inited=[PORTD_PCR0|PORTD_PCR2|PORTD_PCR4|PORTD_PCR5]
PE_G_CRI_PinSettings_MergedWrite_PTE_RegList32=[PORTE_PCR6|PORTE_PCR24|PORTE_PCR25|PORTE_PCR26]
PE_G_CRI_PinSettings_MergedWrite_PTE_inited=[PORTE_PCR6|PORTE_PCR24|PORTE_PCR25|PORTE_PCR26]
PE_G_CRI_PinSettings_MergedWrite_SDHC_RegList32=[PORTE_PCR3|PORTE_PCR1|PORTE_PCR0|PORTE_PCR5|PORTE_PCR4|PORTE_PCR2]
PE_G_CRI_PinSettings_MergedWrite_SDHC_inited=[PORTE_PCR3|PORTE_PCR1|PORTE_PCR0|PORTE_PCR5|PORTE_PCR4|PORTE_PCR2]
PE_G_CRI_PinSettings_MergedWrite_TPIU_RegList32=[PORTA_PCR2]
PE_G_CRI_PinSettings_MergedWrite_TPIU_inited=[PORTA_PCR2]
PE_G_FSL_PIT_COMP_LIST=[pitTimer1|pitTimer2|pitTimer3|pitTimer4]
PExProducts=[]
PLLFLLSel=[1]
PLLFLLSel_Setting=[MCGPLLCLK]
RTC_ClkSel=[1]
RTC_ClkSel_Setting=[RTC_OSC]
SDHC_ClkSel=[1]
SDHC_ClkSel_Setting=[OUTDIV1Presc]
SdkComponentSourceCompilers_os_FreeRTOS=[|gcc|gcc|gcc|iar|iar|iar|arm|arm|arm|]
SdkComponentSourceCompilers_os_mqx=[iar|||||||||||||||gcc|arm|iar|||iar||||||||||||||gcc|gcc|arm|arm||]
SdkComponentSourceCompilers_os_uCOSII=[||gcc|gcc|gcc|iar|iar|iar|arm|arm|arm|gcc|gcc|gcc|iar|iar|iar|arm|arm|arm|||iar|arm|gcc|gcc|gcc|iar|iar|iar|arm|arm|arm|gcc|gcc|gcc|iar|iar|iar|arm|arm|arm||]
SdkComponentSourceCompilers_os_uCOSIII=[||gcc|gcc|gcc|iar|iar|iar|arm|arm|arm|gcc|gcc|gcc|iar|iar|iar|arm|arm|arm|||gcc|iar|arm|gcc|gcc|gcc|iar|iar|iar|arm|arm|arm|gcc|gcc|gcc|iar|iar|iar|arm|arm|arm||]
SdkComponentSourceCores_os_mqx=[|cm4|cm4||||||||||||||||||||||||||||||||||||cm0plus|cm0plus]
SdkComponentSourceCores_os_uCOSII=[||cm0plus|cm0plus|cm0plus|cm0plus|cm0plus|cm0plus|cm0plus|cm0plus|cm0plus|cm4|cm4|cm4|cm4|cm4|cm4|cm4|cm4|cm4|||cm4|cm4|cm0plus|cm0plus|cm0plus|cm0plus|cm0plus|cm0plus|cm0plus|cm0plus|cm0plus|cm4|cm4|cm4|cm4|cm4|cm4|cm4|cm4|cm4||]
SdkComponentSourceCores_os_uCOSIII=[||cm0plus|cm0plus|cm0plus|cm0plus|cm0plus|cm0plus|cm0plus|cm0plus|cm0plus|cm4|cm4|cm4|cm4|cm4|cm4|cm4|cm4|cm4|||cm4|cm4|cm4|cm0plus|cm0plus|cm0plus|cm0plus|cm0plus|cm0plus|cm0plus|cm0plus|cm0plus|cm4|cm4|cm4|cm4|cm4|cm4|cm4|cm4|cm4||]
SdkComponentSourceFiles_CMSIS_Include=[*$|core|*.h|*cmSimd.h|*cmFunc.h|*cmInstr.h|arm*.h|fsl_device_registers.h|*.h]
SdkComponentSourceFiles_driver_adc16=[*common*.c|*driver*.c|*irq*.c|fsl_adc16_*.h]
SdkComponentSourceFiles_driver_afe=[*common*.c|*driver*.c|*irq*.c|fsl_afe_*.h]
SdkComponentSourceFiles_driver_aoi=[*common*.c|*driver*.c|fsl_aoi_*.h]
SdkComponentSourceFiles_driver_cadc=[*common*.c|*driver*.c|fsl_cadc_*.h]
SdkComponentSourceFiles_driver_clock_manager=[*manager*.c|*.c|*common*.c|*common*.c|*.h|fsl_clock_*.h]
SdkComponentSourceFiles_driver_cmp=[*common*.c|*driver*.c|*irq*.c|fsl_cmp_*.h]
SdkComponentSourceFiles_driver_cmt=[*common*.c|*driver*.c|*irq*.c|fsl_cmt_*.h]
SdkComponentSourceFiles_driver_cop=[*common*.c|*driver*.c|fsl_cop_*.h]
SdkComponentSourceFiles_driver_crc=[*common*.c|*driver*.c|fsl_crc_*.h]
SdkComponentSourceFiles_driver_dac=[*common*.c|*driver*.c|*irq*.c|fsl_dac_*.h]
SdkComponentSourceFiles_driver_dma=[*common*.c|*driver*.c|*irq*.c|fsl_dma_*.h]
SdkComponentSourceFiles_driver_dspi=[fsl_dspi_edma_master_driver.c|fsl_dspi_common.c|fsl_dspi_edma_slave_driver.c|fsl_dspi_edma_shared_function.c|fsl_dspi_edma_master_driver.h|fsl_dspi_edma_slave_driver.h|fsl_dspi_edma_shared_function.h|fsl_dspi_dma_master_driver.c|fsl_dspi_common.c|fsl_dspi_dma_slave_driver.c|fsl_dspi_dma_master_driver.h|fsl_dspi_dma_slave_driver.h|fsl_dspi_common.c|fsl_dspi_master_driver.c|fsl_dspi_shared_function.c|fsl_dspi_slave_driver.c|fsl_dspi_shared_function.h|fsl_dspi_master_driver.h|fsl_dspi_slave_driver.h]
SdkComponentSourceFiles_driver_edma=[*common*.c|*driver*.c|*irq*.c|fsl_edma_*.h]
SdkComponentSourceFiles_driver_enc=[*common*.c|*driver*.c|*irq*.c|fsl_enc_*.h]
SdkComponentSourceFiles_driver_enet=[*common*.c|*driver*.c|*irq*.c|fsl_enet_*.h]
SdkComponentSourceFiles_driver_ewm=[*common*.c|*driver*.c|*irq*.c|fsl_ewm_*.h]
SdkComponentSourceFiles_driver_flexbus=[*common*.c|*driver*.c|fsl_flexbus_*.h]
SdkComponentSourceFiles_driver_flexcan=[*common*.c|*driver*.c|*irq*.c|fsl_flexcan_*.h]
SdkComponentSourceFiles_driver_flexio=[*common*.c|*flexio_driver.c|*i2s_driver.c|*spi_driver.c|*i2c_master_driver.c|*irq*.c|fsl_flexio_driver.h|fsl_flexio*uart_share.h|fsl_flexio*i2s_driver.h|fsl_flexio*spi_driver.h|fsl_flexio*i2c_master_driver.h|fsl_flexio*uart_dma_driver.h|fsl_flexio*uart_edma_driver.h|*uart_dma_driver.c|*uart_edma_driver.c|fsl_flexio*uart_driver.h|*uart_driver.c]
SdkComponentSourceFiles_driver_ftm=[*common*.c|*driver*.c|*irq*.c|fsl_ftm_*.h]
SdkComponentSourceFiles_driver_gpio=[*common*.c|*driver*.c|*irq*.c|fsl_gpio_*.h]
SdkComponentSourceFiles_driver_hwtimer=[fsl_hwtimer.c|fsl_hwtimer_systick.c|fsl_hwtimer.h|fsl_hwtimer_systick.h|fsl_hwtimer.c|fsl_hwtimer_pit.c|*common*.c|fsl_hwtimer.h|fsl_hwtimer_pit.h]
SdkComponentSourceFiles_driver_i2c=[*common*.c|*driver*.c|*function*.c|*irq*.c|fsl_i2c_*.h]
SdkComponentSourceFiles_driver_interrupt_manager=[fsl_interrupt_manager*.c|fsl_interrupt_*.h]
SdkComponentSourceFiles_driver_irtc=[*common*.c|*driver*.c|*irq*.c|fsl_irtc_*.h]
SdkComponentSourceFiles_driver_lmem_cache=[*.c|fsl_lmem_cache_driver.h]
SdkComponentSourceFiles_driver_lpsci=[fsl_lpsci_common.c|fsl_lpsci_dma_driver.c|fsl_lpsci_dma_driver.h|fsl_lpsci_common.c|fsl_lpsci_driver.c|fsl_lpsci_driver.h]
SdkComponentSourceFiles_driver_lptmr=[*common*.c|*driver*.c|*irq*.c|fsl_lptmr_*.h]
SdkComponentSourceFiles_driver_lpuart=[fsl_lpuart_common.c|fsl_lpuart_edma_driver.c|fsl_lpuart_edma_driver.h|fsl_lpuart_common.c|fsl_lpuart_dma_driver.c|fsl_lpuart_dma_driver.h|fsl_lpuart_common.c|fsl_lpuart_driver.c|fsl_lpuart_driver.h]
SdkComponentSourceFiles_driver_ltc=[*common*.c|*driver*.c|*irq*.c|fsl_ltc_*.h]
SdkComponentSourceFiles_driver_mmau=[*common*.c|*driver*.c|*irq*.c|fsl_mmau_*.h]
SdkComponentSourceFiles_driver_mpu=[*common*.c|*driver*.c|*irq*.c|fsl_mpu_*.h]
SdkComponentSourceFiles_driver_os_abstraction=[fsl_os_abstraction_mqx.c|fsl_os_abstraction.h|fsl_os_abstraction_mqx.h|fsl_os_abstraction_free_rtos.c|fsl_os_abstraction.h|fsl_os_abstraction_free_rtos.h|fsl_os_abstraction_ucosii.c|fsl_os_abstraction.h|fsl_os_abstraction_ucosii.h|fsl_os_abstraction_ucosiii.c|fsl_os_abstraction.h|fsl_os_abstraction_ucosiii.h|fsl_os_abstraction_bm.c|fsl_os_abstraction.h|fsl_os_abstraction_bm.h]
SdkComponentSourceFiles_driver_pdb=[*common*.c|*driver*.c|*irq*.c|fsl_pdb_*.h]
SdkComponentSourceFiles_driver_pit=[*common*.c|*driver*.c|*irq*.c|fsl_pit_*.h]
SdkComponentSourceFiles_driver_power_manager=[fsl_power_manager.c|fsl_power_manager_common.h|fsl_power_manager.h]
SdkComponentSourceFiles_driver_pwm=[*common*.c|*driver*.c|*irq*.c|fsl_pwm_*.h]
SdkComponentSourceFiles_driver_qspi=[*common*.c|*driver*.c|*irq*.c|fsl_qspi_*.h]
SdkComponentSourceFiles_driver_quadtmr=[*common*.c|*driver*.c|*irq*.c|fsl_quadtmr_*.h]
SdkComponentSourceFiles_driver_rnga=[*common*.c|*driver*.c|*irq*.c|fsl_rnga_*.h]
SdkComponentSourceFiles_driver_rtc=[*common*.c|*driver*.c|*irq*.c|fsl_rtc_*.h]
SdkComponentSourceFiles_driver_sai=[*common*.c|*driver*.c|*irq*.c|fsl_sai_*.h]
SdkComponentSourceFiles_driver_sdhc=[*common*.c|*driver*.c|fsl_sdhc*.h|*irq*.c]
SdkComponentSourceFiles_driver_sdramc=[*common*.c|*driver*.c|fsl_sdramc_*.h]
SdkComponentSourceFiles_driver_slcd=[*common*.c|*driver*.c|*irq*.c|fsl_slcd_*.h]
SdkComponentSourceFiles_driver_smartcard=[*common*.c|*driver*.c|*driver*.c|*driver*.h|*irq*.c|fsl_smartcard_*.h]
SdkComponentSourceFiles_driver_spi=[fsl_spi_dma_master_driver.c|fsl_spi_common.c|fsl_spi_dma_slave_driver.c|fsl_spi_dma_shared_function.c|fsl_spi_dma_master_driver.h|fsl_spi_dma_slave_driver.h|fsl_spi_dma_shared_function.h|fsl_spi_common.c|fsl_spi_master_driver.c|fsl_spi_shared_function.c|fsl_spi_slave_driver.c|fsl_spi_shared_function.h|fsl_spi_master_driver.h|fsl_spi_slave_driver.h]
SdkComponentSourceFiles_driver_tpm=[*common*.c|*driver*.c|*irq*.c|fsl_tpm_*.h]
SdkComponentSourceFiles_driver_trng=[*common*.c|*driver*.c|*irq*.c|fsl_trng_*.h]
SdkComponentSourceFiles_driver_tsi=[fsl_tsi_common.c|fsl_tsi_driver.c|fsl_tsi_driver.h|fsl_tsi_v2_driver_specific.c|fsl_tsi_v4_driver_specific.c]
SdkComponentSourceFiles_driver_uart=[fsl_uart_common.c|fsl_uart_edma_driver.c|fsl_uart_edma_driver.h|fsl_uart_common.c|fsl_uart_dma_driver.c|fsl_uart_dma_driver.h|fsl_uart_common.c|fsl_uart_driver.c|fsl_uart_driver.h]
SdkComponentSourceFiles_driver_vref=[*common*.c|*driver*.c|fsl_vref_*.h]
SdkComponentSourceFiles_driver_wdog=[*common*.c|*driver*.c|*irq*.c|fsl_wdog_*.h]
SdkComponentSourceFiles_driver_xbar=[*common*.c|*driver*.c|*irq*.c|fsl_xbar_*.h]
SdkComponentSourceFiles_hal_adc16=[fsl_adc16_*.c|fsl_adc16_*.h]
SdkComponentSourceFiles_hal_afe=[fsl_afe_*.c|fsl_afe_*.h]
SdkComponentSourceFiles_hal_aoi=[fsl_aoi_*.c|fsl_aoi_*.h]
SdkComponentSourceFiles_hal_cadc=[fsl_cadc_*.c|fsl_cadc_*.h]
SdkComponentSourceFiles_hal_cmp=[fsl_cmp_*.c|fsl_cmp_*.h]
SdkComponentSourceFiles_hal_cmt=[fsl_cmt_*.c|fsl_cmt_*.h]
SdkComponentSourceFiles_hal_cop=[fsl_cop_*.c|fsl_cop_*.h]
SdkComponentSourceFiles_hal_crc=[fsl_crc_*.c|fsl_crc_*.h]
SdkComponentSourceFiles_hal_dac=[fsl_dac_*.c|fsl_dac_*.h]
SdkComponentSourceFiles_hal_dma=[fsl_dma_*.c|fsl_dma_*.h]
SdkComponentSourceFiles_hal_dmamux=[fsl_dmamux_*.c|fsl_dmamux_*.h]
SdkComponentSourceFiles_hal_dspi=[fsl_dspi_*.c|fsl_dspi_*.h]
SdkComponentSourceFiles_hal_edma=[fsl_edma_*.c|fsl_edma_*.h]
SdkComponentSourceFiles_hal_emvsim=[fsl_emvsim_*.c|fsl_emvsim_*.h]
SdkComponentSourceFiles_hal_enc=[fsl_enc_*.c|fsl_enc_*.h]
SdkComponentSourceFiles_hal_enet=[fsl_enet_*.c|fsl_enet_*.h]
SdkComponentSourceFiles_hal_ewm=[fsl_ewm_*.c|fsl_ewm_*.h]
SdkComponentSourceFiles_hal_flexbus=[fsl_flexbus_*.c|fsl_flexbus_*.h]
SdkComponentSourceFiles_hal_flexcan=[fsl_flexcan_*.c|fsl_flexcan_*.h]
SdkComponentSourceFiles_hal_flexio=[fsl_flexio_*.c|fsl_flexio_*.h]
SdkComponentSourceFiles_hal_ftm=[fsl_ftm_*.c|fsl_ftm_*.h]
SdkComponentSourceFiles_hal_gpio=[fsl_gpio_*.c|fsl_gpio_*.h]
SdkComponentSourceFiles_hal_i2c=[fsl_i2c_*.c|fsl_i2c_*.h|fsl_misc_utilities.h]
SdkComponentSourceFiles_hal_irtc=[fsl_irtc_*.c|fsl_irtc_*.h]
SdkComponentSourceFiles_hal_llwu=[fsl_llwu_*.c|fsl_llwu_*.h]
SdkComponentSourceFiles_hal_lmem_cache=[fsl_lmem_cache_hal.c|fsl_lmem_cache_hal.h]
SdkComponentSourceFiles_hal_lpsci=[fsl_lpsci_*.c|fsl_lpsci_*.h]
SdkComponentSourceFiles_hal_lptmr=[fsl_lptmr_*.c|fsl_lptmr_*.h]
SdkComponentSourceFiles_hal_lpuart=[fsl_lpuart_*.c|fsl_lpuart_*.h]
SdkComponentSourceFiles_hal_ltc=[fsl_ltc_*.c|fsl_ltc_*.h]
SdkComponentSourceFiles_hal_mcg=[fsl_mcg_*.c|fsl_mcg_*.h]
SdkComponentSourceFiles_hal_mcglite=[fsl_mcglite_*.c|fsl_mcglite_*.h]
SdkComponentSourceFiles_hal_mmau=[fsl_mmau_*.c|fsl_mmau_*.h]
SdkComponentSourceFiles_hal_mmdvsq=[fsl_mmdvsq_*.c|fsl_mmdvsq_*.h]
SdkComponentSourceFiles_hal_mpu=[fsl_mpu_*.c|fsl_mpu_*.h]
SdkComponentSourceFiles_hal_osc=[fsl_osc_*.c|fsl_osc_*.h]
SdkComponentSourceFiles_hal_pdb=[fsl_pdb_*.c|fsl_pdb_*.h]
SdkComponentSourceFiles_hal_pit=[fsl_pit_*.c|fsl_pit_*.h]
SdkComponentSourceFiles_hal_pmc=[fsl_pmc_*.h]
SdkComponentSourceFiles_hal_port=[fsl_port_*.c|fsl_port_*.h]
SdkComponentSourceFiles_hal_pwm=[fsl_pwm_*.c|fsl_pwm_*.h]
SdkComponentSourceFiles_hal_qspi=[fsl_qspi_*.c|fsl_qspi_*.h]
SdkComponentSourceFiles_hal_quadtmr=[fsl_quadtmr_*.c|fsl_quadtmr_*.h]
SdkComponentSourceFiles_hal_rcm=[fsl_rcm_*.c|fsl_rcm_*.h]
SdkComponentSourceFiles_hal_rnga=[fsl_rnga_*.c|fsl_rnga_*.h]
SdkComponentSourceFiles_hal_rtc=[fsl_rtc_*.c|fsl_rtc_*.h]
SdkComponentSourceFiles_hal_sai=[fsl_sai_*.c|fsl_sai_*.h]
SdkComponentSourceFiles_hal_sdhc=[fsl_sdhc_*.c|fsl_sdhc_*.h]
SdkComponentSourceFiles_hal_sdramc=[fsl_sdramc_*.c|fsl_sdramc_*.h]
SdkComponentSourceFiles_hal_sim=[fsl_sim_*.h|*.c|*.h]
SdkComponentSourceFiles_hal_slcd=[fsl_slcd_*.c|fsl_slcd_*.h]
SdkComponentSourceFiles_hal_smc=[fsl_smc_*.c|fsl_smc_*.h]
SdkComponentSourceFiles_hal_spi=[fsl_spi_*.c|fsl_spi_*.h]
SdkComponentSourceFiles_hal_tpm=[fsl_tpm_*.c|fsl_tpm_*.h]
SdkComponentSourceFiles_hal_trng=[fsl_trng_*.c|fsl_trng_*.h]
SdkComponentSourceFiles_hal_tsi=[fsl_tsi_hal.h|fsl_tsi_hal.c|fsl_tsi_v2*.h|fsl_tsi_v2*.c|fsl_tsi_v4*.h|fsl_tsi_v4*.c]
SdkComponentSourceFiles_hal_uart=[fsl_uart_*.c|fsl_uart_*.h]
SdkComponentSourceFiles_hal_vref=[fsl_vref_*.c|fsl_vref_*.h]
SdkComponentSourceFiles_hal_wdog=[fsl_wdog_*.c|fsl_wdog_*.h]
SdkComponentSourceFiles_hal_xbar=[fsl_xbar_*.c|fsl_xbar_*.h]
SdkComponentSourceFiles_linker_linker=[$|device_full_name|_flash.*|$|device_full_name|_ram.*]
SdkComponentSourceFiles_os_FreeRTOS=[*.h|*.S|*.c|*.h|*.s|*.c|*.h|*.S|*.c|*.h|*.c]
SdkComponentSourceFiles_os_mqx=[*.c|*.inc|*.S|*.inc|*.c|*.c|init_bsp.c|*.c|*.c|*.c|*.c|*.c|*.c|*.c|*.c|*.c|*.c|*.h|*.h|*.h|*.h|*.h|*.h|*.h|*.h|*.h|*.h|*.h|*.h|*.h|*.h|*.h|*.h|*.h|*.h|*.h|*.h|*.h|*.inc|*.S]
SdkComponentSourceFiles_os_uCOSII=[*.c|*.h|*.S|*.c|*.h|*.asm|*.c|*.h|*.s|*.c|*.h|*.S|*.c|*.h|*.asm|*.c|*.h|*.s|*.c|*.h|*.c|*.h|*.asm|*.s|*.S|*.c|*.h|*.asm|*.c|*.h|*.s|*.c|*.h|*.S|*.c|*.h|*.asm|*.c|*.h|*.s|*.c|*.h|*.c|*.h]
SdkComponentSourceFiles_os_uCOSIII=[*.c|*.h|*.S|*.c|*.h|*.asm|*.c|*.h|*.s|*.c|*.h|*.S|*.c|*.h|*.asm|*.c|*.h|*.s|*.c|*.h|*.c|*.h|*.s|*.asm|*.s|*.S|*.c|*.h|*.asm|*.c|*.h|*.s|*.c|*.h|*.S|*.c|*.h|*.asm|*.c|*.h|*.s|*.c|*.h|*.c|*.h]
SdkComponentSourceFiles_other_debug_console=[fsl_debug_console.c|print_scan.c|print_scan.h|fsl_debug_console.h]
SdkComponentSourceFiles_other_flash=[CopyToRam.c|DEFlashPartition.c|DFlashGetProtection.c|DFlashSetProtection.c|EEEWrite.c|EERAMGetProtection.c|EERAMSetProtection.c|FlashCheckSum.c|FlashCommandSequence.c|FlashEraseAllBlock.c|FlashEraseBlock.c|FlashEraseResume.c|FlashEraseSector.c|FlashEraseSuspend.c|FlashGetSecurityState.c|FlashInit.c|FlashProgram.c|FlashProgramCheck.c|FlashProgramOnce.c|FlashProgramSection.c|FlashReadOnce.c|FlashReadResource.c|FlashSecurityBypass.c|FlashVerifyAllBlock.c|FlashVerifyBlock.c|FlashVerifySection.c|PFlashGetProtection.c|PFlashSetProtection.c|PFlashSwap.c|PFlashSwapCtl.c|SetEEEEnable.c|FTFx_KX_flash_config.h|SSD_FTFx.h|SSD_FTFx_Common.h|SSD_FTFx_Internal.h|SSD_Types.h]
SdkComponentSourceFiles_other_sdcard=[fsl_sdhc_card.c|fsl_sdhc_card.h|fsl_sdmmc_card.h|fsl_sdcard_spi.c|fsl_sdcard_spi.h|fsl_sdmmc_card.h]
SdkComponentSourceFiles_other_usb_descriptors=[usb_composite.h|usb_composite.c|usb_class_composite.h]
SdkComponentSourceFiles_other_usb_device_hid_class=[usb_class*.h|usb_class*.c|usb_hid*.h|usb_hid.c|usb_class.h|usb_class_hid.h]
SdkComponentSourceFiles_other_usb_device_msd_class=[usb_class*.h|usb_class*.c|usb_msc*.h|usb_msc*.c|usb_class.h|usb_class_msc.h]
SdkComponentSourceFiles_other_usb_ehci=[usb_ehci.h|fsl_usb_ehci_*.h]
SdkComponentSourceFiles_other_usb_framework=[adapter*.h|adapter_*.h|adapter_*.c|*.h|usb_device_stack_interface.h|*.c|*.h|*.c|*.h|*.c|*.h|usb_host_stack_interface.h|*.c|*.h|*.c|*.h|*.c|*.h|usb_host_hub_sm.h|usb_otg*.c|usb_otg*.h]
SdkComponentSourceFiles_other_usb_khci=[usb_error.h|fsl_usb_khci_*.h]
SdkComponentSourceFiles_startup_startup=[*.s|*.S|startup.h|startup.c|*.h|*.c]
SdkComponentSourcePaths_CMSIS_Include=[platform/CMSIS/Include|platform/CMSIS/Include|platform/CMSIS/Include|platform/CMSIS/Include|platform/CMSIS/Include|platform/devices|platform/devices/$|device|/include]
SdkComponentSourcePaths_driver_adc16=[platform/drivers/src/adc16|platform/drivers/src/adc16|platform/drivers/src/adc16|platform/drivers/inc]
SdkComponentSourcePaths_driver_afe=[platform/drivers/src/afe|platform/drivers/src/afe|platform/drivers/src/afe|platform/drivers/inc]
SdkComponentSourcePaths_driver_aoi=[platform/drivers/src/aoi|platform/drivers/src/aoi|platform/drivers/inc]
SdkComponentSourcePaths_driver_cadc=[platform/drivers/src/cyclicAdc|platform/drivers/src/cyclicAdc|platform/drivers/inc]
SdkComponentSourcePaths_driver_clock_manager=[platform/system/src/clock|platform/system/src/clock/$|device||platform/drivers/src/rtc|platform/drivers/src/irtc|platform/system/src/clock/$|device||platform/system/inc]
SdkComponentSourcePaths_driver_cmp=[platform/drivers/src/cmp|platform/drivers/src/cmp|platform/drivers/src/cmp|platform/drivers/inc]
SdkComponentSourcePaths_driver_cmt=[platform/drivers/src/cmt|platform/drivers/src/cmt|platform/drivers/src/cmt|platform/drivers/inc]
SdkComponentSourcePaths_driver_cop=[platform/drivers/src/cop|platform/drivers/src/cop|platform/drivers/inc]
SdkComponentSourcePaths_driver_crc=[platform/drivers/src/crc|platform/drivers/src/crc|platform/drivers/inc]
SdkComponentSourcePaths_driver_dac=[platform/drivers/src/dac|platform/drivers/src/dac|platform/drivers/src/dac|platform/drivers/inc]
SdkComponentSourcePaths_driver_dma=[platform/drivers/src/dma|platform/drivers/src/dma|platform/drivers/src/dma|platform/drivers/inc]
SdkComponentSourcePaths_driver_dspi=[platform/drivers/src/dspi|platform/drivers/src/dspi|platform/drivers/src/dspi|platform/drivers/src/dspi|platform/drivers/inc|platform/drivers/inc|platform/drivers/inc|platform/drivers/src/dspi|platform/drivers/src/dspi|platform/drivers/src/dspi|platform/drivers/inc|platform/drivers/inc|platform/drivers/src/dspi|platform/drivers/src/dspi|platform/drivers/src/dspi|platform/drivers/src/dspi|platform/drivers/inc|platform/drivers/inc|platform/drivers/inc]
SdkComponentSourcePaths_driver_edma=[platform/drivers/src/edma|platform/drivers/src/edma|platform/drivers/src/edma|platform/drivers/inc]
SdkComponentSourcePaths_driver_enc=[platform/drivers/src/enc|platform/drivers/src/enc|platform/drivers/src/enc|platform/drivers/inc]
SdkComponentSourcePaths_driver_enet=[platform/drivers/src/enet|platform/drivers/src/enet|platform/drivers/src/enet|platform/drivers/inc]
SdkComponentSourcePaths_driver_ewm=[platform/drivers/src/ewm|platform/drivers/src/ewm|platform/drivers/src/ewm|platform/drivers/inc]
SdkComponentSourcePaths_driver_flexbus=[platform/drivers/src/flexbus|platform/drivers/src/flexbus|platform/drivers/inc]
SdkComponentSourcePaths_driver_flexcan=[platform/drivers/src/flexcan|platform/drivers/src/flexcan|platform/drivers/src/flexcan|platform/drivers/inc]
SdkComponentSourcePaths_driver_flexio=[platform/drivers/src/flexio|platform/drivers/src/flexio|platform/drivers/src/flexio|platform/drivers/src/flexio|platform/drivers/src/flexio|platform/drivers/src/flexio|platform/drivers/inc|platform/drivers/inc|platform/drivers/inc|platform/drivers/inc|platform/drivers/inc|platform/drivers/inc|platform/drivers/inc|platform/drivers/src/flexio|platform/drivers/src/flexio|platform/drivers/inc|platform/drivers/src/flexio]
SdkComponentSourcePaths_driver_ftm=[platform/drivers/src/ftm|platform/drivers/src/ftm|platform/drivers/src/ftm|platform/drivers/inc]
SdkComponentSourcePaths_driver_gpio=[platform/drivers/src/gpio|platform/drivers/src/gpio|platform/drivers/src/gpio|platform/drivers/inc]
SdkComponentSourcePaths_driver_hwtimer=[platform/system/src/hwtimer|platform/system/src/hwtimer|platform/system/inc|platform/system/inc|platform/system/src/hwtimer|platform/system/src/hwtimer|platform/drivers/src/pit|platform/system/inc|platform/system/inc]
SdkComponentSourcePaths_driver_i2c=[platform/drivers/src/i2c|platform/drivers/src/i2c|platform/drivers/src/i2c|platform/drivers/src/i2c|platform/drivers/inc]
SdkComponentSourcePaths_driver_interrupt_manager=[platform/system/src/interrupt|platform/system/inc]
SdkComponentSourcePaths_driver_irtc=[platform/drivers/src/irtc|platform/drivers/src/irtc|platform/drivers/src/irtc|platform/drivers/inc]
SdkComponentSourcePaths_driver_lmem_cache=[platform/drivers/src/lmem|platform/drivers/inc]
SdkComponentSourcePaths_driver_lpsci=[platform/drivers/src/lpsci|platform/drivers/src/lpsci|platform/drivers/inc|platform/drivers/src/lpsci|platform/drivers/src/lpsci|platform/drivers/inc]
SdkComponentSourcePaths_driver_lptmr=[platform/drivers/src/lptmr|platform/drivers/src/lptmr|platform/drivers/src/lptmr|platform/drivers/inc]
SdkComponentSourcePaths_driver_lpuart=[platform/drivers/src/lpuart|platform/drivers/src/lpuart|platform/drivers/inc|platform/drivers/src/lpuart|platform/drivers/src/lpuart|platform/drivers/inc|platform/drivers/src/lpuart|platform/drivers/src/lpuart|platform/drivers/inc]
SdkComponentSourcePaths_driver_ltc=[platform/drivers/src/ltc|platform/drivers/src/ltc|platform/drivers/src/ltc|platform/drivers/inc]
SdkComponentSourcePaths_driver_mmau=[platform/drivers/src/mmau|platform/drivers/src/mmau|platform/drivers/src/mmau|platform/drivers/inc]
SdkComponentSourcePaths_driver_mpu=[platform/drivers/src/mpu|platform/drivers/src/mpu|platform/drivers/src/mpu|platform/drivers/inc]
SdkComponentSourcePaths_driver_os_abstraction=[platform/osa/src|platform/osa/inc|platform/osa/inc|platform/osa/src|platform/osa/inc|platform/osa/inc|platform/osa/src|platform/osa/inc|platform/osa/inc|platform/osa/src|platform/osa/inc|platform/osa/inc|platform/osa/src|platform/osa/inc|platform/osa/inc]
SdkComponentSourcePaths_driver_pdb=[platform/drivers/src/pdb|platform/drivers/src/pdb|platform/drivers/src/pdb|platform/drivers/inc]
SdkComponentSourcePaths_driver_pit=[platform/drivers/src/pit|platform/drivers/src/pit|platform/drivers/src/pit|platform/drivers/inc]
SdkComponentSourcePaths_driver_power_manager=[platform/system/src/power|platform/system/src/power|platform/system/inc]
SdkComponentSourcePaths_driver_pwm=[platform/drivers/src/pwm|platform/drivers/src/pwm|platform/drivers/src/pwm|platform/drivers/inc]
SdkComponentSourcePaths_driver_qspi=[platform/drivers/src/qspi|platform/drivers/src/qspi|platform/drivers/src/qspi|platform/drivers/inc]
SdkComponentSourcePaths_driver_quadtmr=[platform/drivers/src/quadtmr|platform/drivers/src/quadtmr|platform/drivers/src/quadtmr|platform/drivers/inc]
SdkComponentSourcePaths_driver_rnga=[platform/drivers/src/rnga|platform/drivers/src/rnga|platform/drivers/src/rnga|platform/drivers/inc]
SdkComponentSourcePaths_driver_rtc=[platform/drivers/src/rtc|platform/drivers/src/rtc|platform/drivers/src/rtc|platform/drivers/inc]
SdkComponentSourcePaths_driver_sai=[platform/drivers/src/sai|platform/drivers/src/sai|platform/drivers/src/sai|platform/drivers/inc]
SdkComponentSourcePaths_driver_sdhc=[platform/drivers/src/sdhc|platform/drivers/src/sdhc|platform/drivers/inc|platform/drivers/src/sdhc]
SdkComponentSourcePaths_driver_sdramc=[platform/drivers/src/sdramc|platform/drivers/src/sdramc|platform/drivers/inc]
SdkComponentSourcePaths_driver_slcd=[platform/drivers/src/slcd|platform/drivers/src/slcd|platform/drivers/src/slcd|platform/drivers/inc]
SdkComponentSourcePaths_driver_smartcard=[platform/drivers/src/smartcard|platform/drivers/src/smartcard|platform/drivers/src/smartcard/interface|platform/drivers/src/smartcard/interface|platform/drivers/src/smartcard|platform/drivers/inc]
SdkComponentSourcePaths_driver_spi=[platform/drivers/src/spi|platform/drivers/src/spi|platform/drivers/src/spi|platform/drivers/src/spi|platform/drivers/inc|platform/drivers/inc|platform/drivers/inc|platform/drivers/src/spi|platform/drivers/src/spi|platform/drivers/src/spi|platform/drivers/src/spi|platform/drivers/inc|platform/drivers/inc|platform/drivers/inc]
SdkComponentSourcePaths_driver_tpm=[platform/drivers/src/tpm|platform/drivers/src/tpm|platform/drivers/src/tpm|platform/drivers/inc]
SdkComponentSourcePaths_driver_trng=[platform/drivers/src/trng|platform/drivers/src/trng|platform/drivers/src/trng|platform/drivers/inc]
SdkComponentSourcePaths_driver_tsi=[platform/drivers/src/tsi|platform/drivers/src/tsi|platform/drivers/inc|platform/drivers/src/tsi|platform/drivers/src/tsi]
SdkComponentSourcePaths_driver_uart=[platform/drivers/src/uart|platform/drivers/src/uart|platform/drivers/inc|platform/drivers/src/uart|platform/drivers/src/uart|platform/drivers/inc|platform/drivers/src/uart|platform/drivers/src/uart|platform/drivers/inc]
SdkComponentSourcePaths_driver_vref=[platform/drivers/src/vref|platform/drivers/src/vref|platform/drivers/inc]
SdkComponentSourcePaths_driver_wdog=[platform/drivers/src/wdog|platform/drivers/src/wdog|platform/drivers/src/wdog|platform/drivers/inc]
SdkComponentSourcePaths_driver_xbar=[platform/drivers/src/xbar|platform/drivers/src/xbar|platform/drivers/src/xbar|platform/drivers/inc]
SdkComponentSourcePaths_hal_adc16=[platform/hal/src/adc16|platform/hal/inc]
SdkComponentSourcePaths_hal_afe=[platform/hal/src/afe|platform/hal/inc]
SdkComponentSourcePaths_hal_aoi=[platform/hal/src/aoi|platform/hal/inc]
SdkComponentSourcePaths_hal_cadc=[platform/hal/src/cyclicAdc|platform/hal/inc]
SdkComponentSourcePaths_hal_cmp=[platform/hal/src/cmp|platform/hal/inc]
SdkComponentSourcePaths_hal_cmt=[platform/hal/src/cmt|platform/hal/inc]
SdkComponentSourcePaths_hal_cop=[platform/hal/src/cop|platform/hal/inc]
SdkComponentSourcePaths_hal_crc=[platform/hal/src/crc|platform/hal/inc]
SdkComponentSourcePaths_hal_dac=[platform/hal/src/dac|platform/hal/inc]
SdkComponentSourcePaths_hal_dma=[platform/hal/src/dma|platform/hal/inc]
SdkComponentSourcePaths_hal_dmamux=[platform/hal/src/dmamux|platform/hal/inc]
SdkComponentSourcePaths_hal_dspi=[platform/hal/src/dspi|platform/hal/inc]
SdkComponentSourcePaths_hal_edma=[platform/hal/src/edma|platform/hal/inc]
SdkComponentSourcePaths_hal_emvsim=[platform/hal/src/emvsim|platform/hal/inc]
SdkComponentSourcePaths_hal_enc=[platform/hal/src/enc|platform/hal/inc]
SdkComponentSourcePaths_hal_enet=[platform/hal/src/enet|platform/hal/inc]
SdkComponentSourcePaths_hal_ewm=[platform/hal/src/ewm|platform/hal/inc]
SdkComponentSourcePaths_hal_flexbus=[platform/hal/src/flexbus|platform/hal/inc]
SdkComponentSourcePaths_hal_flexcan=[platform/hal/src/flexcan|platform/hal/inc]
SdkComponentSourcePaths_hal_flexio=[platform/hal/src/flexio|platform/hal/inc]
SdkComponentSourcePaths_hal_ftm=[platform/hal/src/ftm|platform/hal/inc]
SdkComponentSourcePaths_hal_gpio=[platform/hal/src/gpio|platform/hal/inc]
SdkComponentSourcePaths_hal_i2c=[platform/hal/src/i2c|platform/hal/inc|platform/utilities/inc]
SdkComponentSourcePaths_hal_irtc=[platform/hal/src/irtc|platform/hal/inc]
SdkComponentSourcePaths_hal_llwu=[platform/hal/src/llwu|platform/hal/inc]
SdkComponentSourcePaths_hal_lmem_cache=[platform/hal/src/lmem|platform/hal/inc]
SdkComponentSourcePaths_hal_lpsci=[platform/hal/src/lpsci|platform/hal/inc]
SdkComponentSourcePaths_hal_lptmr=[platform/hal/src/lptmr|platform/hal/inc]
SdkComponentSourcePaths_hal_lpuart=[platform/hal/src/lpuart|platform/hal/inc]
SdkComponentSourcePaths_hal_ltc=[platform/hal/src/ltc|platform/hal/inc]
SdkComponentSourcePaths_hal_mcg=[platform/hal/src/mcg|platform/hal/inc]
SdkComponentSourcePaths_hal_mcglite=[platform/hal/src/mcglite|platform/hal/inc]
SdkComponentSourcePaths_hal_mmau=[platform/hal/src/mmau|platform/hal/inc]
SdkComponentSourcePaths_hal_mmdvsq=[platform/hal/src/mmdvsq|platform/hal/inc]
SdkComponentSourcePaths_hal_mpu=[platform/hal/src/mpu|platform/hal/inc]
SdkComponentSourcePaths_hal_osc=[platform/hal/src/osc|platform/hal/inc]
SdkComponentSourcePaths_hal_pdb=[platform/hal/src/pdb|platform/hal/inc]
SdkComponentSourcePaths_hal_pit=[platform/hal/src/pit|platform/hal/inc]
SdkComponentSourcePaths_hal_pmc=[platform/hal/inc]
SdkComponentSourcePaths_hal_port=[platform/hal/src/port|platform/hal/inc]
SdkComponentSourcePaths_hal_pwm=[platform/hal/src/pwm|platform/hal/inc]
SdkComponentSourcePaths_hal_qspi=[platform/hal/src/qspi|platform/hal/inc]
SdkComponentSourcePaths_hal_quadtmr=[platform/hal/src/quadtmr|platform/hal/inc]
SdkComponentSourcePaths_hal_rcm=[platform/hal/src/rcm|platform/hal/inc]
SdkComponentSourcePaths_hal_rnga=[platform/hal/src/rnga|platform/hal/inc]
SdkComponentSourcePaths_hal_rtc=[platform/hal/src/rtc|platform/hal/inc]
SdkComponentSourcePaths_hal_sai=[platform/hal/src/sai|platform/hal/inc]
SdkComponentSourcePaths_hal_sdhc=[platform/hal/src/sdhc|platform/hal/inc]
SdkComponentSourcePaths_hal_sdramc=[platform/hal/src/sdramc|platform/hal/inc]
SdkComponentSourcePaths_hal_sim=[platform/hal/inc|platform/hal/src/sim/$|device||platform/hal/src/sim/$|device|]
SdkComponentSourcePaths_hal_slcd=[platform/hal/src/slcd|platform/hal/inc]
SdkComponentSourcePaths_hal_smc=[platform/hal/src/smc|platform/hal/inc]
SdkComponentSourcePaths_hal_spi=[platform/hal/src/spi|platform/hal/inc]
SdkComponentSourcePaths_hal_tpm=[platform/hal/src/tpm|platform/hal/inc]
SdkComponentSourcePaths_hal_trng=[platform/hal/src/trng|platform/hal/inc]
SdkComponentSourcePaths_hal_tsi=[platform/hal/inc|platform/hal/src/tsi|platform/hal/inc|platform/hal/src/tsi|platform/hal/inc|platform/hal/src/tsi]
SdkComponentSourcePaths_hal_uart=[platform/hal/src/uart|platform/hal/inc]
SdkComponentSourcePaths_hal_vref=[platform/hal/src/vref|platform/hal/inc]
SdkComponentSourcePaths_hal_wdog=[platform/hal/src/wdog|platform/hal/inc]
SdkComponentSourcePaths_hal_xbar=[platform/hal/src/xbar|platform/hal/inc]
SdkComponentSourcePaths_linker_linker=[platform/devices/$|device|/linker/$|compiler||platform/devices/$|device|/linker/$|compiler|]
SdkComponentSourcePaths_os_FreeRTOS=[rtos/FreeRTOS/include|rtos/FreeRTOS/port/gcc|rtos/FreeRTOS/port/gcc|rtos/FreeRTOS/port/gcc|rtos/FreeRTOS/port/iar|rtos/FreeRTOS/port/iar|rtos/FreeRTOS/port/iar|rtos/FreeRTOS/port/mdk|rtos/FreeRTOS/port/mdk|rtos/FreeRTOS/port/mdk|rtos/FreeRTOS/src]
SdkComponentSourcePaths_os_mqx=[rtos/mqx/mqx/source/psp/cortex_m/compiler/iar|rtos/mqx/mqx/source/psp/cortex_m/core/M4|rtos/mqx/mqx/source/psp/cortex_m/core/M4|rtos/mqx/mqx/source/psp/cortex_m|rtos/mqx/mqx/source/psp/cortex_m|rtos/mqx/mqx/source/kernel|rtos/mqx/mqx/source/bsp|rtos/mqx/mqx/source/nio/src|rtos/mqx/mqx/source/nio/fs|rtos/mqx/mqx/source/nio/drivers/nio_dummy/src|rtos/mqx/mqx/source/nio/drivers/nio_serial/src|rtos/mqx/mqx/source/nio/drivers/nio_tty/src|rtos/mqx/mqx/source/string|rtos/mqx/mqx_stdlib/source/stdio|rtos/mqx/mqx_stdlib/source/strings|rtos/mqx/mqx/source/psp/cortex_m/compiler/gcc_arm|rtos/mqx/mqx/source/psp/cortex_m/compiler/rv_mdk|rtos/mqx/mqx/source/psp/cortex_m/compiler/iar|rtos/mqx/mqx/source/include|rtos/mqx/config/common|rtos/mqx/mqx/source/psp/cortex_m/compiler/iar|rtos/mqx/mqx/source/psp/cortex_m|rtos/mqx/mqx/source/psp/cortex_m/cpu|rtos/mqx/config/common|rtos/mqx/mqx/source/include|rtos/mqx/mqx/source/bsp|rtos/mqx/mqx/source/nio|rtos/mqx/mqx/source/nio/src|rtos/mqx/mqx/source/nio/fs|rtos/mqx/mqx/source/nio/drivers/nio_dummy|rtos/mqx/mqx/source/nio/drivers/nio_serial|rtos/mqx/mqx/source/nio/drivers/nio_tty|rtos/mqx/mqx_stdlib/source/include|rtos/mqx/mqx_stdlib/source/stdio|rtos/mqx/mqx/source/psp/cortex_m/compiler/gcc_arm|rtos/mqx/mqx/source/psp/cortex_m/compiler/gcc_arm|rtos/mqx/mqx/source/psp/cortex_m/compiler/rv_mdk|rtos/mqx/mqx/source/psp/cortex_m/compiler/rv_mdk|rtos/mqx/mqx/source/psp/cortex_m/core/M0|rtos/mqx/mqx/source/psp/cortex_m/core/M0]
SdkComponentSourcePaths_os_uCOSII=[rtos/uCOSII/src/uC-CPU|rtos/uCOSII/src/uC-CPU|rtos/uCOSII/src/uC-CPU/ARM-Cortex-M0/GNU|rtos/uCOSII/src/uC-CPU/ARM-Cortex-M0/GNU|rtos/uCOSII/src/uC-CPU/ARM-Cortex-M0/GNU|rtos/uCOSII/src/uC-CPU/ARM-Cortex-M0/IAR|rtos/uCOSII/src/uC-CPU/ARM-Cortex-M0/IAR|rtos/uCOSII/src/uC-CPU/ARM-Cortex-M0/IAR|rtos/uCOSII/src/uC-CPU/ARM-Cortex-M0/RealView|rtos/uCOSII/src/uC-CPU/ARM-Cortex-M0/RealView|rtos/uCOSII/src/uC-CPU/ARM-Cortex-M0/RealView|rtos/uCOSII/src/uC-CPU/ARM-Cortex-M4/GNU|rtos/uCOSII/src/uC-CPU/ARM-Cortex-M4/GNU|rtos/uCOSII/src/uC-CPU/ARM-Cortex-M4/GNU|rtos/uCOSII/src/uC-CPU/ARM-Cortex-M4/IAR|rtos/uCOSII/src/uC-CPU/ARM-Cortex-M4/IAR|rtos/uCOSII/src/uC-CPU/ARM-Cortex-M4/IAR|rtos/uCOSII/src/uC-CPU/ARM-Cortex-M4/RealView|rtos/uCOSII/src/uC-CPU/ARM-Cortex-M4/RealView|rtos/uCOSII/src/uC-CPU/ARM-Cortex-M4/RealView|rtos/uCOSII/src/uC-LIB|rtos/uCOSII/src/uC-LIB|rtos/uCOSII/src/uC-LIB/Ports/ARM-Cortex-M4/IAR|rtos/uCOSII/src/uC-LIB/Ports/ARM-Cortex-M4/RealView|rtos/uCOSII/src/uCOS-II/Ports/ARM-Cortex-M0/Generic/GNU|rtos/uCOSII/src/uCOS-II/Ports/ARM-Cortex-M0/Generic/GNU|rtos/uCOSII/src/uCOS-II/Ports/ARM-Cortex-M0/Generic/GNU|rtos/uCOSII/src/uCOS-II/Ports/ARM-Cortex-M0/Generic/IAR|rtos/uCOSII/src/uCOS-II/Ports/ARM-Cortex-M0/Generic/IAR|rtos/uCOSII/src/uCOS-II/Ports/ARM-Cortex-M0/Generic/IAR|rtos/uCOSII/src/uCOS-II/Ports/ARM-Cortex-M0/Generic/RealView|rtos/uCOSII/src/uCOS-II/Ports/ARM-Cortex-M0/Generic/RealView|rtos/uCOSII/src/uCOS-II/Ports/ARM-Cortex-M0/Generic/RealView|rtos/uCOSII/src/uCOS-II/Ports/ARM-Cortex-M4/Generic/GNU|rtos/uCOSII/src/uCOS-II/Ports/ARM-Cortex-M4/Generic/GNU|rtos/uCOSII/src/uCOS-II/Ports/ARM-Cortex-M4/Generic/GNU|rtos/uCOSII/src/uCOS-II/Ports/ARM-Cortex-M4/Generic/IAR|rtos/uCOSII/src/uCOS-II/Ports/ARM-Cortex-M4/Generic/IAR|rtos/uCOSII/src/uCOS-II/Ports/ARM-Cortex-M4/Generic/IAR|rtos/uCOSII/src/uCOS-II/Ports/ARM-Cortex-M4/Generic/RealView|rtos/uCOSII/src/uCOS-II/Ports/ARM-Cortex-M4/Generic/RealView|rtos/uCOSII/src/uCOS-II/Ports/ARM-Cortex-M4/Generic/RealView|rtos/uCOSII/src/uCOS-II/Source|rtos/uCOSII/src/uCOS-II/Source]
SdkComponentSourcePaths_os_uCOSIII=[rtos/uCOSIII/src/uC-CPU|rtos/uCOSIII/src/uC-CPU|rtos/uCOSIII/src/uC-CPU/ARM-Cortex-M0/GNU|rtos/uCOSIII/src/uC-CPU/ARM-Cortex-M0/GNU|rtos/uCOSIII/src/uC-CPU/ARM-Cortex-M0/GNU|rtos/uCOSIII/src/uC-CPU/ARM-Cortex-M0/IAR|rtos/uCOSIII/src/uC-CPU/ARM-Cortex-M0/IAR|rtos/uCOSIII/src/uC-CPU/ARM-Cortex-M0/IAR|rtos/uCOSIII/src/uC-CPU/ARM-Cortex-M0/RealView|rtos/uCOSIII/src/uC-CPU/ARM-Cortex-M0/RealView|rtos/uCOSIII/src/uC-CPU/ARM-Cortex-M0/RealView|rtos/uCOSIII/src/uC-CPU/ARM-Cortex-M4/GNU|rtos/uCOSIII/src/uC-CPU/ARM-Cortex-M4/GNU|rtos/uCOSIII/src/uC-CPU/ARM-Cortex-M4/GNU|rtos/uCOSIII/src/uC-CPU/ARM-Cortex-M4/IAR|rtos/uCOSIII/src/uC-CPU/ARM-Cortex-M4/IAR|rtos/uCOSIII/src/uC-CPU/ARM-Cortex-M4/IAR|rtos/uCOSIII/src/uC-CPU/ARM-Cortex-M4/RealView|rtos/uCOSIII/src/uC-CPU/ARM-Cortex-M4/RealView|rtos/uCOSIII/src/uC-CPU/ARM-Cortex-M4/RealView|rtos/uCOSIII/src/uC-LIB|rtos/uCOSIII/src/uC-LIB|rtos/uCOSIII/src/uC-LIB/Ports/ARM-Cortex-M4/GNU|rtos/uCOSIII/src/uC-LIB/Ports/ARM-Cortex-M4/IAR|rtos/uCOSIII/src/uC-LIB/Ports/ARM-Cortex-M4/RealView|rtos/uCOSIII/src/uCOS-III/Ports/ARM-Cortex-M0/Generic/GNU|rtos/uCOSIII/src/uCOS-III/Ports/ARM-Cortex-M0/Generic/GNU|rtos/uCOSIII/src/uCOS-III/Ports/ARM-Cortex-M0/Generic/GNU|rtos/uCOSIII/src/uCOS-III/Ports/ARM-Cortex-M0/Generic/IAR|rtos/uCOSIII/src/uCOS-III/Ports/ARM-Cortex-M0/Generic/IAR|rtos/uCOSIII/src/uCOS-III/Ports/ARM-Cortex-M0/Generic/IAR|rtos/uCOSIII/src/uCOS-III/Ports/ARM-Cortex-M0/Generic/RealView|rtos/uCOSIII/src/uCOS-III/Ports/ARM-Cortex-M0/Generic/RealView|rtos/uCOSIII/src/uCOS-III/Ports/ARM-Cortex-M0/Generic/RealView|rtos/uCOSIII/src/uCOS-III/Ports/ARM-Cortex-M4/Generic/GNU|rtos/uCOSIII/src/uCOS-III/Ports/ARM-Cortex-M4/Generic/GNU|rtos/uCOSIII/src/uCOS-III/Ports/ARM-Cortex-M4/Generic/GNU|rtos/uCOSIII/src/uCOS-III/Ports/ARM-Cortex-M4/Generic/IAR|rtos/uCOSIII/src/uCOS-III/Ports/ARM-Cortex-M4/Generic/IAR|rtos/uCOSIII/src/uCOS-III/Ports/ARM-Cortex-M4/Generic/IAR|rtos/uCOSIII/src/uCOS-III/Ports/ARM-Cortex-M4/Generic/RealView|rtos/uCOSIII/src/uCOS-III/Ports/ARM-Cortex-M4/Generic/RealView|rtos/uCOSIII/src/uCOS-III/Ports/ARM-Cortex-M4/Generic/RealView|rtos/uCOSIII/src/uCOS-III/Source|rtos/uCOSIII/src/uCOS-III/Source]
SdkComponentSourcePaths_other_debug_console=[platform/utilities/src|platform/utilities/src|platform/utilities/src|platform/utilities/inc]
SdkComponentSourcePaths_other_flash=[platform/drivers/src/flash/C90TFS/drvsrc/source|platform/drivers/src/flash/C90TFS/drvsrc/source|platform/drivers/src/flash/C90TFS/drvsrc/source|platform/drivers/src/flash/C90TFS/drvsrc/source|platform/drivers/src/flash/C90TFS/drvsrc/source|platform/drivers/src/flash/C90TFS/drvsrc/source|platform/drivers/src/flash/C90TFS/drvsrc/source|platform/drivers/src/flash/C90TFS/drvsrc/source|platform/drivers/src/flash/C90TFS/drvsrc/source|platform/drivers/src/flash/C90TFS/drvsrc/source|platform/drivers/src/flash/C90TFS/drvsrc/source|platform/drivers/src/flash/C90TFS/drvsrc/source|platform/drivers/src/flash/C90TFS/drvsrc/source|platform/drivers/src/flash/C90TFS/drvsrc/source|platform/drivers/src/flash/C90TFS/drvsrc/source|platform/drivers/src/flash/C90TFS/drvsrc/source|platform/drivers/src/flash/C90TFS/drvsrc/source|platform/drivers/src/flash/C90TFS/drvsrc/source|platform/drivers/src/flash/C90TFS/drvsrc/source|platform/drivers/src/flash/C90TFS/drvsrc/source|platform/drivers/src/flash/C90TFS/drvsrc/source|platform/drivers/src/flash/C90TFS/drvsrc/source|platform/drivers/src/flash/C90TFS/drvsrc/source|platform/drivers/src/flash/C90TFS/drvsrc/source|platform/drivers/src/flash/C90TFS/drvsrc/source|platform/drivers/src/flash/C90TFS/drvsrc/source|platform/drivers/src/flash/C90TFS/drvsrc/source|platform/drivers/src/flash/C90TFS/drvsrc/source|platform/drivers/src/flash/C90TFS/drvsrc/source|platform/drivers/src/flash/C90TFS/drvsrc/source|platform/drivers/src/flash/C90TFS/drvsrc/source|platform/drivers/src/flash/C90TFS/drvsrc/include|platform/drivers/src/flash/C90TFS/drvsrc/include|platform/drivers/src/flash/C90TFS/drvsrc/include|platform/drivers/src/flash/C90TFS/drvsrc/include|platform/drivers/src/flash/C90TFS/drvsrc/include]
SdkComponentSourcePaths_other_sdcard=[platform/composite/src/sdcard|platform/composite/inc|platform/composite/inc|platform/composite/src/sdcard|platform/composite/inc|platform/composite/inc]
SdkComponentSourcePaths_other_usb_descriptors=[usb/usb_core/device/sources/classes/composite|usb/usb_core/device/sources/classes/composite|usb/usb_core/device/sources/classes/include]
SdkComponentSourcePaths_other_usb_device_hid_class=[usb/usb_core/device/sources/classes/common|usb/usb_core/device/sources/classes/common|usb/usb_core/device/sources/classes/hid|usb/usb_core/device/sources/classes/hid|usb/usb_core/device/sources/classes/include|usb/usb_core/device/sources/classes/include]
SdkComponentSourcePaths_other_usb_device_msd_class=[usb/usb_core/device/sources/classes/common|usb/usb_core/device/sources/classes/common|usb/usb_core/device/sources/classes/msd|usb/usb_core/device/sources/classes/msd|usb/usb_core/device/sources/classes/include|usb/usb_core/device/sources/classes/include]
SdkComponentSourcePaths_other_usb_ehci=[usb/usb_core/include|usb/usb_core/hal]
SdkComponentSourcePaths_other_usb_framework=[usb/adapter/sources|usb/adapter/sources/sdk|usb/adapter/sources/sdk|usb/usb_core/include|usb/usb_core/device/include|usb/usb_core/device/sources/controller|usb/usb_core/device/sources/controller|usb/usb_core/device/sources/controller/khci|usb/usb_core/device/sources/controller/khci|usb/usb_core/device/sources/controller/ehci|usb/usb_core/device/sources/controller/ehci|usb/usb_core/host/include|usb/usb_core/host/sources/controller|usb/usb_core/host/sources/controller|usb/usb_core/host/sources/controller/khci|usb/usb_core/host/sources/controller/khci|usb/usb_core/host/sources/controller/ehci|usb/usb_core/host/sources/controller/ehci|usb/usb_core/host/sources/classes/hub|usb/usb_core/otg/sources/otg|usb/usb_core/otg/sources/otg]
SdkComponentSourcePaths_other_usb_khci=[usb/usb_core/include|usb/usb_core/hal]
SdkComponentSourcePaths_startup_startup=[platform/devices/$|device|/startup/$|compiler||platform/devices/$|device|/startup/$|compiler||platform/devices|platform/devices|platform/devices/$|device|/startup|platform/devices/$|device|/startup]
SdkComponentSourceTypes_CMSIS_Include=[c_include|c_include|c_include|c_include|c_include|c_include|c_include]
SdkComponentSourceTypes_driver_adc16=[src|src|src|c_include]
SdkComponentSourceTypes_driver_afe=[src|src|src|c_include]
SdkComponentSourceTypes_driver_aoi=[src|src|c_include]
SdkComponentSourceTypes_driver_cadc=[src|src|c_include]
SdkComponentSourceTypes_driver_clock_manager=[src|src|src|src|c_include|c_include]
SdkComponentSourceTypes_driver_cmp=[src|src|src|c_include]
SdkComponentSourceTypes_driver_cmt=[src|src|src|c_include]
SdkComponentSourceTypes_driver_cop=[src|src|c_include]
SdkComponentSourceTypes_driver_crc=[src|src|c_include]
SdkComponentSourceTypes_driver_dac=[src|src|src|c_include]
SdkComponentSourceTypes_driver_dma=[src|src|src|c_include]
SdkComponentSourceTypes_driver_dspi=[src|src|src|src|c_include|c_include|c_include|src|src|src|c_include|c_include|src|src|src|src|c_include|c_include|c_include]
SdkComponentSourceTypes_driver_edma=[src|src|src|c_include]
SdkComponentSourceTypes_driver_enc=[src|src|src|c_include]
SdkComponentSourceTypes_driver_enet=[src|src|src|c_include]
SdkComponentSourceTypes_driver_ewm=[src|src|src|c_include]
SdkComponentSourceTypes_driver_flexbus=[src|src|c_include]
SdkComponentSourceTypes_driver_flexcan=[src|src|src|c_include]
SdkComponentSourceTypes_driver_flexio=[src|src|src|src|src|src|c_include|c_include|c_include|c_include|c_include|c_include|c_include|src|src|c_include|src]
SdkComponentSourceTypes_driver_ftm=[src|src|src|c_include]
SdkComponentSourceTypes_driver_gpio=[src|src|src|c_include]
SdkComponentSourceTypes_driver_hwtimer=[src|src|c_include|c_include|src|src|src|c_include|c_include]
SdkComponentSourceTypes_driver_i2c=[src|src|src|src|c_include]
SdkComponentSourceTypes_driver_interrupt_manager=[src|c_include]
SdkComponentSourceTypes_driver_irtc=[src|src|src|c_include]
SdkComponentSourceTypes_driver_lmem_cache=[src|c_include]
SdkComponentSourceTypes_driver_lpsci=[src|src|c_include|src|src|c_include]
SdkComponentSourceTypes_driver_lptmr=[src|src|src|c_include]
SdkComponentSourceTypes_driver_lpuart=[src|src|c_include|src|src|c_include|src|src|c_include]
SdkComponentSourceTypes_driver_ltc=[src|src|src|c_include]
SdkComponentSourceTypes_driver_mmau=[src|src|src|c_include]
SdkComponentSourceTypes_driver_mpu=[src|src|src|c_include]
SdkComponentSourceTypes_driver_os_abstraction=[src|c_include|c_include|src|c_include|c_include|src|c_include|c_include|src|c_include|c_include|src|c_include|c_include]
SdkComponentSourceTypes_driver_pdb=[src|src|src|c_include]
SdkComponentSourceTypes_driver_pit=[src|src|src|c_include]
SdkComponentSourceTypes_driver_power_manager=[src|c_include|c_include]
SdkComponentSourceTypes_driver_pwm=[src|src|src|c_include]
SdkComponentSourceTypes_driver_qspi=[src|src|src|c_include]
SdkComponentSourceTypes_driver_quadtmr=[src|src|src|c_include]
SdkComponentSourceTypes_driver_rnga=[src|src|src|c_include]
SdkComponentSourceTypes_driver_rtc=[src|src|src|c_include]
SdkComponentSourceTypes_driver_sai=[src|src|src|c_include]
SdkComponentSourceTypes_driver_sdhc=[src|src|c_include|src]
SdkComponentSourceTypes_driver_sdramc=[src|src|c_include]
SdkComponentSourceTypes_driver_slcd=[src|src|src|c_include]
SdkComponentSourceTypes_driver_smartcard=[src|src|src|c_include|src|c_include]
SdkComponentSourceTypes_driver_spi=[src|src|src|src|c_include|c_include|c_include|src|src|src|src|c_include|c_include|c_include]
SdkComponentSourceTypes_driver_tpm=[src|src|src|c_include]
SdkComponentSourceTypes_driver_trng=[src|src|src|c_include]
SdkComponentSourceTypes_driver_tsi=[src|src|c_include|src|src]
SdkComponentSourceTypes_driver_uart=[src|src|c_include|src|src|c_include|src|src|c_include]
SdkComponentSourceTypes_driver_vref=[src|src|c_include]
SdkComponentSourceTypes_driver_wdog=[src|src|src|c_include]
SdkComponentSourceTypes_driver_xbar=[src|src|src|c_include]
SdkComponentSourceTypes_hal_adc16=[src|c_include]
SdkComponentSourceTypes_hal_afe=[src|c_include]
SdkComponentSourceTypes_hal_aoi=[src|c_include]
SdkComponentSourceTypes_hal_cadc=[src|c_include]
SdkComponentSourceTypes_hal_cmp=[src|c_include]
SdkComponentSourceTypes_hal_cmt=[src|c_include]
SdkComponentSourceTypes_hal_cop=[src|c_include]
SdkComponentSourceTypes_hal_crc=[src|c_include]
SdkComponentSourceTypes_hal_dac=[src|c_include]
SdkComponentSourceTypes_hal_dma=[src|c_include]
SdkComponentSourceTypes_hal_dmamux=[src|c_include]
SdkComponentSourceTypes_hal_dspi=[src|c_include]
SdkComponentSourceTypes_hal_edma=[src|c_include]
SdkComponentSourceTypes_hal_emvsim=[src|c_include]
SdkComponentSourceTypes_hal_enc=[src|c_include]
SdkComponentSourceTypes_hal_enet=[src|c_include]
SdkComponentSourceTypes_hal_ewm=[src|c_include]
SdkComponentSourceTypes_hal_flexbus=[src|c_include]
SdkComponentSourceTypes_hal_flexcan=[src|c_include]
SdkComponentSourceTypes_hal_flexio=[src|c_include]
SdkComponentSourceTypes_hal_ftm=[src|c_include]
SdkComponentSourceTypes_hal_gpio=[src|c_include]
SdkComponentSourceTypes_hal_i2c=[src|c_include|c_include]
SdkComponentSourceTypes_hal_irtc=[src|c_include]
SdkComponentSourceTypes_hal_llwu=[src|c_include]
SdkComponentSourceTypes_hal_lmem_cache=[src|c_include]
SdkComponentSourceTypes_hal_lpsci=[src|c_include]
SdkComponentSourceTypes_hal_lptmr=[src|c_include]
SdkComponentSourceTypes_hal_lpuart=[src|c_include]
SdkComponentSourceTypes_hal_ltc=[src|c_include]
SdkComponentSourceTypes_hal_mcg=[src|c_include]
SdkComponentSourceTypes_hal_mcglite=[src|c_include]
SdkComponentSourceTypes_hal_mmau=[src|c_include]
SdkComponentSourceTypes_hal_mmdvsq=[src|c_include]
SdkComponentSourceTypes_hal_mpu=[src|c_include]
SdkComponentSourceTypes_hal_osc=[src|c_include]
SdkComponentSourceTypes_hal_pdb=[src|c_include]
SdkComponentSourceTypes_hal_pit=[src|c_include]
SdkComponentSourceTypes_hal_pmc=[c_include]
SdkComponentSourceTypes_hal_port=[src|c_include]
SdkComponentSourceTypes_hal_pwm=[src|c_include]
SdkComponentSourceTypes_hal_qspi=[src|c_include]
SdkComponentSourceTypes_hal_quadtmr=[src|c_include]
SdkComponentSourceTypes_hal_rcm=[src|c_include]
SdkComponentSourceTypes_hal_rnga=[src|c_include]
SdkComponentSourceTypes_hal_rtc=[src|c_include]
SdkComponentSourceTypes_hal_sai=[src|c_include]
SdkComponentSourceTypes_hal_sdhc=[src|c_include]
SdkComponentSourceTypes_hal_sdramc=[src|c_include]
SdkComponentSourceTypes_hal_sim=[c_include|src|c_include]
SdkComponentSourceTypes_hal_slcd=[src|c_include]
SdkComponentSourceTypes_hal_smc=[src|c_include]
SdkComponentSourceTypes_hal_spi=[src|c_include]
SdkComponentSourceTypes_hal_tpm=[src|c_include]
SdkComponentSourceTypes_hal_trng=[src|c_include]
SdkComponentSourceTypes_hal_tsi=[c_include|src|c_include|src|c_include|src]
SdkComponentSourceTypes_hal_uart=[src|c_include]
SdkComponentSourceTypes_hal_vref=[src|c_include]
SdkComponentSourceTypes_hal_wdog=[src|c_include]
SdkComponentSourceTypes_hal_xbar=[src|c_include]
SdkComponentSourceTypes_linker_linker=[linker|linker]
SdkComponentSourceTypes_os_FreeRTOS=[c_include|src|src|c_include|src|src|c_include|src|src|c_include|src]
SdkComponentSourceTypes_os_mqx=[src|asm_include|src|asm_include|src|src|src|src|src|src|src|src|src|src|src|src|src|asm_include|asm_include|asm_include|c_include|c_include|c_include|c_include|c_include|c_include|c_include|c_include|c_include|c_include|c_include|c_include|c_include|c_include|asm_include|c_include|asm_include|c_include|asm_include|src]
SdkComponentSourceTypes_os_uCOSII=[src|c_include|src|src|c_include|src|src|c_include|src|src|c_include|src|src|c_include|src|src|c_include|src|src|c_include|src|c_include|src|src|src|src|c_include|src|src|c_include|src|src|c_include|src|src|c_include|src|src|c_include|src|src|c_include|src|c_include]
SdkComponentSourceTypes_os_uCOSIII=[src|c_include|src|src|c_include|src|src|c_include|src|src|c_include|src|src|c_include|src|src|c_include|src|src|c_include|src|c_include|src|src|src|src|src|c_include|src|src|c_include|src|src|c_include|src|src|c_include|src|src|c_include|src|src|c_include|src|c_include]
SdkComponentSourceTypes_other_debug_console=[src|src|c_include|c_include]
SdkComponentSourceTypes_other_flash=[src|src|src|src|src|src|src|src|src|src|src|src|src|src|src|src|src|src|src|src|src|src|src|src|src|src|src|src|src|src|src|c_include|c_include|c_include|c_include|c_include]
SdkComponentSourceTypes_other_sdcard=[src|c_include|c_include|src|c_include|c_include]
SdkComponentSourceTypes_other_usb_descriptors=[c_include|src|c_include]
SdkComponentSourceTypes_other_usb_device_hid_class=[c_include|src|c_include|src|c_include|c_include]
SdkComponentSourceTypes_other_usb_device_msd_class=[c_include|src|c_include|src|c_include|c_include]
SdkComponentSourceTypes_other_usb_ehci=[c_include|c_include]
SdkComponentSourceTypes_other_usb_framework=[c_include|c_include|src|c_include|c_include|src|c_include|src|c_include|src|c_include|c_include|src|c_include|src|c_include|src|c_include|c_include|src|c_include]
SdkComponentSourceTypes_other_usb_khci=[c_include|c_include]
SdkComponentSourceTypes_startup_startup=[c_include|c_include|c_include|src|c_include|src]
SdkComponentSourceVariants_driver_adc16=[||irq|]
SdkComponentSourceVariants_driver_afe=[||irq|]
SdkComponentSourceVariants_driver_clock_manager=[||rtc|irtc||]
SdkComponentSourceVariants_driver_cmp=[||irq|]
SdkComponentSourceVariants_driver_cmt=[||irq|]
SdkComponentSourceVariants_driver_dac=[||irq|]
SdkComponentSourceVariants_driver_dma=[||irq|]
SdkComponentSourceVariants_driver_dspi=[EDMA|EDMA|EDMA|EDMA|EDMA|EDMA|EDMA|DMA|DMA|DMA|DMA|DMA|IRQ|IRQ|IRQ|IRQ|IRQ|IRQ|IRQ]
SdkComponentSourceVariants_driver_edma=[||irq|]
SdkComponentSourceVariants_driver_enc=[||irq|]
SdkComponentSourceVariants_driver_enet=[||irq|]
SdkComponentSourceVariants_driver_ewm=[||irq|]
SdkComponentSourceVariants_driver_flexcan=[||irq|]
SdkComponentSourceVariants_driver_flexio=[|||||irq||||||DMA|EDMA|DMA|EDMA|UART|UART]
SdkComponentSourceVariants_driver_ftm=[||irq|]
SdkComponentSourceVariants_driver_gpio=[||irq|]
SdkComponentSourceVariants_driver_hwtimer=[SysTick|SysTick|SysTick|SysTick|PIT|PIT|PIT|PIT|PIT]
SdkComponentSourceVariants_driver_i2c=[|||irq|]
SdkComponentSourceVariants_driver_irtc=[||irq|]
SdkComponentSourceVariants_driver_lpsci=[DMA|DMA|DMA|IRQ|IRQ|IRQ]
SdkComponentSourceVariants_driver_lptmr=[||irq|]
SdkComponentSourceVariants_driver_lpuart=[EDMA|EDMA|EDMA|DMA|DMA|DMA|IRQ|IRQ|IRQ]
SdkComponentSourceVariants_driver_ltc=[||irq|]
SdkComponentSourceVariants_driver_mmau=[||irq|]
SdkComponentSourceVariants_driver_mpu=[||irq|]
SdkComponentSourceVariants_driver_os_abstraction=[MQX_KSDK|MQX_KSDK|MQX_KSDK|FreeRTOS|FreeRTOS|FreeRTOS|uCOSII|uCOSII|uCOSII|uCOSIII|uCOSIII|uCOSIII|BareMetal|BareMetal|BareMetal]
SdkComponentSourceVariants_driver_pdb=[||irq|]
SdkComponentSourceVariants_driver_pit=[||irq|]
SdkComponentSourceVariants_driver_pwm=[||irq|]
SdkComponentSourceVariants_driver_qspi=[||irq|]
SdkComponentSourceVariants_driver_quadtmr=[||irq|]
SdkComponentSourceVariants_driver_rnga=[||irq|]
SdkComponentSourceVariants_driver_rtc=[||irq|]
SdkComponentSourceVariants_driver_sai=[||irq|]
SdkComponentSourceVariants_driver_sdhc=[|||irq]
SdkComponentSourceVariants_driver_slcd=[||irq|]
SdkComponentSourceVariants_driver_smartcard=[||||irq|]
SdkComponentSourceVariants_driver_spi=[DMA|DMA|DMA|DMA|DMA|DMA|DMA|IRQ|IRQ|IRQ|IRQ|IRQ|IRQ|IRQ]
SdkComponentSourceVariants_driver_tpm=[||irq|]
SdkComponentSourceVariants_driver_trng=[||irq|]
SdkComponentSourceVariants_driver_tsi=[|||V2|V4]
SdkComponentSourceVariants_driver_uart=[EDMA|EDMA|EDMA|DMA|DMA|DMA|IRQ|IRQ|IRQ]
SdkComponentSourceVariants_driver_wdog=[||irq|]
SdkComponentSourceVariants_driver_xbar=[||irq|]
SdkComponentSourceVariants_hal_tsi=[||V2|V2|V4|V4]
SdkComponentSourceVariants_linker_linker=[flash|ram]
SdkComponentSourceVariants_os_mqx=[|||||||MxqStandardVersion|MxqStandardVersion|MxqStandardVersion|MxqStandardVersion|MxqStandardVersion|MxqStandardVersion|MxqStandardVersion|MxqStandardVersion||||||||||||MxqStandardVersion|MxqStandardVersion|MxqStandardVersion|MxqStandardVersion|MxqStandardVersion|MxqStandardVersion|MxqStandardVersion|MxqStandardVersion||||||]
SdkComponentSourceVariants_os_uCOSII=[||||||||||||||||||||||MemCopyOptimization|MemCopyOptimization||||||||||||||||||||]
SdkComponentSourceVariants_os_uCOSIII=[||||||||||||||||||||||MemCopyOptimization|MemCopyOptimization|MemCopyOptimization||||||||||||||||||||]
SdkComponentSourceVariants_other_sdcard=[SDHC|SDHC|SDHC|DSPI|DSPI|DSPI]
SdkComponentSourceVariants_other_usb_framework=[||||device|device|device|device|device|device_ehci|device_ehci|host|host|host|host_khci|host_khci|host|host|host|otg|otg]
SdkPeGenToolchainIds_atl=[com_atollic_truestudio_gcc_symbols_defined|com_atollic_truestudio_as_symbols_defined]
SdkPeGenToolchainIds_gcc=[ilg_gnuarmeclipse_managedbuild_cross_option_c_compiler_defs|ilg_gnuarmeclipse_managedbuild_cross_option_cpp_compiler_defs]
SdkPeGenToolchainIds_iar=[iar_arm_toolchain_compiler_option_defines_v5_4_0]
SdkPeGenToolchainListValue_atl_com_atollic_truestudio_as_symbols_defined=["__ATOLLIC__"]
SdkPeGenToolchainListValue_atl_com_atollic_truestudio_gcc_symbols_defined=["CPU_$|package|"|"__ATOLLIC__"]
SdkPeGenToolchainListValue_gcc_ilg_gnuarmeclipse_managedbuild_cross_option_c_compiler_defs=["CPU_$|package|"]
SdkPeGenToolchainListValue_gcc_ilg_gnuarmeclipse_managedbuild_cross_option_cpp_compiler_defs=["CPU_$|package|"]
SdkPeGenToolchainListValue_iar_iar_arm_toolchain_compiler_option_defines_v5_4_0=["CPU_$|package|"]
SdkPeGenToolchainValues_atl=[#stringList#SdkPeGenToolchainListValue_atl_com_atollic_truestudio_gcc_symbols_defined|#stringList#SdkPeGenToolchainListValue_atl_com_atollic_truestudio_as_symbols_defined]
SdkPeGenToolchainValues_gcc=[#stringList#SdkPeGenToolchainListValue_gcc_ilg_gnuarmeclipse_managedbuild_cross_option_c_compiler_defs|#stringList#SdkPeGenToolchainListValue_gcc_ilg_gnuarmeclipse_managedbuild_cross_option_cpp_compiler_defs]
SdkPeGenToolchainValues_iar=[#stringList#SdkPeGenToolchainListValue_iar_iar_arm_toolchain_compiler_option_defines_v5_4_0]
SpeedModeList=[SpeedMode0]
SpeedModeNames=[SpeedMode0|SpeedMode1|SpeedMode2|SpeedMode3|SpeedMode4|SpeedMode5|SpeedMode6|SpeedMode7]
SystemPrescaler=[1]
SystemPrescaler_Setting=[1]
USB0_ClkSel=[1]
USB0_ClkSel_Setting=[USB0_PLLFLL0Div]
USB0_PLLFLL0Div=[1]
USB0_PLLFLL0Div_Setting=[1]
USB0_PLLFLL0Frac=[1]
USB0_PLLFLL0Frac_Setting=[1]
WDOGAddPresc=[1]
WDOGAddPresc_Setting=[1]
WDOGClkSel=[1]
WDOGClkSel_Setting=[OUTDIV2Presc]
adcCfg_decList=[extern const adc16_converter_config_t adConv2_InitConfig0;]
adcHwCfg_decList=[extern const adc16_hw_cmp_config_t adConv2_HwConfig0;]
pitCfg_decList=[extern const pit_user_config_t pitTimer4_InitConfig0;]
sdhcCfg_decList=[extern const sdhc_user_config_t fsl_sdhc1_InitConfig0;]
virtual_ADC0_TotalConversionPrescaler=[1]
virtual_ADC0_TotalConversionPrescaler_Setting=[1]
virtual_ADC1_TotalConversionPrescaler=[1]
virtual_ADC1_TotalConversionPrescaler_Setting=[1]

{{DEVELOPMENT}} --------(((DEBUGINFO)))--------.{{DEVELOPMENT}} 

